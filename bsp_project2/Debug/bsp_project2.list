
bsp_project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08008050  08008050  00018050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008074  08008074  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800807c  0800807c  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008080  08008080  00018080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08008084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00000864  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000974  20000974  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f80  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fe0  00000000  00000000  000380c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  0003c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  0003d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c6c  00000000  00000000  0003e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198ab  00000000  00000000  000631bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce930  00000000  00000000  0007ca67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b397  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005060  00000000  00000000  0014b3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008038 	.word	0x08008038

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	08008038 	.word	0x08008038

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80004da:	f000 ff09 	bl	80012f0 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80004e4:	f107 030f 	add.w	r3, r7, #15
 80004e8:	2201      	movs	r2, #1
 80004ea:	2120      	movs	r1, #32
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 ff5d 	bl	80013ac <ACCELERO_IO_Write>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <LIS302DL_DeInit>:
  * @brief  LIS302DL De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000512:	f000 feed 	bl	80012f0 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	2201      	movs	r2, #1
 800051a:	210f      	movs	r1, #15
 800051c:	4618      	mov	r0, r3
 800051e:	f000 ff77 	bl	8001410 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 8000522:	79fb      	ldrb	r3, [r7, #7]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800053a:	f107 030f 	add.w	r3, r7, #15
 800053e:	2201      	movs	r2, #1
 8000540:	2121      	movs	r1, #33	; 0x21
 8000542:	4618      	mov	r0, r3
 8000544:	f000 ff64 	bl	8001410 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 800054e:	b2db      	uxtb	r3, r3
 8000550:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4313      	orrs	r3, r2
 8000558:	b2db      	uxtb	r3, r3
 800055a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800055c:	f107 030f 	add.w	r3, r7, #15
 8000560:	2201      	movs	r2, #1
 8000562:	2121      	movs	r1, #33	; 0x21
 8000564:	4618      	mov	r0, r3
 8000566:	f000 ff21 	bl	80013ac <ACCELERO_IO_Write>
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800057e:	f107 030f 	add.w	r3, r7, #15
 8000582:	2201      	movs	r2, #1
 8000584:	2138      	movs	r1, #56	; 0x38
 8000586:	4618      	mov	r0, r3
 8000588:	f000 ff42 	bl	8001410 <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000594:	4313      	orrs	r3, r2
 8000596:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800059c:	4313      	orrs	r3, r2
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005a2:	f107 030f 	add.w	r3, r7, #15
 80005a6:	2201      	movs	r2, #1
 80005a8:	2138      	movs	r1, #56	; 0x38
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fefe 	bl	80013ac <ACCELERO_IO_Write>
}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 80005c2:	f000 fec3 	bl	800134c <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80005c6:	2340      	movs	r3, #64	; 0x40
 80005c8:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 80005ca:	2310      	movs	r3, #16
 80005cc:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80005ce:	2320      	movs	r3, #32
 80005d0:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffcc 	bl	8000572 <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 80005da:	233f      	movs	r3, #63	; 0x3f
 80005dc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	2201      	movs	r2, #1
 80005e2:	2122      	movs	r1, #34	; 0x22
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fee1 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 80005ea:	2350      	movs	r3, #80	; 0x50
 80005ec:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	2201      	movs	r2, #1
 80005f2:	2138      	movs	r1, #56	; 0x38
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fed9 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 80005fa:	23aa      	movs	r3, #170	; 0xaa
 80005fc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	2201      	movs	r2, #1
 8000602:	213b      	movs	r1, #59	; 0x3b
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fed1 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 800060a:	230a      	movs	r3, #10
 800060c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2201      	movs	r2, #1
 8000612:	213c      	movs	r1, #60	; 0x3c
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fec9 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 800061a:	234c      	movs	r3, #76	; 0x4c
 800061c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	2201      	movs	r2, #1
 8000622:	2130      	movs	r1, #48	; 0x30
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fec1 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 800062a:	2303      	movs	r3, #3
 800062c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	2201      	movs	r2, #1
 8000632:	213d      	movs	r1, #61	; 0x3d
 8000634:	4618      	mov	r0, r3
 8000636:	f000 feb9 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 800063a:	237f      	movs	r3, #127	; 0x7f
 800063c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	2201      	movs	r2, #1
 8000642:	213e      	movs	r1, #62	; 0x3e
 8000644:	4618      	mov	r0, r3
 8000646:	f000 feb1 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 800064a:	237f      	movs	r3, #127	; 0x7f
 800064c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	2201      	movs	r2, #1
 8000652:	213f      	movs	r1, #63	; 0x3f
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fea9 	bl	80013ac <ACCELERO_IO_Write>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	2201      	movs	r2, #1
 8000670:	2139      	movs	r1, #57	; 0x39
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fecc 	bl	8001410 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2206      	movs	r2, #6
 800067e:	2127      	movs	r1, #39	; 0x27
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fec5 	bl	8001410 <ACCELERO_IO_Read>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	2201      	movs	r2, #1
 8000698:	2121      	movs	r1, #33	; 0x21
 800069a:	4618      	mov	r0, r3
 800069c:	f000 feb8 	bl	8001410 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	2201      	movs	r2, #1
 80006ae:	2121      	movs	r1, #33	; 0x21
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fe7b 	bl	80013ac <ACCELERO_IO_Write>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b088      	sub	sp, #32
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80006c6:	2312      	movs	r3, #18
 80006c8:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 80006ce:	f107 030f 	add.w	r3, r7, #15
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fe9a 	bl	8001410 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	2206      	movs	r2, #6
 80006e2:	2129      	movs	r1, #41	; 0x29
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fe93 	bl	8001410 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	77bb      	strb	r3, [r7, #30]
 80006ee:	e00f      	b.n	8000710 <LIS302DL_ReadACC+0x52>
  {
    pnRawData[i] = buffer[2*i];
 80006f0:	7fbb      	ldrb	r3, [r7, #30]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	3320      	adds	r3, #32
 80006f6:	443b      	add	r3, r7
 80006f8:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	b212      	sxth	r2, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	3320      	adds	r3, #32
 8000704:	443b      	add	r3, r7
 8000706:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800070a:	7fbb      	ldrb	r3, [r7, #30]
 800070c:	3301      	adds	r3, #1
 800070e:	77bb      	strb	r3, [r7, #30]
 8000710:	7fbb      	ldrb	r3, [r7, #30]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d9ec      	bls.n	80006f0 <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	f003 0320 	and.w	r3, r3, #32
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <LIS302DL_ReadACC+0x68>
 8000720:	2b20      	cmp	r3, #32
 8000722:	d003      	beq.n	800072c <LIS302DL_ReadACC+0x6e>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 8000724:	e005      	b.n	8000732 <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8000726:	2312      	movs	r3, #18
 8000728:	77fb      	strb	r3, [r7, #31]
    break;
 800072a:	e002      	b.n	8000732 <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 800072c:	2348      	movs	r3, #72	; 0x48
 800072e:	77fb      	strb	r3, [r7, #31]
    break;
 8000730:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	77bb      	strb	r3, [r7, #30]
 8000736:	e014      	b.n	8000762 <LIS302DL_ReadACC+0xa4>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000738:	7fbb      	ldrb	r3, [r7, #30]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	3320      	adds	r3, #32
 800073e:	443b      	add	r3, r7
 8000740:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000744:	b29a      	uxth	r2, r3
 8000746:	7ffb      	ldrb	r3, [r7, #31]
 8000748:	b29b      	uxth	r3, r3
 800074a:	fb12 f303 	smulbb	r3, r2, r3
 800074e:	b299      	uxth	r1, r3
 8000750:	7fbb      	ldrb	r3, [r7, #30]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	4413      	add	r3, r2
 8000758:	b20a      	sxth	r2, r1
 800075a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800075c:	7fbb      	ldrb	r3, [r7, #30]
 800075e:	3301      	adds	r3, #1
 8000760:	77bb      	strb	r3, [r7, #30]
 8000762:	7fbb      	ldrb	r3, [r7, #30]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d9e7      	bls.n	8000738 <LIS302DL_ReadACC+0x7a>
  }
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000780:	f000 fdb6 	bl	80012f0 <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 800078a:	f107 030f 	add.w	r3, r7, #15
 800078e:	2201      	movs	r2, #1
 8000790:	2120      	movs	r1, #32
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fe0a 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000798:	88fb      	ldrh	r3, [r7, #6]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b29b      	uxth	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 80007a2:	f107 030f 	add.w	r3, r7, #15
 80007a6:	2201      	movs	r2, #1
 80007a8:	2124      	movs	r1, #36	; 0x24
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fdfe 	bl	80013ac <ACCELERO_IO_Write>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <LIS3DSH_DeInit>:
  * @brief  LIS3DSH De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80007d0:	f000 fd8e 	bl	80012f0 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	2201      	movs	r2, #1
 80007d8:	210f      	movs	r1, #15
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fe18 	bl	8001410 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007fe:	4313      	orrs	r3, r2
 8000800:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000806:	4313      	orrs	r3, r2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 800080c:	f107 030f 	add.w	r3, r7, #15
 8000810:	2201      	movs	r2, #1
 8000812:	2123      	movs	r1, #35	; 0x23
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fdc9 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000822:	4313      	orrs	r3, r2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000828:	f107 030f 	add.w	r3, r7, #15
 800082c:	2201      	movs	r2, #1
 800082e:	2121      	movs	r1, #33	; 0x21
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fdbb 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 800083e:	4313      	orrs	r3, r2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8000844:	f107 030f 	add.w	r3, r7, #15
 8000848:	2201      	movs	r2, #1
 800084a:	2122      	movs	r1, #34	; 0x22
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fdad 	bl	80013ac <ACCELERO_IO_Write>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 8000864:	f000 fd72 	bl	800134c <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 800086c:	2300      	movs	r3, #0
 800086e:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000878:	2301      	movs	r3, #1
 800087a:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 800087c:	2300      	movs	r3, #0
 800087e:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000880:	463b      	mov	r3, r7
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffb1 	bl	80007ea <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 8000888:	2303      	movs	r3, #3
 800088a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	2201      	movs	r2, #1
 8000890:	2152      	movs	r1, #82	; 0x52
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fd8a 	bl	80013ac <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8000898:	23c8      	movs	r3, #200	; 0xc8
 800089a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	2201      	movs	r2, #1
 80008a0:	2154      	movs	r1, #84	; 0x54
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fd82 	bl	80013ac <ACCELERO_IO_Write>
  ctrl=0x45; 
 80008a8:	2345      	movs	r3, #69	; 0x45
 80008aa:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	2201      	movs	r2, #1
 80008b0:	2156      	movs	r1, #86	; 0x56
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fd7a 	bl	80013ac <ACCELERO_IO_Write>
  ctrl=0xFC; 
 80008b8:	23fc      	movs	r3, #252	; 0xfc
 80008ba:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	2201      	movs	r2, #1
 80008c0:	215a      	movs	r1, #90	; 0x5a
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fd72 	bl	80013ac <ACCELERO_IO_Write>
  ctrl=0xA1; 
 80008c8:	23a1      	movs	r3, #161	; 0xa1
 80008ca:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	2201      	movs	r2, #1
 80008d0:	215b      	movs	r1, #91	; 0x5b
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fd6a 	bl	80013ac <ACCELERO_IO_Write>
  ctrl=0x01; 
 80008d8:	2301      	movs	r3, #1
 80008da:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	2201      	movs	r2, #1
 80008e0:	215c      	movs	r1, #92	; 0x5c
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fd62 	bl	80013ac <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	2201      	movs	r2, #1
 80008ec:	217b      	movs	r1, #123	; 0x7b
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fd5c 	bl	80013ac <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	2201      	movs	r2, #1
 80008f8:	2160      	movs	r1, #96	; 0x60
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fd56 	bl	80013ac <ACCELERO_IO_Write>
  ctrl=0x06; 
 8000900:	2306      	movs	r3, #6
 8000902:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	2201      	movs	r2, #1
 8000908:	2161      	movs	r1, #97	; 0x61
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fd4e 	bl	80013ac <ACCELERO_IO_Write>
  ctrl=0x28; 
 8000910:	2328      	movs	r3, #40	; 0x28
 8000912:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	2201      	movs	r2, #1
 8000918:	2162      	movs	r1, #98	; 0x62
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fd46 	bl	80013ac <ACCELERO_IO_Write>
  ctrl=0x11; 
 8000920:	2311      	movs	r3, #17
 8000922:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	2201      	movs	r2, #1
 8000928:	2163      	movs	r1, #99	; 0x63
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fd3e 	bl	80013ac <ACCELERO_IO_Write>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2201      	movs	r2, #1
 8000942:	2125      	movs	r1, #37	; 0x25
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fd63 	bl	8001410 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	2125      	movs	r1, #37	; 0x25
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fd26 	bl	80013ac <ACCELERO_IO_Write>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8000970:	2300      	movs	r3, #0
 8000972:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000974:	4b64      	ldr	r3, [pc, #400]	; (8000b08 <LIS3DSH_ReadACC+0x1a0>)
 8000976:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 800097e:	f107 030b 	add.w	r3, r7, #11
 8000982:	2201      	movs	r2, #1
 8000984:	2124      	movs	r1, #36	; 0x24
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fd42 	bl	8001410 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2201      	movs	r2, #1
 8000992:	2128      	movs	r1, #40	; 0x28
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fd3b 	bl	8001410 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	3301      	adds	r3, #1
 80009a0:	2201      	movs	r2, #1
 80009a2:	2129      	movs	r1, #41	; 0x29
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fd33 	bl	8001410 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	3302      	adds	r3, #2
 80009b0:	2201      	movs	r2, #1
 80009b2:	212a      	movs	r1, #42	; 0x2a
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fd2b 	bl	8001410 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	3303      	adds	r3, #3
 80009c0:	2201      	movs	r2, #1
 80009c2:	212b      	movs	r1, #43	; 0x2b
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fd23 	bl	8001410 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	3304      	adds	r3, #4
 80009d0:	2201      	movs	r2, #1
 80009d2:	212c      	movs	r1, #44	; 0x2c
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fd1b 	bl	8001410 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	3305      	adds	r3, #5
 80009e0:	2201      	movs	r2, #1
 80009e2:	212d      	movs	r1, #45	; 0x2d
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fd13 	bl	8001410 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 80009ea:	7afb      	ldrb	r3, [r7, #11]
 80009ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80009f0:	2b20      	cmp	r3, #32
 80009f2:	d854      	bhi.n	8000a9e <LIS3DSH_ReadACC+0x136>
 80009f4:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <LIS3DSH_ReadACC+0x94>)
 80009f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fa:	bf00      	nop
 80009fc:	08000a81 	.word	0x08000a81
 8000a00:	08000a9f 	.word	0x08000a9f
 8000a04:	08000a9f 	.word	0x08000a9f
 8000a08:	08000a9f 	.word	0x08000a9f
 8000a0c:	08000a9f 	.word	0x08000a9f
 8000a10:	08000a9f 	.word	0x08000a9f
 8000a14:	08000a9f 	.word	0x08000a9f
 8000a18:	08000a9f 	.word	0x08000a9f
 8000a1c:	08000a87 	.word	0x08000a87
 8000a20:	08000a9f 	.word	0x08000a9f
 8000a24:	08000a9f 	.word	0x08000a9f
 8000a28:	08000a9f 	.word	0x08000a9f
 8000a2c:	08000a9f 	.word	0x08000a9f
 8000a30:	08000a9f 	.word	0x08000a9f
 8000a34:	08000a9f 	.word	0x08000a9f
 8000a38:	08000a9f 	.word	0x08000a9f
 8000a3c:	08000a8d 	.word	0x08000a8d
 8000a40:	08000a9f 	.word	0x08000a9f
 8000a44:	08000a9f 	.word	0x08000a9f
 8000a48:	08000a9f 	.word	0x08000a9f
 8000a4c:	08000a9f 	.word	0x08000a9f
 8000a50:	08000a9f 	.word	0x08000a9f
 8000a54:	08000a9f 	.word	0x08000a9f
 8000a58:	08000a9f 	.word	0x08000a9f
 8000a5c:	08000a93 	.word	0x08000a93
 8000a60:	08000a9f 	.word	0x08000a9f
 8000a64:	08000a9f 	.word	0x08000a9f
 8000a68:	08000a9f 	.word	0x08000a9f
 8000a6c:	08000a9f 	.word	0x08000a9f
 8000a70:	08000a9f 	.word	0x08000a9f
 8000a74:	08000a9f 	.word	0x08000a9f
 8000a78:	08000a9f 	.word	0x08000a9f
 8000a7c:	08000a99 	.word	0x08000a99
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <LIS3DSH_ReadACC+0x1a0>)
 8000a82:	61bb      	str	r3, [r7, #24]
    break;
 8000a84:	e00c      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <LIS3DSH_ReadACC+0x1a4>)
 8000a88:	61bb      	str	r3, [r7, #24]
    break;
 8000a8a:	e009      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <LIS3DSH_ReadACC+0x1a8>)
 8000a8e:	61bb      	str	r3, [r7, #24]
    break;
 8000a90:	e006      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <LIS3DSH_ReadACC+0x1ac>)
 8000a94:	61bb      	str	r3, [r7, #24]
    break;
 8000a96:	e003      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <LIS3DSH_ReadACC+0x1b0>)
 8000a9a:	61bb      	str	r3, [r7, #24]
    break;
 8000a9c:	e000      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8000a9e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	77fb      	strb	r3, [r7, #31]
 8000aa4:	e027      	b.n	8000af6 <LIS3DSH_ReadACC+0x18e>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	3301      	adds	r3, #1
 8000aac:	3320      	adds	r3, #32
 8000aae:	443b      	add	r3, r7
 8000ab0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	7ffa      	ldrb	r2, [r7, #31]
 8000ab8:	0052      	lsls	r2, r2, #1
 8000aba:	3220      	adds	r2, #32
 8000abc:	443a      	add	r2, r7
 8000abe:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000acc:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad4:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae8:	ee17 2a90 	vmov	r2, s15
 8000aec:	b212      	sxth	r2, r2
 8000aee:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
 8000af2:	3301      	adds	r3, #1
 8000af4:	77fb      	strb	r3, [r7, #31]
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d9d4      	bls.n	8000aa6 <LIS3DSH_ReadACC+0x13e>
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	3d75c28f 	.word	0x3d75c28f
 8000b0c:	3df5c28f 	.word	0x3df5c28f
 8000b10:	3e3851ec 	.word	0x3e3851ec
 8000b14:	3e75c28f 	.word	0x3e75c28f
 8000b18:	3f3ae148 	.word	0x3f3ae148

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 ff64 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f81a 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f000 f916 	bl	8000d58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b2c:	f000 f880 	bl	8000c30 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b30:	f000 f8ac 	bl	8000c8c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b34:	f000 f8da 	bl	8000cec <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000b38:	f006 fe8e 	bl	8007858 <MX_USB_HOST_Init>
  BSP_LED_Init(LED3);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f000 fa8d 	bl	800105c <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 fa8a 	bl	800105c <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f000 fa87 	bl	800105c <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 fa84 	bl	800105c <BSP_LED_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ACCELERO_MEMS_Test();
 8000b54:	f000 fa03 	bl	8000f5e <ACCELERO_MEMS_Test>
 8000b58:	e7fc      	b.n	8000b54 <main+0x38>
	...

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	; 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	2230      	movs	r2, #48	; 0x30
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 f95e 	bl	8007e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a27      	ldr	r2, [pc, #156]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <SystemClock_Config+0xd0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <SystemClock_Config+0xd0>)
 8000ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <SystemClock_Config+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	4618      	mov	r0, r3
 8000be4:	f003 fd2e 	bl	8004644 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bee:	f000 f9b1 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2105      	movs	r1, #5
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 ff8f 	bl	8004b34 <HAL_RCC_ClockConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c1c:	f000 f99a 	bl	8000f54 <Error_Handler>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3750      	adds	r7, #80	; 0x50
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40007000 	.word	0x40007000

08000c30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <MX_I2C1_Init+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <MX_I2C1_Init+0x58>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_I2C1_Init+0x50>)
 8000c6e:	f002 ff05 	bl	8003a7c <HAL_I2C_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c78:	f000 f96c 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000012c 	.word	0x2000012c
 8000c84:	40005400 	.word	0x40005400
 8000c88:	000186a0 	.word	0x000186a0

08000c8c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <MX_I2S3_Init+0x58>)
 8000c94:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ce8 <MX_I2S3_Init+0x5c>)
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_I2S3_Init+0x54>)
 8000ccc:	f003 f81a 	bl	8003d04 <HAL_I2S_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000cd6:	f000 f93d 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000180 	.word	0x20000180
 8000ce4:	40003c00 	.word	0x40003c00
 8000ce8:	00017700 	.word	0x00017700

08000cec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000cf2:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <MX_SPI1_Init+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d38:	220a      	movs	r2, #10
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_SPI1_Init+0x64>)
 8000d3e:	f004 fa45 	bl	80051cc <HAL_SPI_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d48:	f000 f904 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200001c8 	.word	0x200001c8
 8000d54:	40013000 	.word	0x40013000

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b72      	ldr	r3, [pc, #456]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a71      	ldr	r2, [pc, #452]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	4b6b      	ldr	r3, [pc, #428]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a6a      	ldr	r2, [pc, #424]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b68      	ldr	r3, [pc, #416]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b64      	ldr	r3, [pc, #400]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a63      	ldr	r2, [pc, #396]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b61      	ldr	r3, [pc, #388]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a5c      	ldr	r2, [pc, #368]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b5a      	ldr	r3, [pc, #360]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a55      	ldr	r2, [pc, #340]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b4f      	ldr	r3, [pc, #316]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a4e      	ldr	r2, [pc, #312]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <MX_GPIO_Init+0x1e4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2108      	movs	r1, #8
 8000e1a:	4849      	ldr	r0, [pc, #292]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000e1c:	f001 fa26 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2101      	movs	r1, #1
 8000e24:	4847      	ldr	r0, [pc, #284]	; (8000f44 <MX_GPIO_Init+0x1ec>)
 8000e26:	f001 fa21 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e30:	4845      	ldr	r0, [pc, #276]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000e32:	f001 fa1b 	bl	800226c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e36:	2308      	movs	r3, #8
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	483c      	ldr	r0, [pc, #240]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000e4e:	f000 ff75 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4836      	ldr	r0, [pc, #216]	; (8000f44 <MX_GPIO_Init+0x1ec>)
 8000e6a:	f000 ff67 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	482e      	ldr	r0, [pc, #184]	; (8000f44 <MX_GPIO_Init+0x1ec>)
 8000e8a:	f000 ff57 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e92:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	482a      	ldr	r0, [pc, #168]	; (8000f4c <MX_GPIO_Init+0x1f4>)
 8000ea4:	f000 ff4a 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4825      	ldr	r0, [pc, #148]	; (8000f50 <MX_GPIO_Init+0x1f8>)
 8000ebc:	f000 ff3e 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	481c      	ldr	r0, [pc, #112]	; (8000f50 <MX_GPIO_Init+0x1f8>)
 8000ede:	f000 ff2d 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ee2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ee6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4813      	ldr	r0, [pc, #76]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000efc:	f000 ff1e 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f00:	2320      	movs	r3, #32
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000f14:	f000 ff12 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000f2e:	f000 ff05 	bl	8001d3c <HAL_GPIO_Init>

}
 8000f32:	bf00      	nop
 8000f34:	3730      	adds	r7, #48	; 0x30
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>

08000f5e <ACCELERO_MEMS_Test>:
  *         The main objective of this test is to check acceleration on 2 axes X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* Init Accelerometer MEMS */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8000f62:	f000 fa8f 	bl	8001484 <BSP_ACCELERO_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <ACCELERO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8000f6c:	f7ff fff2 	bl	8000f54 <Error_Handler>
  }
  

    ACCELERO_ReadAcc();
 8000f70:	f000 f802 	bl	8000f78 <ACCELERO_ReadAcc>

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <ACCELERO_ReadAcc>:
  * @brief  Read Acceleration data.
  * @param  None
  * @retval None
  */
static void ACCELERO_ReadAcc(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
  /* Accelerometer variables */
  int16_t buffer[3] = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	809a      	strh	r2, [r3, #4]
  int16_t xval, yval = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	81fb      	strh	r3, [r7, #14]
  
  /* Read Acceleration */
  BSP_ACCELERO_GetXYZ(buffer);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fb05 	bl	800159c <BSP_ACCELERO_GetXYZ>
  
  xval = buffer[0];
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	81bb      	strh	r3, [r7, #12]
  yval = buffer[1];
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	81fb      	strh	r3, [r7, #14]
  
  if((ABS(xval))>(ABS(yval)))
 8000f9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bfb8      	it	lt
 8000fa2:	425b      	neglt	r3, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bfb8      	it	lt
 8000fae:	425b      	neglt	r3, r3
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d91f      	bls.n	8000ff6 <ACCELERO_ReadAcc+0x7e>
  {
    if(xval > ThresholdHigh)
 8000fb6:	4b27      	ldr	r3, [pc, #156]	; (8001054 <ACCELERO_ReadAcc+0xdc>)
 8000fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dd06      	ble.n	8000fd2 <ACCELERO_ReadAcc+0x5a>
    { 
      /* LED5 On */
      BSP_LED_On(LED5);
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f000 f8c1 	bl	800114c <BSP_LED_On>
      HAL_Delay(10);
 8000fca:	200a      	movs	r0, #10
 8000fcc:	f000 fd80 	bl	8001ad0 <HAL_Delay>
 8000fd0:	e030      	b.n	8001034 <ACCELERO_ReadAcc+0xbc>
    }
    else if(xval < ThresholdLow)
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <ACCELERO_ReadAcc+0xe0>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	da06      	bge.n	8000fee <ACCELERO_ReadAcc+0x76>
    { 
      /* LED4 On */
      BSP_LED_On(LED4);      
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f8b3 	bl	800114c <BSP_LED_On>
      HAL_Delay(10);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f000 fd72 	bl	8001ad0 <HAL_Delay>
 8000fec:	e022      	b.n	8001034 <ACCELERO_ReadAcc+0xbc>
    }
    else
    { 
      HAL_Delay(10);
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f000 fd6e 	bl	8001ad0 <HAL_Delay>
 8000ff4:	e01e      	b.n	8001034 <ACCELERO_ReadAcc+0xbc>
    }
  }
  else
  {
    if(yval < ThresholdLow)
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <ACCELERO_ReadAcc+0xe0>)
 8000ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001000:	429a      	cmp	r2, r3
 8001002:	da06      	bge.n	8001012 <ACCELERO_ReadAcc+0x9a>
    {
      /* LED6 On */
      BSP_LED_On(LED6);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f8a1 	bl	800114c <BSP_LED_On>
      HAL_Delay(10);
 800100a:	200a      	movs	r0, #10
 800100c:	f000 fd60 	bl	8001ad0 <HAL_Delay>
 8001010:	e010      	b.n	8001034 <ACCELERO_ReadAcc+0xbc>
    }
    else if(yval > ThresholdHigh)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <ACCELERO_ReadAcc+0xdc>)
 8001014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001018:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800101c:	429a      	cmp	r2, r3
 800101e:	dd06      	ble.n	800102e <ACCELERO_ReadAcc+0xb6>
    {
      /* LED3 On */
      BSP_LED_On(LED3);
 8001020:	2001      	movs	r0, #1
 8001022:	f000 f893 	bl	800114c <BSP_LED_On>
      HAL_Delay(10);
 8001026:	200a      	movs	r0, #10
 8001028:	f000 fd52 	bl	8001ad0 <HAL_Delay>
 800102c:	e002      	b.n	8001034 <ACCELERO_ReadAcc+0xbc>
    } 
    else
    { 
      HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f000 fd4e 	bl	8001ad0 <HAL_Delay>
    }
  } 
  
  BSP_LED_Off(LED3);
 8001034:	2001      	movs	r0, #1
 8001036:	f000 f8a3 	bl	8001180 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f8a0 	bl	8001180 <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8001040:	2002      	movs	r0, #2
 8001042:	f000 f89d 	bl	8001180 <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8001046:	2003      	movs	r0, #3
 8001048:	f000 f89a 	bl	8001180 <BSP_LED_Off>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000068 	.word	0x20000068
 8001058:	2000006a 	.word	0x2000006a

0800105c <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10e      	bne.n	800108a <BSP_LED_Init+0x2e>
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <BSP_LED_Init+0xe4>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <BSP_LED_Init+0xe4>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6313      	str	r3, [r2, #48]	; 0x30
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <BSP_LED_Init+0xe4>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	61bb      	str	r3, [r7, #24]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	e034      	b.n	80010f4 <BSP_LED_Init+0x98>
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d10e      	bne.n	80010ae <BSP_LED_Init+0x52>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <BSP_LED_Init+0xe4>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a29      	ldr	r2, [pc, #164]	; (8001140 <BSP_LED_Init+0xe4>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <BSP_LED_Init+0xe4>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	e022      	b.n	80010f4 <BSP_LED_Init+0x98>
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d10e      	bne.n	80010d2 <BSP_LED_Init+0x76>
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <BSP_LED_Init+0xe4>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	4a20      	ldr	r2, [pc, #128]	; (8001140 <BSP_LED_Init+0xe4>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	6313      	str	r3, [r2, #48]	; 0x30
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <BSP_LED_Init+0xe4>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	e010      	b.n	80010f4 <BSP_LED_Init+0x98>
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d10d      	bne.n	80010f4 <BSP_LED_Init+0x98>
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <BSP_LED_Init+0xe4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <BSP_LED_Init+0xe4>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6313      	str	r3, [r2, #48]	; 0x30
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <BSP_LED_Init+0xe4>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4a13      	ldr	r2, [pc, #76]	; (8001144 <BSP_LED_Init+0xe8>)
 80010f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001102:	2301      	movs	r3, #1
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001106:	2302      	movs	r3, #2
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <BSP_LED_Init+0xec>)
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	f107 021c 	add.w	r2, r7, #28
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fe0f 	bl	8001d3c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <BSP_LED_Init+0xec>)
 8001122:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <BSP_LED_Init+0xe8>)
 800112a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	f001 f89b 	bl	800226c <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	08008054 	.word	0x08008054
 8001148:	2000006c 	.word	0x2000006c

0800114c <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <BSP_LED_On+0x2c>)
 800115a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <BSP_LED_On+0x30>)
 8001162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	f001 f87f 	bl	800226c <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000006c 	.word	0x2000006c
 800117c:	08008054 	.word	0x08008054

08001180 <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <BSP_LED_Off+0x2c>)
 800118e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <BSP_LED_Off+0x30>)
 8001196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	f001 f865 	bl	800226c <HAL_GPIO_WritePin>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000006c 	.word	0x2000006c
 80011b0:	08008054 	.word	0x08008054

080011b4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80011b8:	4819      	ldr	r0, [pc, #100]	; (8001220 <SPIx_Init+0x6c>)
 80011ba:	f004 fa5a 	bl	8005672 <HAL_SPI_GetState>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d12a      	bne.n	800121a <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <SPIx_Init+0x6c>)
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <SPIx_Init+0x70>)
 80011c8:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <SPIx_Init+0x6c>)
 80011cc:	2218      	movs	r2, #24
 80011ce:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <SPIx_Init+0x6c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <SPIx_Init+0x6c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <SPIx_Init+0x6c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <SPIx_Init+0x6c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <SPIx_Init+0x6c>)
 80011ea:	2207      	movs	r2, #7
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <SPIx_Init+0x6c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <SPIx_Init+0x6c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <SPIx_Init+0x6c>)
 80011fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001200:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <SPIx_Init+0x6c>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SPIx_Init+0x6c>)
 800120a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800120e:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 8001210:	f000 f836 	bl	8001280 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <SPIx_Init+0x6c>)
 8001216:	f003 ffd9 	bl	80051cc <HAL_SPI_Init>
  }
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000220 	.word	0x20000220
 8001224:	40013000 	.word	0x40013000

08001228 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <SPIx_WriteRead+0x38>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f107 020f 	add.w	r2, r7, #15
 800123e:	1df9      	adds	r1, r7, #7
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <SPIx_WriteRead+0x3c>)
 8001246:	f004 f872 	bl	800532e <HAL_SPI_TransmitReceive>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001250:	f000 f80a 	bl	8001268 <SPIx_Error>
  }
  
  return receivedbyte;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000007c 	.word	0x2000007c
 8001264:	20000220 	.word	0x20000220

08001268 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication bus */
  HAL_SPI_DeInit(&SpiHandle);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <SPIx_Error+0x14>)
 800126e:	f004 f836 	bl	80052de <HAL_SPI_DeInit>
  
  /* Re-Initialize the SPI communication bus */
  SPIx_Init();
 8001272:	f7ff ff9f 	bl	80011b4 <SPIx_Init>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000220 	.word	0x20000220

08001280 <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <SPIx_MspInit+0x68>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <SPIx_MspInit+0x68>)
 8001290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <SPIx_MspInit+0x68>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <SPIx_MspInit+0x68>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <SPIx_MspInit+0x68>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <SPIx_MspInit+0x68>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 80012be:	23e0      	movs	r3, #224	; 0xe0
 80012c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 80012c6:	2302      	movs	r3, #2
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80012ce:	2305      	movs	r3, #5
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4619      	mov	r1, r3
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <SPIx_MspInit+0x6c>)
 80012da:	f000 fd2f 	bl	8001d3c <HAL_GPIO_Init>
}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000

080012f0 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <ACCELERO_IO_Init+0x54>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a11      	ldr	r2, [pc, #68]	; (8001344 <ACCELERO_IO_Init+0x54>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <ACCELERO_IO_Init+0x54>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8001312:	2308      	movs	r3, #8
 8001314:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800131e:	2301      	movs	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4808      	ldr	r0, [pc, #32]	; (8001348 <ACCELERO_IO_Init+0x58>)
 8001328:	f000 fd08 	bl	8001d3c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 800132c:	2201      	movs	r2, #1
 800132e:	2108      	movs	r1, #8
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <ACCELERO_IO_Init+0x58>)
 8001332:	f000 ff9b 	bl	800226c <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8001336:	f7ff ff3d 	bl	80011b4 <SPIx_Init>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40021000 	.word	0x40021000

0800134c <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <ACCELERO_IO_ITConfig+0x58>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <ACCELERO_IO_ITConfig+0x58>)
 800135c:	f043 0310 	orr.w	r3, r3, #16
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <ACCELERO_IO_ITConfig+0x58>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 800136e:	2302      	movs	r3, #2
 8001370:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001372:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001378:	2302      	movs	r3, #2
 800137a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4808      	ldr	r0, [pc, #32]	; (80013a8 <ACCELERO_IO_ITConfig+0x5c>)
 8001386:	f000 fcd9 	bl	8001d3c <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	210f      	movs	r1, #15
 800138e:	2007      	movs	r0, #7
 8001390:	f000 fc9d 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8001394:	2007      	movs	r0, #7
 8001396:	f000 fcb6 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40021000 	.word	0x40021000

080013ac <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80013bc:	883b      	ldrh	r3, [r7, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d903      	bls.n	80013ca <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 80013ca:	2200      	movs	r2, #0
 80013cc:	2108      	movs	r1, #8
 80013ce:	480f      	ldr	r0, [pc, #60]	; (800140c <ACCELERO_IO_Write+0x60>)
 80013d0:	f000 ff4c 	bl	800226c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff26 	bl	8001228 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80013dc:	e00a      	b.n	80013f4 <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff20 	bl	8001228 <SPIx_WriteRead>
    NumByteToWrite--;
 80013e8:	883b      	ldrh	r3, [r7, #0]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3301      	adds	r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80013f4:	883b      	ldrh	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f1      	bne.n	80013de <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 80013fa:	2201      	movs	r2, #1
 80013fc:	2108      	movs	r1, #8
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <ACCELERO_IO_Write+0x60>)
 8001400:	f000 ff34 	bl	800226c <HAL_GPIO_WritePin>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000

08001410 <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
 800141c:	4613      	mov	r3, r2
 800141e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001420:	883b      	ldrh	r3, [r7, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d904      	bls.n	8001430 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800142c:	70fb      	strb	r3, [r7, #3]
 800142e:	e003      	b.n	8001438 <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001436:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001438:	2200      	movs	r2, #0
 800143a:	2108      	movs	r1, #8
 800143c:	4810      	ldr	r0, [pc, #64]	; (8001480 <ACCELERO_IO_Read+0x70>)
 800143e:	f000 ff15 	bl	800226c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff feef 	bl	8001228 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800144a:	e00c      	b.n	8001466 <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff feeb 	bl	8001228 <SPIx_WriteRead>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800145a:	883b      	ldrh	r3, [r7, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3301      	adds	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8001466:	883b      	ldrh	r3, [r7, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ef      	bne.n	800144c <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 800146c:	2201      	movs	r2, #1
 800146e:	2108      	movs	r1, #8
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <ACCELERO_IO_Read+0x70>)
 8001472:	f000 fefb 	bl	800226c <HAL_GPIO_WritePin>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000

08001484 <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 800148e:	2300      	movs	r3, #0
 8001490:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 8001492:	2300      	movs	r3, #0
 8001494:	723b      	strb	r3, [r7, #8]
 8001496:	2300      	movs	r3, #0
 8001498:	727b      	strb	r3, [r7, #9]
 800149a:	2300      	movs	r3, #0
 800149c:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <BSP_ACCELERO_Init+0x10c>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4798      	blx	r3
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b3b      	cmp	r3, #59	; 0x3b
 80014a8:	d138      	bne.n	800151c <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <BSP_ACCELERO_Init+0x110>)
 80014ac:	4a38      	ldr	r2, [pc, #224]	; (8001590 <BSP_ACCELERO_Init+0x10c>)
 80014ae:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 80014b0:	2340      	movs	r3, #64	; 0x40
 80014b2:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 80014b4:	2300      	movs	r3, #0
 80014b6:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 80014b8:	2307      	movs	r3, #7
 80014ba:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80014c4:	7b7a      	ldrb	r2, [r7, #13]
 80014c6:	7b3b      	ldrb	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80014d2:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80014da:	4313      	orrs	r3, r2
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <BSP_ACCELERO_Init+0x110>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	8aba      	ldrh	r2, [r7, #20]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 80014ec:	2320      	movs	r3, #32
 80014ee:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 80014f4:	230c      	movs	r3, #12
 80014f6:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80014f8:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 80014fa:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 8001500:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8001502:	4313      	orrs	r3, r2
 8001504:	b2db      	uxtb	r3, r3
 8001506:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <BSP_ACCELERO_Init+0x110>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	8aba      	ldrh	r2, [r7, #20]
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	4610      	mov	r0, r2
 8001514:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
 800151a:	e034      	b.n	8001586 <BSP_ACCELERO_Init+0x102>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <BSP_ACCELERO_Init+0x114>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4798      	blx	r3
 8001522:	4603      	mov	r3, r0
 8001524:	2b3f      	cmp	r3, #63	; 0x3f
 8001526:	d12c      	bne.n	8001582 <BSP_ACCELERO_Init+0xfe>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <BSP_ACCELERO_Init+0x110>)
 800152a:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <BSP_ACCELERO_Init+0x114>)
 800152c:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 800152e:	2360      	movs	r3, #96	; 0x60
 8001530:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 8001532:	2307      	movs	r3, #7
 8001534:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 8001536:	2300      	movs	r3, #0
 8001538:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 800153a:	2300      	movs	r3, #0
 800153c:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 800153e:	2300      	movs	r3, #0
 8001540:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 8001542:	2300      	movs	r3, #0
 8001544:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8001546:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 8001548:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 800154a:	4313      	orrs	r3, r2
 800154c:	b2db      	uxtb	r3, r3
 800154e:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001550:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 8001552:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001554:	4313      	orrs	r3, r2
 8001556:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 8001558:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 800155a:	4313      	orrs	r3, r2
 800155c:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 800155e:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001560:	4313      	orrs	r3, r2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	b29b      	uxth	r3, r3
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b29a      	uxth	r2, r3
 800156a:	8abb      	ldrh	r3, [r7, #20]
 800156c:	4313      	orrs	r3, r2
 800156e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <BSP_ACCELERO_Init+0x110>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	8aba      	ldrh	r2, [r7, #20]
 8001578:	4610      	mov	r0, r2
 800157a:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	75fb      	strb	r3, [r7, #23]
 8001580:	e001      	b.n	8001586 <BSP_ACCELERO_Init+0x102>
  }

  else
  {
    ret = ACCELERO_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8001586:	7dfb      	ldrb	r3, [r7, #23]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000000 	.word	0x20000000
 8001594:	20000278 	.word	0x20000278
 8001598:	20000034 	.word	0x20000034

0800159c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	81fb      	strh	r3, [r7, #14]
  
  if(AcceleroDrv->GetXYZ != NULL)
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <BSP_ACCELERO_GetXYZ+0x50>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d018      	beq.n	80015e4 <BSP_ACCELERO_GetXYZ+0x48>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <BSP_ACCELERO_GetXYZ+0x50>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <BSP_ACCELERO_GetXYZ+0x50>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <BSP_ACCELERO_GetXYZ+0x54>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d10e      	bne.n	80015e4 <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	801a      	strh	r2, [r3, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	425b      	negs	r3, r3
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3302      	adds	r3, #2
 80015e0:	b212      	sxth	r2, r2
 80015e2:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000278 	.word	0x20000278
 80015f0:	20000000 	.word	0x20000000

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_MspInit+0x4c>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_MspInit+0x4c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_MspInit+0x4c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_MspInit+0x4c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001632:	2007      	movs	r0, #7
 8001634:	f000 fb40 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800

08001644 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <HAL_I2C_MspInit+0x84>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d12c      	bne.n	80016c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_I2C_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a17      	ldr	r2, [pc, #92]	; (80016cc <HAL_I2C_MspInit+0x88>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_I2C_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001682:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001688:	2312      	movs	r3, #18
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168c:	2301      	movs	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001694:	2304      	movs	r3, #4
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <HAL_I2C_MspInit+0x8c>)
 80016a0:	f000 fb4c 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_I2C_MspInit+0x88>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_I2C_MspInit+0x88>)
 80016ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b2:	6413      	str	r3, [r2, #64]	; 0x40
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_I2C_MspInit+0x88>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40005400 	.word	0x40005400
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020400 	.word	0x40020400

080016d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a31      	ldr	r2, [pc, #196]	; (80017c4 <HAL_I2S_MspInit+0xf0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d15a      	bne.n	80017ba <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001704:	2301      	movs	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001708:	23c0      	movs	r3, #192	; 0xc0
 800170a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800170c:	2302      	movs	r3, #2
 800170e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4618      	mov	r0, r3
 8001716:	f003 fc19 	bl	8004f4c <HAL_RCCEx_PeriphCLKConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001720:	f7ff fc18 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_I2S_MspInit+0xf4>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <HAL_I2S_MspInit+0xf4>)
 800172e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001732:	6413      	str	r3, [r2, #64]	; 0x40
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_I2S_MspInit+0xf4>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_I2S_MspInit+0xf4>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <HAL_I2S_MspInit+0xf4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_I2S_MspInit+0xf4>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_I2S_MspInit+0xf4>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <HAL_I2S_MspInit+0xf4>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6313      	str	r3, [r2, #48]	; 0x30
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_I2S_MspInit+0xf4>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001778:	2310      	movs	r3, #16
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001788:	2306      	movs	r3, #6
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <HAL_I2S_MspInit+0xf8>)
 8001794:	f000 fad2 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001798:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017aa:	2306      	movs	r3, #6
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	4806      	ldr	r0, [pc, #24]	; (80017d0 <HAL_I2S_MspInit+0xfc>)
 80017b6:	f000 fac1 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3738      	adds	r7, #56	; 0x38
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40003c00 	.word	0x40003c00
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020800 	.word	0x40020800

080017d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_SPI_MspInit+0x84>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d12b      	bne.n	800184e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_SPI_MspInit+0x88>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_SPI_MspInit+0x88>)
 8001800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_SPI_MspInit+0x88>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_SPI_MspInit+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <HAL_SPI_MspInit+0x88>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_SPI_MspInit+0x88>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800182e:	23e0      	movs	r3, #224	; 0xe0
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800183e:	2305      	movs	r3, #5
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_SPI_MspInit+0x8c>)
 800184a:	f000 fa77 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40013000 	.word	0x40013000
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000

08001864 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_SPI_MspDeInit+0x30>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d109      	bne.n	800188a <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_SPI_MspDeInit+0x34>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_SPI_MspDeInit+0x34>)
 800187c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8001882:	21e0      	movs	r1, #224	; 0xe0
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_SPI_MspDeInit+0x38>)
 8001886:	f000 fbf5 	bl	8002074 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40013000 	.word	0x40013000
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f8d0 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <OTG_FS_IRQHandler+0x10>)
 80018fa:	f000 ff3b 	bl	8002774 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000660 	.word	0x20000660

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f006 fa3e 	bl	8007db8 <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20020000 	.word	0x20020000
 8001968:	00000400 	.word	0x00000400
 800196c:	2000027c 	.word	0x2000027c
 8001970:	20000978 	.word	0x20000978

08001974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199e:	490e      	ldr	r1, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b4:	4c0b      	ldr	r4, [pc, #44]	; (80019e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c2:	f7ff ffd7 	bl	8001974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c6:	f006 f9fd 	bl	8007dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7ff f8a7 	bl	8000b1c <main>
  bx  lr    
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80019dc:	08008084 	.word	0x08008084
  ldr r2, =_sbss
 80019e0:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80019e4:	20000974 	.word	0x20000974

080019e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_Init+0x40>)
 80019f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_Init+0x40>)
 8001a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_Init+0x40>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f94f 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff fde8 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f967 	bl	8001d22 <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 f92f 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000080 	.word	0x20000080
 8001a88:	20000088 	.word	0x20000088
 8001a8c:	20000084 	.word	0x20000084

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000088 	.word	0x20000088
 8001ab4:	20000280 	.word	0x20000280

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000280 	.word	0x20000280

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff ffee 	bl	8001ab8 <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffde 	bl	8001ab8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000088 	.word	0x20000088

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff29 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff3e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff31 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e16b      	b.n	8002030 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 815a 	bne.w	800202a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d005      	beq.n	8001d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d130      	bne.n	8001df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 0201 	and.w	r2, r3, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d017      	beq.n	8001e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d123      	bne.n	8001e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80b4 	beq.w	800202a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b60      	ldr	r3, [pc, #384]	; (8002048 <HAL_GPIO_Init+0x30c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a5f      	ldr	r2, [pc, #380]	; (8002048 <HAL_GPIO_Init+0x30c>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	; (8002048 <HAL_GPIO_Init+0x30c>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ede:	4a5b      	ldr	r2, [pc, #364]	; (800204c <HAL_GPIO_Init+0x310>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_GPIO_Init+0x314>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d02b      	beq.n	8001f62 <HAL_GPIO_Init+0x226>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a51      	ldr	r2, [pc, #324]	; (8002054 <HAL_GPIO_Init+0x318>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d025      	beq.n	8001f5e <HAL_GPIO_Init+0x222>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a50      	ldr	r2, [pc, #320]	; (8002058 <HAL_GPIO_Init+0x31c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01f      	beq.n	8001f5a <HAL_GPIO_Init+0x21e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4f      	ldr	r2, [pc, #316]	; (800205c <HAL_GPIO_Init+0x320>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d019      	beq.n	8001f56 <HAL_GPIO_Init+0x21a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4e      	ldr	r2, [pc, #312]	; (8002060 <HAL_GPIO_Init+0x324>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x216>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4d      	ldr	r2, [pc, #308]	; (8002064 <HAL_GPIO_Init+0x328>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x212>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	; (8002068 <HAL_GPIO_Init+0x32c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x20e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4b      	ldr	r2, [pc, #300]	; (800206c <HAL_GPIO_Init+0x330>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x20a>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e00e      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f46:	2308      	movs	r3, #8
 8001f48:	e00c      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e00a      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e008      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e004      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e002      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x228>
 8001f62:	2300      	movs	r3, #0
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	f002 0203 	and.w	r2, r2, #3
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	4093      	lsls	r3, r2
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f74:	4935      	ldr	r1, [pc, #212]	; (800204c <HAL_GPIO_Init+0x310>)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_GPIO_Init+0x334>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa6:	4a32      	ldr	r2, [pc, #200]	; (8002070 <HAL_GPIO_Init+0x334>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fac:	4b30      	ldr	r3, [pc, #192]	; (8002070 <HAL_GPIO_Init+0x334>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <HAL_GPIO_Init+0x334>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_GPIO_Init+0x334>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_GPIO_Init+0x334>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_GPIO_Init+0x334>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002024:	4a12      	ldr	r2, [pc, #72]	; (8002070 <HAL_GPIO_Init+0x334>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3301      	adds	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	f67f ae90 	bls.w	8001d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40013800 	.word	0x40013800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40020800 	.word	0x40020800
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40021000 	.word	0x40021000
 8002064:	40021400 	.word	0x40021400
 8002068:	40021800 	.word	0x40021800
 800206c:	40021c00 	.word	0x40021c00
 8002070:	40013c00 	.word	0x40013c00

08002074 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e0cd      	b.n	800222c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002090:	2201      	movs	r2, #1
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	f040 80bd 	bne.w	8002226 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80020ac:	4a65      	ldr	r2, [pc, #404]	; (8002244 <HAL_GPIO_DeInit+0x1d0>)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	4013      	ands	r3, r2
 80020cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a5d      	ldr	r2, [pc, #372]	; (8002248 <HAL_GPIO_DeInit+0x1d4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d02b      	beq.n	800212e <HAL_GPIO_DeInit+0xba>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a5c      	ldr	r2, [pc, #368]	; (800224c <HAL_GPIO_DeInit+0x1d8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d025      	beq.n	800212a <HAL_GPIO_DeInit+0xb6>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a5b      	ldr	r2, [pc, #364]	; (8002250 <HAL_GPIO_DeInit+0x1dc>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d01f      	beq.n	8002126 <HAL_GPIO_DeInit+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a5a      	ldr	r2, [pc, #360]	; (8002254 <HAL_GPIO_DeInit+0x1e0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d019      	beq.n	8002122 <HAL_GPIO_DeInit+0xae>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a59      	ldr	r2, [pc, #356]	; (8002258 <HAL_GPIO_DeInit+0x1e4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <HAL_GPIO_DeInit+0xaa>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_GPIO_DeInit+0x1e8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00d      	beq.n	800211a <HAL_GPIO_DeInit+0xa6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a57      	ldr	r2, [pc, #348]	; (8002260 <HAL_GPIO_DeInit+0x1ec>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <HAL_GPIO_DeInit+0xa2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a56      	ldr	r2, [pc, #344]	; (8002264 <HAL_GPIO_DeInit+0x1f0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d101      	bne.n	8002112 <HAL_GPIO_DeInit+0x9e>
 800210e:	2307      	movs	r3, #7
 8002110:	e00e      	b.n	8002130 <HAL_GPIO_DeInit+0xbc>
 8002112:	2308      	movs	r3, #8
 8002114:	e00c      	b.n	8002130 <HAL_GPIO_DeInit+0xbc>
 8002116:	2306      	movs	r3, #6
 8002118:	e00a      	b.n	8002130 <HAL_GPIO_DeInit+0xbc>
 800211a:	2305      	movs	r3, #5
 800211c:	e008      	b.n	8002130 <HAL_GPIO_DeInit+0xbc>
 800211e:	2304      	movs	r3, #4
 8002120:	e006      	b.n	8002130 <HAL_GPIO_DeInit+0xbc>
 8002122:	2303      	movs	r3, #3
 8002124:	e004      	b.n	8002130 <HAL_GPIO_DeInit+0xbc>
 8002126:	2302      	movs	r3, #2
 8002128:	e002      	b.n	8002130 <HAL_GPIO_DeInit+0xbc>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_GPIO_DeInit+0xbc>
 800212e:	2300      	movs	r3, #0
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	f002 0203 	and.w	r2, r2, #3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4093      	lsls	r3, r2
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	d132      	bne.n	80021a6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002140:	4b49      	ldr	r3, [pc, #292]	; (8002268 <HAL_GPIO_DeInit+0x1f4>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	4947      	ldr	r1, [pc, #284]	; (8002268 <HAL_GPIO_DeInit+0x1f4>)
 800214a:	4013      	ands	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800214e:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_GPIO_DeInit+0x1f4>)
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	4944      	ldr	r1, [pc, #272]	; (8002268 <HAL_GPIO_DeInit+0x1f4>)
 8002158:	4013      	ands	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800215c:	4b42      	ldr	r3, [pc, #264]	; (8002268 <HAL_GPIO_DeInit+0x1f4>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	4940      	ldr	r1, [pc, #256]	; (8002268 <HAL_GPIO_DeInit+0x1f4>)
 8002166:	4013      	ands	r3, r2
 8002168:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800216a:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <HAL_GPIO_DeInit+0x1f4>)
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43db      	mvns	r3, r3
 8002172:	493d      	ldr	r1, [pc, #244]	; (8002268 <HAL_GPIO_DeInit+0x1f4>)
 8002174:	4013      	ands	r3, r2
 8002176:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002188:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <HAL_GPIO_DeInit+0x1d0>)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	43da      	mvns	r2, r3
 8002198:	482a      	ldr	r0, [pc, #168]	; (8002244 <HAL_GPIO_DeInit+0x1d0>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	400a      	ands	r2, r1
 80021a0:	3302      	adds	r3, #2
 80021a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2103      	movs	r1, #3
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	08da      	lsrs	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3208      	adds	r2, #8
 80021c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	08d2      	lsrs	r2, r2, #3
 80021dc:	4019      	ands	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2103      	movs	r1, #3
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	401a      	ands	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	2101      	movs	r1, #1
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	2103      	movs	r1, #3
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	401a      	ands	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b0f      	cmp	r3, #15
 8002230:	f67f af2e 	bls.w	8002090 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40013800 	.word	0x40013800
 8002248:	40020000 	.word	0x40020000
 800224c:	40020400 	.word	0x40020400
 8002250:	40020800 	.word	0x40020800
 8002254:	40020c00 	.word	0x40020c00
 8002258:	40021000 	.word	0x40021000
 800225c:	40021400 	.word	0x40021400
 8002260:	40021800 	.word	0x40021800
 8002264:	40021c00 	.word	0x40021c00
 8002268:	40013c00 	.word	0x40013c00

0800226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
 8002278:	4613      	mov	r3, r2
 800227a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800227c:	787b      	ldrb	r3, [r7, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002288:	e003      	b.n	8002292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	041a      	lsls	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	619a      	str	r2, [r3, #24]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800229e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a0:	b08f      	sub	sp, #60	; 0x3c
 80022a2:	af0a      	add	r7, sp, #40	; 0x28
 80022a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e054      	b.n	800235a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f005 fb18 	bl	8007900 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2203      	movs	r2, #3
 80022d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 fb0a 	bl	8005908 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	687e      	ldr	r6, [r7, #4]
 80022fc:	466d      	mov	r5, sp
 80022fe:	f106 0410 	add.w	r4, r6, #16
 8002302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800230e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002312:	1d33      	adds	r3, r6, #4
 8002314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	f003 fa84 	bl	8005824 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	4618      	mov	r0, r3
 8002324:	f003 fb01 	bl	800592a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	687e      	ldr	r6, [r7, #4]
 8002330:	466d      	mov	r5, sp
 8002332:	f106 0410 	add.w	r4, r6, #16
 8002336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002342:	e885 0003 	stmia.w	r5, {r0, r1}
 8002346:	1d33      	adds	r3, r6, #4
 8002348:	cb0e      	ldmia	r3, {r1, r2, r3}
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f003 fc8a 	bl	8005c64 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002362 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002362:	b590      	push	{r4, r7, lr}
 8002364:	b089      	sub	sp, #36	; 0x24
 8002366:	af04      	add	r7, sp, #16
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	4608      	mov	r0, r1
 800236c:	4611      	mov	r1, r2
 800236e:	461a      	mov	r2, r3
 8002370:	4603      	mov	r3, r0
 8002372:	70fb      	strb	r3, [r7, #3]
 8002374:	460b      	mov	r3, r1
 8002376:	70bb      	strb	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_HCD_HC_Init+0x28>
 8002386:	2302      	movs	r3, #2
 8002388:	e076      	b.n	8002478 <HAL_HCD_HC_Init+0x116>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	333d      	adds	r3, #61	; 0x3d
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3338      	adds	r3, #56	; 0x38
 80023b2:	787a      	ldrb	r2, [r7, #1]
 80023b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	3340      	adds	r3, #64	; 0x40
 80023c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023c6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3339      	adds	r3, #57	; 0x39
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	333f      	adds	r3, #63	; 0x3f
 80023e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	78ba      	ldrb	r2, [r7, #2]
 80023f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023f6:	b2d0      	uxtb	r0, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	333a      	adds	r3, #58	; 0x3a
 8002404:	4602      	mov	r2, r0
 8002406:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002408:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800240c:	2b00      	cmp	r3, #0
 800240e:	da09      	bge.n	8002424 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	333b      	adds	r3, #59	; 0x3b
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e008      	b.n	8002436 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	333b      	adds	r3, #59	; 0x3b
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	333c      	adds	r3, #60	; 0x3c
 8002444:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002448:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	787c      	ldrb	r4, [r7, #1]
 8002450:	78ba      	ldrb	r2, [r7, #2]
 8002452:	78f9      	ldrb	r1, [r7, #3]
 8002454:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002456:	9302      	str	r3, [sp, #8]
 8002458:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	4623      	mov	r3, r4
 8002466:	f003 fd59 	bl	8005f1c <USB_HC_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}

08002480 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_HCD_HC_Halt+0x1e>
 800249a:	2302      	movs	r3, #2
 800249c:	e00f      	b.n	80024be <HAL_HCD_HC_Halt+0x3e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 ffa9 	bl	8006406 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	70fb      	strb	r3, [r7, #3]
 80024da:	460b      	mov	r3, r1
 80024dc:	70bb      	strb	r3, [r7, #2]
 80024de:	4613      	mov	r3, r2
 80024e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	333b      	adds	r3, #59	; 0x3b
 80024f0:	78ba      	ldrb	r2, [r7, #2]
 80024f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	333f      	adds	r3, #63	; 0x3f
 8002502:	787a      	ldrb	r2, [r7, #1]
 8002504:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002506:	7c3b      	ldrb	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d112      	bne.n	8002532 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3342      	adds	r3, #66	; 0x42
 800251a:	2203      	movs	r2, #3
 800251c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	333d      	adds	r3, #61	; 0x3d
 800252c:	7f3a      	ldrb	r2, [r7, #28]
 800252e:	701a      	strb	r2, [r3, #0]
 8002530:	e008      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	3342      	adds	r3, #66	; 0x42
 8002540:	2202      	movs	r2, #2
 8002542:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b03      	cmp	r3, #3
 8002548:	f200 80c6 	bhi.w	80026d8 <HAL_HCD_HC_SubmitRequest+0x210>
 800254c:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002552:	bf00      	nop
 8002554:	08002565 	.word	0x08002565
 8002558:	080026c5 	.word	0x080026c5
 800255c:	080025c9 	.word	0x080025c9
 8002560:	08002647 	.word	0x08002647
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002564:	7c3b      	ldrb	r3, [r7, #16]
 8002566:	2b01      	cmp	r3, #1
 8002568:	f040 80b8 	bne.w	80026dc <HAL_HCD_HC_SubmitRequest+0x214>
 800256c:	78bb      	ldrb	r3, [r7, #2]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 80b4 	bne.w	80026dc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002574:	8b3b      	ldrh	r3, [r7, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d108      	bne.n	800258c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	3355      	adds	r3, #85	; 0x55
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3355      	adds	r3, #85	; 0x55
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3342      	adds	r3, #66	; 0x42
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025b2:	e093      	b.n	80026dc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3342      	adds	r3, #66	; 0x42
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
      break;
 80025c6:	e089      	b.n	80026dc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80025c8:	78bb      	ldrb	r3, [r7, #2]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d11d      	bne.n	800260a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3355      	adds	r3, #85	; 0x55
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3342      	adds	r3, #66	; 0x42
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025f4:	e073      	b.n	80026de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3342      	adds	r3, #66	; 0x42
 8002604:	2202      	movs	r2, #2
 8002606:	701a      	strb	r2, [r3, #0]
      break;
 8002608:	e069      	b.n	80026de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3354      	adds	r3, #84	; 0x54
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	3342      	adds	r3, #66	; 0x42
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
      break;
 8002630:	e055      	b.n	80026de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	3342      	adds	r3, #66	; 0x42
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
      break;
 8002644:	e04b      	b.n	80026de <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002646:	78bb      	ldrb	r3, [r7, #2]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11d      	bne.n	8002688 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	3355      	adds	r3, #85	; 0x55
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3342      	adds	r3, #66	; 0x42
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002672:	e034      	b.n	80026de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	3342      	adds	r3, #66	; 0x42
 8002682:	2202      	movs	r2, #2
 8002684:	701a      	strb	r2, [r3, #0]
      break;
 8002686:	e02a      	b.n	80026de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3354      	adds	r3, #84	; 0x54
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3342      	adds	r3, #66	; 0x42
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
      break;
 80026ae:	e016      	b.n	80026de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3342      	adds	r3, #66	; 0x42
 80026be:	2202      	movs	r2, #2
 80026c0:	701a      	strb	r2, [r3, #0]
      break;
 80026c2:	e00c      	b.n	80026de <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3342      	adds	r3, #66	; 0x42
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
      break;
 80026d6:	e002      	b.n	80026de <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80026d8:	bf00      	nop
 80026da:	e000      	b.n	80026de <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80026dc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	3344      	adds	r3, #68	; 0x44
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	8b3a      	ldrh	r2, [r7, #24]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	202c      	movs	r0, #44	; 0x2c
 80026f8:	fb00 f303 	mul.w	r3, r0, r3
 80026fc:	440b      	add	r3, r1
 80026fe:	334c      	adds	r3, #76	; 0x4c
 8002700:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	3360      	adds	r3, #96	; 0x60
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3350      	adds	r3, #80	; 0x50
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3339      	adds	r3, #57	; 0x39
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3361      	adds	r3, #97	; 0x61
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	78fb      	ldrb	r3, [r7, #3]
 8002750:	222c      	movs	r2, #44	; 0x2c
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	3338      	adds	r3, #56	; 0x38
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	18d1      	adds	r1, r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	f003 fcfc 	bl	8006160 <USB_HC_StartXfer>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop

08002774 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f003 fa27 	bl	8005bde <USB_GetMode>
 8002790:	4603      	mov	r3, r0
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 80f6 	bne.w	8002984 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f003 fa0b 	bl	8005bb8 <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80ec 	beq.w	8002982 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fa02 	bl	8005bb8 <USB_ReadInterrupts>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027be:	d104      	bne.n	80027ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 f9f2 	bl	8005bb8 <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027de:	d104      	bne.n	80027ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 f9e2 	bl	8005bb8 <USB_ReadInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027fe:	d104      	bne.n	800280a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002808:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 f9d2 	bl	8005bb8 <USB_ReadInterrupts>
 8002814:	4603      	mov	r3, r0
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b02      	cmp	r3, #2
 800281c:	d103      	bne.n	8002826 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2202      	movs	r2, #2
 8002824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f003 f9c4 	bl	8005bb8 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800283a:	d11c      	bne.n	8002876 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002844:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10f      	bne.n	8002876 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002856:	2110      	movs	r1, #16
 8002858:	6938      	ldr	r0, [r7, #16]
 800285a:	f003 f8b3 	bl	80059c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800285e:	6938      	ldr	r0, [r7, #16]
 8002860:	f003 f8e4 	bl	8005a2c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f003 faba 	bl	8005de4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f005 f8c3 	bl	80079fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f003 f99c 	bl	8005bb8 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002886:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800288a:	d102      	bne.n	8002892 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f001 f882 	bl	8003996 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f003 f98e 	bl	8005bb8 <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d106      	bne.n	80028b4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f005 f88c 	bl	80079c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2208      	movs	r2, #8
 80028b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f003 f97d 	bl	8005bb8 <USB_ReadInterrupts>
 80028be:	4603      	mov	r3, r0
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d101      	bne.n	80028cc <HAL_HCD_IRQHandler+0x158>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <HAL_HCD_IRQHandler+0x15a>
 80028cc:	2300      	movs	r3, #0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d012      	beq.n	80028f8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0210 	bic.w	r2, r2, #16
 80028e0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 ff85 	bl	80037f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0210 	orr.w	r2, r2, #16
 80028f6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 f95b 	bl	8005bb8 <USB_ReadInterrupts>
 8002902:	4603      	mov	r3, r0
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800290c:	d13a      	bne.n	8002984 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f003 fd66 	bl	80063e4 <USB_HC_ReadInterrupt>
 8002918:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e025      	b.n	800296c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d018      	beq.n	8002966 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294a:	d106      	bne.n	800295a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f88f 	bl	8002a76 <HCD_HC_IN_IRQHandler>
 8002958:	e005      	b.n	8002966 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fbdd 	bl	8003120 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	429a      	cmp	r2, r3
 8002974:	d3d4      	bcc.n	8002920 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800297e:	615a      	str	r2, [r3, #20]
 8002980:	e000      	b.n	8002984 <HAL_HCD_IRQHandler+0x210>
      return;
 8002982:	bf00      	nop
    }
  }
}
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_HCD_Start+0x16>
 800299c:	2302      	movs	r3, #2
 800299e:	e013      	b.n	80029c8 <HAL_HCD_Start+0x3e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fa52 	bl	8005e58 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 ff94 	bl	80058e6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_HCD_Stop+0x16>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e00d      	b.n	8002a02 <HAL_HCD_Stop+0x32>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 fe40 	bl	8006678 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	3360      	adds	r3, #96	; 0x60
 8002a24:	781b      	ldrb	r3, [r3, #0]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3350      	adds	r3, #80	; 0x50
 8002a4c:	681b      	ldr	r3, [r3, #0]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fa46 	bl	8005ef8 <USB_GetCurrentFrame>
 8002a6c:	4603      	mov	r3, r0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d11a      	bne.n	8002adc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3361      	adds	r3, #97	; 0x61
 8002ac6:	2206      	movs	r2, #6
 8002ac8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fc96 	bl	8006406 <USB_HC_Halt>
 8002ada:	e0af      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af2:	d11b      	bne.n	8002b2c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	461a      	mov	r2, r3
 8002b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3361      	adds	r3, #97	; 0x61
 8002b16:	2207      	movs	r2, #7
 8002b18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 fc6e 	bl	8006406 <USB_HC_Halt>
 8002b2a:	e087      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d109      	bne.n	8002b56 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2320      	movs	r3, #32
 8002b52:	6093      	str	r3, [r2, #8]
 8002b54:	e072      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d11a      	bne.n	8002ba2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3361      	adds	r3, #97	; 0x61
 8002b8c:	2205      	movs	r2, #5
 8002b8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 fc33 	bl	8006406 <USB_HC_Halt>
 8002ba0:	e04c      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb8:	d11b      	bne.n	8002bf2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3361      	adds	r3, #97	; 0x61
 8002bdc:	2208      	movs	r2, #8
 8002bde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fc0b 	bl	8006406 <USB_HC_Halt>
 8002bf0:	e024      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d119      	bne.n	8002c3c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3361      	adds	r3, #97	; 0x61
 8002c28:	2206      	movs	r2, #6
 8002c2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fbe5 	bl	8006406 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c52:	d112      	bne.n	8002c7a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fbd1 	bl	8006406 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	461a      	mov	r2, r3
 8002c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c76:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c78:	e24e      	b.n	8003118 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f040 80df 	bne.w	8002e50 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d019      	beq.n	8002cce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3348      	adds	r3, #72	; 0x48
 8002ca8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	0159      	lsls	r1, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002cbc:	1ad2      	subs	r2, r2, r3
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	202c      	movs	r0, #44	; 0x2c
 8002cc4:	fb00 f303 	mul.w	r3, r0, r3
 8002cc8:	440b      	add	r3, r1
 8002cca:	3350      	adds	r3, #80	; 0x50
 8002ccc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3361      	adds	r3, #97	; 0x61
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	335c      	adds	r3, #92	; 0x5c
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2301      	movs	r3, #1
 8002d02:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	333f      	adds	r3, #63	; 0x3f
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	333f      	adds	r3, #63	; 0x3f
 8002d26:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d111      	bne.n	8002d50 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fb65 	bl	8006406 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	6093      	str	r3, [r2, #8]
 8002d4e:	e03a      	b.n	8002dc6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	333f      	adds	r3, #63	; 0x3f
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d009      	beq.n	8002d78 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	333f      	adds	r3, #63	; 0x3f
 8002d72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d126      	bne.n	8002dc6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	0151      	lsls	r1, r2, #5
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	440a      	add	r2, r1
 8002d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d96:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3360      	adds	r3, #96	; 0x60
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	b2d9      	uxtb	r1, r3
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	202c      	movs	r0, #44	; 0x2c
 8002db4:	fb00 f303 	mul.w	r3, r0, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3360      	adds	r3, #96	; 0x60
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f004 fe29 	bl	8007a18 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d12b      	bne.n	8002e26 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3348      	adds	r3, #72	; 0x48
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	202c      	movs	r0, #44	; 0x2c
 8002de4:	fb00 f202 	mul.w	r2, r0, r2
 8002de8:	440a      	add	r2, r1
 8002dea:	3240      	adds	r2, #64	; 0x40
 8002dec:	8812      	ldrh	r2, [r2, #0]
 8002dee:	fbb3 f3f2 	udiv	r3, r3, r2
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 818e 	beq.w	8003118 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3354      	adds	r3, #84	; 0x54
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	f083 0301 	eor.w	r3, r3, #1
 8002e10:	b2d8      	uxtb	r0, r3
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3354      	adds	r3, #84	; 0x54
 8002e20:	4602      	mov	r2, r0
 8002e22:	701a      	strb	r2, [r3, #0]
}
 8002e24:	e178      	b.n	8003118 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	3354      	adds	r3, #84	; 0x54
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	f083 0301 	eor.w	r3, r3, #1
 8002e3a:	b2d8      	uxtb	r0, r3
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3354      	adds	r3, #84	; 0x54
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	701a      	strb	r2, [r3, #0]
}
 8002e4e:	e163      	b.n	8003118 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	f040 80f6 	bne.w	8003054 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3361      	adds	r3, #97	; 0x61
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d109      	bne.n	8002e90 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3360      	adds	r3, #96	; 0x60
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e0c9      	b.n	8003024 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3361      	adds	r3, #97	; 0x61
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d109      	bne.n	8002eb8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3360      	adds	r3, #96	; 0x60
 8002eb2:	2205      	movs	r2, #5
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e0b5      	b.n	8003024 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3361      	adds	r3, #97	; 0x61
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d009      	beq.n	8002ee0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3361      	adds	r3, #97	; 0x61
 8002eda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d150      	bne.n	8002f82 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	335c      	adds	r3, #92	; 0x5c
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	202c      	movs	r0, #44	; 0x2c
 8002ef8:	fb00 f303 	mul.w	r3, r0, r3
 8002efc:	440b      	add	r3, r1
 8002efe:	335c      	adds	r3, #92	; 0x5c
 8002f00:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	335c      	adds	r3, #92	; 0x5c
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d912      	bls.n	8002f3c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3360      	adds	r3, #96	; 0x60
 8002f36:	2204      	movs	r2, #4
 8002f38:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f3a:	e073      	b.n	8003024 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3360      	adds	r3, #96	; 0x60
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f64:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f6c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f80:	e050      	b.n	8003024 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3361      	adds	r3, #97	; 0x61
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d122      	bne.n	8002fdc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3360      	adds	r3, #96	; 0x60
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fbe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fc6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e023      	b.n	8003024 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3361      	adds	r3, #97	; 0x61
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b07      	cmp	r3, #7
 8002fee:	d119      	bne.n	8003024 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	335c      	adds	r3, #92	; 0x5c
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	202c      	movs	r0, #44	; 0x2c
 8003008:	fb00 f303 	mul.w	r3, r0, r3
 800300c:	440b      	add	r3, r1
 800300e:	335c      	adds	r3, #92	; 0x5c
 8003010:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	3360      	adds	r3, #96	; 0x60
 8003020:	2204      	movs	r2, #4
 8003022:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	461a      	mov	r2, r3
 8003032:	2302      	movs	r3, #2
 8003034:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	b2d9      	uxtb	r1, r3
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	202c      	movs	r0, #44	; 0x2c
 8003040:	fb00 f303 	mul.w	r3, r0, r3
 8003044:	4413      	add	r3, r2
 8003046:	3360      	adds	r3, #96	; 0x60
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f004 fce3 	bl	8007a18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003052:	e061      	b.n	8003118 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b10      	cmp	r3, #16
 8003068:	d156      	bne.n	8003118 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	333f      	adds	r3, #63	; 0x3f
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d111      	bne.n	80030a2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	335c      	adds	r3, #92	; 0x5c
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f003 f9b3 	bl	8006406 <USB_HC_Halt>
 80030a0:	e031      	b.n	8003106 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	333f      	adds	r3, #63	; 0x3f
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	333f      	adds	r3, #63	; 0x3f
 80030c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d11d      	bne.n	8003106 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	335c      	adds	r3, #92	; 0x5c
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d110      	bne.n	8003106 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3361      	adds	r3, #97	; 0x61
 80030f2:	2203      	movs	r2, #3
 80030f4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f003 f980 	bl	8006406 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	461a      	mov	r2, r3
 8003114:	2310      	movs	r3, #16
 8003116:	6093      	str	r3, [r2, #8]
}
 8003118:	bf00      	nop
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d11a      	bne.n	8003186 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	461a      	mov	r2, r3
 800315e:	2304      	movs	r3, #4
 8003160:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3361      	adds	r3, #97	; 0x61
 8003170:	2206      	movs	r2, #6
 8003172:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f003 f941 	bl	8006406 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003184:	e331      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b20      	cmp	r3, #32
 800319a:	d12e      	bne.n	80031fa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	461a      	mov	r2, r3
 80031aa:	2320      	movs	r3, #32
 80031ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	333d      	adds	r3, #61	; 0x3d
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	f040 8313 	bne.w	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	333d      	adds	r3, #61	; 0x3d
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3360      	adds	r3, #96	; 0x60
 80031e4:	2202      	movs	r2, #2
 80031e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 f907 	bl	8006406 <USB_HC_Halt>
}
 80031f8:	e2f7      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800320c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003210:	d112      	bne.n	8003238 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	461a      	mov	r2, r3
 8003220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003224:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f003 f8e8 	bl	8006406 <USB_HC_Halt>
}
 8003236:	e2d8      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d140      	bne.n	80032d0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	335c      	adds	r3, #92	; 0x5c
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d111      	bne.n	800329a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	333d      	adds	r3, #61	; 0x3d
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	461a      	mov	r2, r3
 8003296:	2340      	movs	r3, #64	; 0x40
 8003298:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a6:	461a      	mov	r2, r3
 80032a8:	2301      	movs	r3, #1
 80032aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3361      	adds	r3, #97	; 0x61
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 f89c 	bl	8006406 <USB_HC_Halt>
}
 80032ce:	e28c      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d12c      	bne.n	8003340 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3361      	adds	r3, #97	; 0x61
 80032f4:	2204      	movs	r2, #4
 80032f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	333d      	adds	r3, #61	; 0x3d
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	335c      	adds	r3, #92	; 0x5c
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f003 f86d 	bl	8006406 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	461a      	mov	r2, r3
 800333a:	2340      	movs	r3, #64	; 0x40
 800333c:	6093      	str	r3, [r2, #8]
}
 800333e:	e254      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b08      	cmp	r3, #8
 8003354:	d11a      	bne.n	800338c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	4413      	add	r3, r2
 800335e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003362:	461a      	mov	r2, r3
 8003364:	2308      	movs	r3, #8
 8003366:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	3361      	adds	r3, #97	; 0x61
 8003376:	2205      	movs	r2, #5
 8003378:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f003 f83e 	bl	8006406 <USB_HC_Halt>
}
 800338a:	e22e      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d140      	bne.n	8003424 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	335c      	adds	r3, #92	; 0x5c
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3361      	adds	r3, #97	; 0x61
 80033c2:	2203      	movs	r2, #3
 80033c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	333d      	adds	r3, #61	; 0x3d
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d112      	bne.n	8003400 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	212c      	movs	r1, #44	; 0x2c
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	333c      	adds	r3, #60	; 0x3c
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	333d      	adds	r3, #61	; 0x3d
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f002 fffb 	bl	8006406 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341c:	461a      	mov	r2, r3
 800341e:	2310      	movs	r3, #16
 8003420:	6093      	str	r3, [r2, #8]
}
 8003422:	e1e2      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	2b80      	cmp	r3, #128	; 0x80
 8003438:	d164      	bne.n	8003504 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d111      	bne.n	8003466 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	3361      	adds	r3, #97	; 0x61
 8003450:	2206      	movs	r2, #6
 8003452:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f002 ffd1 	bl	8006406 <USB_HC_Halt>
 8003464:	e044      	b.n	80034f0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	335c      	adds	r3, #92	; 0x5c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	202c      	movs	r0, #44	; 0x2c
 800347e:	fb00 f303 	mul.w	r3, r0, r3
 8003482:	440b      	add	r3, r1
 8003484:	335c      	adds	r3, #92	; 0x5c
 8003486:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	335c      	adds	r3, #92	; 0x5c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d920      	bls.n	80034de <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	335c      	adds	r3, #92	; 0x5c
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	212c      	movs	r1, #44	; 0x2c
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	3360      	adds	r3, #96	; 0x60
 80034bc:	2204      	movs	r2, #4
 80034be:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	b2d9      	uxtb	r1, r3
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	202c      	movs	r0, #44	; 0x2c
 80034ca:	fb00 f303 	mul.w	r3, r0, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	3360      	adds	r3, #96	; 0x60
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f004 fa9e 	bl	8007a18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034dc:	e008      	b.n	80034f0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	3360      	adds	r3, #96	; 0x60
 80034ec:	2202      	movs	r2, #2
 80034ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	461a      	mov	r2, r3
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	6093      	str	r3, [r2, #8]
}
 8003502:	e172      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351a:	d11b      	bne.n	8003554 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3361      	adds	r3, #97	; 0x61
 800352a:	2208      	movs	r2, #8
 800352c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f002 ff64 	bl	8006406 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	461a      	mov	r2, r3
 800354c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003550:	6093      	str	r3, [r2, #8]
}
 8003552:	e14a      	b.n	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b02      	cmp	r3, #2
 8003568:	f040 813f 	bne.w	80037ea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	212c      	movs	r1, #44	; 0x2c
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	3361      	adds	r3, #97	; 0x61
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d17d      	bne.n	800367c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3360      	adds	r3, #96	; 0x60
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	333f      	adds	r3, #63	; 0x3f
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d00a      	beq.n	80035bc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	333f      	adds	r3, #63	; 0x3f
 80035b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	f040 8100 	bne.w	80037bc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d113      	bne.n	80035ec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	3355      	adds	r3, #85	; 0x55
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	f083 0301 	eor.w	r3, r3, #1
 80035d8:	b2d8      	uxtb	r0, r3
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	212c      	movs	r1, #44	; 0x2c
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	4413      	add	r3, r2
 80035e6:	3355      	adds	r3, #85	; 0x55
 80035e8:	4602      	mov	r2, r0
 80035ea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	f040 80e3 	bne.w	80037bc <HCD_HC_OUT_IRQHandler+0x69c>
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	334c      	adds	r3, #76	; 0x4c
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80d8 	beq.w	80037bc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	212c      	movs	r1, #44	; 0x2c
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	4413      	add	r3, r2
 8003618:	334c      	adds	r3, #76	; 0x4c
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	202c      	movs	r0, #44	; 0x2c
 8003622:	fb00 f202 	mul.w	r2, r0, r2
 8003626:	440a      	add	r2, r1
 8003628:	3240      	adds	r2, #64	; 0x40
 800362a:	8812      	ldrh	r2, [r2, #0]
 800362c:	4413      	add	r3, r2
 800362e:	3b01      	subs	r3, #1
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	202c      	movs	r0, #44	; 0x2c
 8003636:	fb00 f202 	mul.w	r2, r0, r2
 800363a:	440a      	add	r2, r1
 800363c:	3240      	adds	r2, #64	; 0x40
 800363e:	8812      	ldrh	r2, [r2, #0]
 8003640:	fbb3 f3f2 	udiv	r3, r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80b5 	beq.w	80037bc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	212c      	movs	r1, #44	; 0x2c
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	3355      	adds	r3, #85	; 0x55
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	f083 0301 	eor.w	r3, r3, #1
 8003666:	b2d8      	uxtb	r0, r3
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	3355      	adds	r3, #85	; 0x55
 8003676:	4602      	mov	r2, r0
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e09f      	b.n	80037bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3361      	adds	r3, #97	; 0x61
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d109      	bne.n	80036a4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3360      	adds	r3, #96	; 0x60
 800369e:	2202      	movs	r2, #2
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e08b      	b.n	80037bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3361      	adds	r3, #97	; 0x61
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d109      	bne.n	80036cc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	212c      	movs	r1, #44	; 0x2c
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	3360      	adds	r3, #96	; 0x60
 80036c6:	2202      	movs	r2, #2
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e077      	b.n	80037bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3361      	adds	r3, #97	; 0x61
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b05      	cmp	r3, #5
 80036de:	d109      	bne.n	80036f4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	3360      	adds	r3, #96	; 0x60
 80036ee:	2205      	movs	r2, #5
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	e063      	b.n	80037bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3361      	adds	r3, #97	; 0x61
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b06      	cmp	r3, #6
 8003706:	d009      	beq.n	800371c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	3361      	adds	r3, #97	; 0x61
 8003716:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003718:	2b08      	cmp	r3, #8
 800371a:	d14f      	bne.n	80037bc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	212c      	movs	r1, #44	; 0x2c
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	335c      	adds	r3, #92	; 0x5c
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	202c      	movs	r0, #44	; 0x2c
 8003734:	fb00 f303 	mul.w	r3, r0, r3
 8003738:	440b      	add	r3, r1
 800373a:	335c      	adds	r3, #92	; 0x5c
 800373c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	335c      	adds	r3, #92	; 0x5c
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d912      	bls.n	8003778 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	4413      	add	r3, r2
 800375e:	335c      	adds	r3, #92	; 0x5c
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3360      	adds	r3, #96	; 0x60
 8003772:	2204      	movs	r2, #4
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e021      	b.n	80037bc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3360      	adds	r3, #96	; 0x60
 8003786:	2202      	movs	r2, #2
 8003788:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037a0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037a8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	461a      	mov	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	461a      	mov	r2, r3
 80037ca:	2302      	movs	r3, #2
 80037cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	b2d9      	uxtb	r1, r3
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	202c      	movs	r0, #44	; 0x2c
 80037d8:	fb00 f303 	mul.w	r3, r0, r3
 80037dc:	4413      	add	r3, r2
 80037de:	3360      	adds	r3, #96	; 0x60
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f004 f917 	bl	8007a18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037ea:	bf00      	nop
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b08a      	sub	sp, #40	; 0x28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	0c5b      	lsrs	r3, r3, #17
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003826:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d004      	beq.n	8003838 <HCD_RXQLVL_IRQHandler+0x46>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b05      	cmp	r3, #5
 8003832:	f000 80a9 	beq.w	8003988 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003836:	e0aa      	b.n	800398e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80a6 	beq.w	800398c <HCD_RXQLVL_IRQHandler+0x19a>
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	212c      	movs	r1, #44	; 0x2c
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	3344      	adds	r3, #68	; 0x44
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 809b 	beq.w	800398c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3350      	adds	r3, #80	; 0x50
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	441a      	add	r2, r3
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	202c      	movs	r0, #44	; 0x2c
 8003870:	fb00 f303 	mul.w	r3, r0, r3
 8003874:	440b      	add	r3, r1
 8003876:	334c      	adds	r3, #76	; 0x4c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d87a      	bhi.n	8003974 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3344      	adds	r3, #68	; 0x44
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	b292      	uxth	r2, r2
 8003896:	4619      	mov	r1, r3
 8003898:	f002 f936 	bl	8005b08 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3344      	adds	r3, #68	; 0x44
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	441a      	add	r2, r3
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	202c      	movs	r0, #44	; 0x2c
 80038b6:	fb00 f303 	mul.w	r3, r0, r3
 80038ba:	440b      	add	r3, r1
 80038bc:	3344      	adds	r3, #68	; 0x44
 80038be:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3350      	adds	r3, #80	; 0x50
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	441a      	add	r2, r3
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	202c      	movs	r0, #44	; 0x2c
 80038da:	fb00 f303 	mul.w	r3, r0, r3
 80038de:	440b      	add	r3, r1
 80038e0:	3350      	adds	r3, #80	; 0x50
 80038e2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	0cdb      	lsrs	r3, r3, #19
 80038f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	212c      	movs	r1, #44	; 0x2c
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	3340      	adds	r3, #64	; 0x40
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4293      	cmp	r3, r2
 8003910:	d13c      	bne.n	800398c <HCD_RXQLVL_IRQHandler+0x19a>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d039      	beq.n	800398c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800392e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003936:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	461a      	mov	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	212c      	movs	r1, #44	; 0x2c
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	4413      	add	r3, r2
 8003956:	3354      	adds	r3, #84	; 0x54
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	f083 0301 	eor.w	r3, r3, #1
 800395e:	b2d8      	uxtb	r0, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3354      	adds	r3, #84	; 0x54
 800396e:	4602      	mov	r2, r0
 8003970:	701a      	strb	r2, [r3, #0]
      break;
 8003972:	e00b      	b.n	800398c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3360      	adds	r3, #96	; 0x60
 8003982:	2204      	movs	r2, #4
 8003984:	701a      	strb	r2, [r3, #0]
      break;
 8003986:	e001      	b.n	800398c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003988:	bf00      	nop
 800398a:	e000      	b.n	800398e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800398c:	bf00      	nop
  }
}
 800398e:	bf00      	nop
 8003990:	3728      	adds	r7, #40	; 0x28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039c2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d10b      	bne.n	80039e6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f004 f801 	bl	80079e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d132      	bne.n	8003a56 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f043 0308 	orr.w	r3, r3, #8
 80039f6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d126      	bne.n	8003a50 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d113      	bne.n	8003a32 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a14:	d106      	bne.n	8003a24 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f002 f9e1 	bl	8005de4 <USB_InitFSLSPClkSel>
 8003a22:	e011      	b.n	8003a48 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f002 f9da 	bl	8005de4 <USB_InitFSLSPClkSel>
 8003a30:	e00a      	b.n	8003a48 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d106      	bne.n	8003a48 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a40:	461a      	mov	r2, r3
 8003a42:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a46:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f003 fff3 	bl	8007a34 <HAL_HCD_PortEnabled_Callback>
 8003a4e:	e002      	b.n	8003a56 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f003 fffd 	bl	8007a50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d103      	bne.n	8003a68 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f043 0320 	orr.w	r3, r3, #32
 8003a66:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	6013      	str	r3, [r2, #0]
}
 8003a74:	bf00      	nop
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e12b      	b.n	8003ce6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd fdce 	bl	8001644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ace:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ade:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f001 fa20 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8003ae4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4a81      	ldr	r2, [pc, #516]	; (8003cf0 <HAL_I2C_Init+0x274>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d807      	bhi.n	8003b00 <HAL_I2C_Init+0x84>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a80      	ldr	r2, [pc, #512]	; (8003cf4 <HAL_I2C_Init+0x278>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bf94      	ite	ls
 8003af8:	2301      	movls	r3, #1
 8003afa:	2300      	movhi	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e006      	b.n	8003b0e <HAL_I2C_Init+0x92>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a7d      	ldr	r2, [pc, #500]	; (8003cf8 <HAL_I2C_Init+0x27c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0e7      	b.n	8003ce6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a78      	ldr	r2, [pc, #480]	; (8003cfc <HAL_I2C_Init+0x280>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0c9b      	lsrs	r3, r3, #18
 8003b20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4a6a      	ldr	r2, [pc, #424]	; (8003cf0 <HAL_I2C_Init+0x274>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d802      	bhi.n	8003b50 <HAL_I2C_Init+0xd4>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	e009      	b.n	8003b64 <HAL_I2C_Init+0xe8>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	4a69      	ldr	r2, [pc, #420]	; (8003d00 <HAL_I2C_Init+0x284>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	3301      	adds	r3, #1
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	495c      	ldr	r1, [pc, #368]	; (8003cf0 <HAL_I2C_Init+0x274>)
 8003b80:	428b      	cmp	r3, r1
 8003b82:	d819      	bhi.n	8003bb8 <HAL_I2C_Init+0x13c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e59      	subs	r1, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b98:	400b      	ands	r3, r1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_I2C_Init+0x138>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1e59      	subs	r1, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bac:	3301      	adds	r3, #1
 8003bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb2:	e051      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	e04f      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d111      	bne.n	8003be4 <HAL_I2C_Init+0x168>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1e58      	subs	r0, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	440b      	add	r3, r1
 8003bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e012      	b.n	8003c0a <HAL_I2C_Init+0x18e>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1e58      	subs	r0, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	0099      	lsls	r1, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Init+0x196>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e022      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10e      	bne.n	8003c38 <HAL_I2C_Init+0x1bc>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1e58      	subs	r0, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	460b      	mov	r3, r1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	440b      	add	r3, r1
 8003c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c36:	e00f      	b.n	8003c58 <HAL_I2C_Init+0x1dc>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1e58      	subs	r0, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	0099      	lsls	r1, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	6809      	ldr	r1, [r1, #0]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6911      	ldr	r1, [r2, #16]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	000186a0 	.word	0x000186a0
 8003cf4:	001e847f 	.word	0x001e847f
 8003cf8:	003d08ff 	.word	0x003d08ff
 8003cfc:	431bde83 	.word	0x431bde83
 8003d00:	10624dd3 	.word	0x10624dd3

08003d04 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e128      	b.n	8003f68 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a90      	ldr	r2, [pc, #576]	; (8003f70 <HAL_I2S_Init+0x26c>)
 8003d2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fd fccf 	bl	80016d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d4c:	f023 030f 	bic.w	r3, r3, #15
 8003d50:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2202      	movs	r2, #2
 8003d58:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d060      	beq.n	8003e24 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e001      	b.n	8003d74 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d70:	2320      	movs	r3, #32
 8003d72:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d802      	bhi.n	8003d82 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d82:	2001      	movs	r0, #1
 8003d84:	f001 f9c4 	bl	8005110 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d88:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d92:	d125      	bne.n	8003de0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d010      	beq.n	8003dbe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	3305      	adds	r3, #5
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e01f      	b.n	8003dfe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	3305      	adds	r3, #5
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	e00e      	b.n	8003dfe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	461a      	mov	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	3305      	adds	r3, #5
 8003dfc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4a5c      	ldr	r2, [pc, #368]	; (8003f74 <HAL_I2S_Init+0x270>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	08db      	lsrs	r3, r3, #3
 8003e08:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e003      	b.n	8003e2c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e24:	2302      	movs	r3, #2
 8003e26:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d902      	bls.n	8003e38 <HAL_I2S_Init+0x134>
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2bff      	cmp	r3, #255	; 0xff
 8003e36:	d907      	bls.n	8003e48 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f043 0210 	orr.w	r2, r3, #16
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e08f      	b.n	8003f68 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	ea42 0103 	orr.w	r1, r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e66:	f023 030f 	bic.w	r3, r3, #15
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6851      	ldr	r1, [r2, #4]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6892      	ldr	r2, [r2, #8]
 8003e72:	4311      	orrs	r1, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68d2      	ldr	r2, [r2, #12]
 8003e78:	4311      	orrs	r1, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6992      	ldr	r2, [r2, #24]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d161      	bne.n	8003f58 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a38      	ldr	r2, [pc, #224]	; (8003f78 <HAL_I2S_Init+0x274>)
 8003e98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a37      	ldr	r2, [pc, #220]	; (8003f7c <HAL_I2S_Init+0x278>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <HAL_I2S_Init+0x1a4>
 8003ea4:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <HAL_I2S_Init+0x27c>)
 8003ea6:	e001      	b.n	8003eac <HAL_I2S_Init+0x1a8>
 8003ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	4932      	ldr	r1, [pc, #200]	; (8003f7c <HAL_I2S_Init+0x278>)
 8003eb4:	428a      	cmp	r2, r1
 8003eb6:	d101      	bne.n	8003ebc <HAL_I2S_Init+0x1b8>
 8003eb8:	4a31      	ldr	r2, [pc, #196]	; (8003f80 <HAL_I2S_Init+0x27c>)
 8003eba:	e001      	b.n	8003ec0 <HAL_I2S_Init+0x1bc>
 8003ebc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ec0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ec4:	f023 030f 	bic.w	r3, r3, #15
 8003ec8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <HAL_I2S_Init+0x278>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_I2S_Init+0x1d4>
 8003ed4:	4b2a      	ldr	r3, [pc, #168]	; (8003f80 <HAL_I2S_Init+0x27c>)
 8003ed6:	e001      	b.n	8003edc <HAL_I2S_Init+0x1d8>
 8003ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003edc:	2202      	movs	r2, #2
 8003ede:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a25      	ldr	r2, [pc, #148]	; (8003f7c <HAL_I2S_Init+0x278>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_I2S_Init+0x1ea>
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <HAL_I2S_Init+0x27c>)
 8003eec:	e001      	b.n	8003ef2 <HAL_I2S_Init+0x1ee>
 8003eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efe:	d003      	beq.n	8003f08 <HAL_I2S_Init+0x204>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	e001      	b.n	8003f14 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f32:	4313      	orrs	r3, r2
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	897b      	ldrh	r3, [r7, #10]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f40:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <HAL_I2S_Init+0x278>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2S_Init+0x24c>
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <HAL_I2S_Init+0x27c>)
 8003f4e:	e001      	b.n	8003f54 <HAL_I2S_Init+0x250>
 8003f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f54:	897a      	ldrh	r2, [r7, #10]
 8003f56:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	0800407b 	.word	0x0800407b
 8003f74:	cccccccd 	.word	0xcccccccd
 8003f78:	08004191 	.word	0x08004191
 8003f7c:	40003800 	.word	0x40003800
 8003f80:	40003400 	.word	0x40003400

08003f84 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	881a      	ldrh	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	1c9a      	adds	r2, r3, #2
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10e      	bne.n	8004014 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004004:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff ffb8 	bl	8003f84 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	b292      	uxth	r2, r2
 8004030:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	1c9a      	adds	r2, r3, #2
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10e      	bne.n	8004072 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004062:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff ff93 	bl	8003f98 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b086      	sub	sp, #24
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b04      	cmp	r3, #4
 8004094:	d13a      	bne.n	800410c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d109      	bne.n	80040b4 <I2S_IRQHandler+0x3a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d102      	bne.n	80040b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff ffb4 	bl	800401c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d126      	bne.n	800410c <I2S_IRQHandler+0x92>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d11f      	bne.n	800410c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	f043 0202 	orr.w	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff ff50 	bl	8003fac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b03      	cmp	r3, #3
 8004116:	d136      	bne.n	8004186 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d109      	bne.n	8004136 <I2S_IRQHandler+0xbc>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412c:	2b80      	cmp	r3, #128	; 0x80
 800412e:	d102      	bne.n	8004136 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff45 	bl	8003fc0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b08      	cmp	r3, #8
 800413e:	d122      	bne.n	8004186 <I2S_IRQHandler+0x10c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b20      	cmp	r3, #32
 800414c:	d11b      	bne.n	8004186 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800415c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	f043 0204 	orr.w	r2, r3, #4
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ff13 	bl	8003fac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004186:	bf00      	nop
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a92      	ldr	r2, [pc, #584]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d101      	bne.n	80041ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80041aa:	4b92      	ldr	r3, [pc, #584]	; (80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041ac:	e001      	b.n	80041b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80041ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a8b      	ldr	r2, [pc, #556]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041c8:	4b8a      	ldr	r3, [pc, #552]	; (80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041ca:	e001      	b.n	80041d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041dc:	d004      	beq.n	80041e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 8099 	bne.w	800431a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d107      	bne.n	8004202 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f925 	bl	800444c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b01      	cmp	r3, #1
 800420a:	d107      	bne.n	800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f9c8 	bl	80045ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004222:	2b40      	cmp	r3, #64	; 0x40
 8004224:	d13a      	bne.n	800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d035      	beq.n	800429c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a6e      	ldr	r2, [pc, #440]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800423a:	4b6e      	ldr	r3, [pc, #440]	; (80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800423c:	e001      	b.n	8004242 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800423e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4969      	ldr	r1, [pc, #420]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800424a:	428b      	cmp	r3, r1
 800424c:	d101      	bne.n	8004252 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800424e:	4b69      	ldr	r3, [pc, #420]	; (80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004250:	e001      	b.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004256:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800425a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800426a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	f043 0202 	orr.w	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fe88 	bl	8003fac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	f040 80c3 	bne.w	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80bd 	beq.w	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a49      	ldr	r2, [pc, #292]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d101      	bne.n	80042d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042ce:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042d0:	e001      	b.n	80042d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4944      	ldr	r1, [pc, #272]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042de:	428b      	cmp	r3, r1
 80042e0:	d101      	bne.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042e2:	4b44      	ldr	r3, [pc, #272]	; (80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042e4:	e001      	b.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	f043 0204 	orr.w	r2, r3, #4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff fe4a 	bl	8003fac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004318:	e089      	b.n	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b02      	cmp	r3, #2
 8004322:	d107      	bne.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8be 	bl	80044b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d107      	bne.n	800434e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f8fd 	bl	8004548 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d12f      	bne.n	80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d02a      	beq.n	80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004370:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800437e:	e001      	b.n	8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4919      	ldr	r1, [pc, #100]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800438c:	428b      	cmp	r3, r1
 800438e:	d101      	bne.n	8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004390:	4b18      	ldr	r3, [pc, #96]	; (80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004392:	e001      	b.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004398:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800439c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f043 0202 	orr.w	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff fdfa 	bl	8003fac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d136      	bne.n	8004430 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d031      	beq.n	8004430 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043d8:	e001      	b.n	80043de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4902      	ldr	r1, [pc, #8]	; (80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043e6:	428b      	cmp	r3, r1
 80043e8:	d106      	bne.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80043ea:	4b02      	ldr	r3, [pc, #8]	; (80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043ec:	e006      	b.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80043ee:	bf00      	nop
 80043f0:	40003800 	.word	0x40003800
 80043f4:	40003400 	.word	0x40003400
 80043f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004400:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004410:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f043 0204 	orr.w	r2, r3, #4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff fdc0 	bl	8003fac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800442c:	e000      	b.n	8004430 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800442e:	bf00      	nop
}
 8004430:	bf00      	nop
 8004432:	3720      	adds	r7, #32
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	1c99      	adds	r1, r3, #2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6251      	str	r1, [r2, #36]	; 0x24
 800445e:	881a      	ldrh	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d113      	bne.n	80044a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800448c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff ffc9 	bl	8004438 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	1c99      	adds	r1, r3, #2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6251      	str	r1, [r2, #36]	; 0x24
 80044c2:	8819      	ldrh	r1, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <I2SEx_TxISR_I2SExt+0x90>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <I2SEx_TxISR_I2SExt+0x22>
 80044ce:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <I2SEx_TxISR_I2SExt+0x94>)
 80044d0:	e001      	b.n	80044d6 <I2SEx_TxISR_I2SExt+0x26>
 80044d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d6:	460a      	mov	r2, r1
 80044d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d121      	bne.n	8004536 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a12      	ldr	r2, [pc, #72]	; (8004540 <I2SEx_TxISR_I2SExt+0x90>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d101      	bne.n	8004500 <I2SEx_TxISR_I2SExt+0x50>
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <I2SEx_TxISR_I2SExt+0x94>)
 80044fe:	e001      	b.n	8004504 <I2SEx_TxISR_I2SExt+0x54>
 8004500:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	490d      	ldr	r1, [pc, #52]	; (8004540 <I2SEx_TxISR_I2SExt+0x90>)
 800450c:	428b      	cmp	r3, r1
 800450e:	d101      	bne.n	8004514 <I2SEx_TxISR_I2SExt+0x64>
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <I2SEx_TxISR_I2SExt+0x94>)
 8004512:	e001      	b.n	8004518 <I2SEx_TxISR_I2SExt+0x68>
 8004514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004518:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800451c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ff81 	bl	8004438 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40003800 	.word	0x40003800
 8004544:	40003400 	.word	0x40003400

08004548 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68d8      	ldr	r0, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	1c99      	adds	r1, r3, #2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004560:	b282      	uxth	r2, r0
 8004562:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d113      	bne.n	80045a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800458a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff ff4a 	bl	8004438 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a20      	ldr	r2, [pc, #128]	; (800463c <I2SEx_RxISR_I2SExt+0x90>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <I2SEx_RxISR_I2SExt+0x16>
 80045be:	4b20      	ldr	r3, [pc, #128]	; (8004640 <I2SEx_RxISR_I2SExt+0x94>)
 80045c0:	e001      	b.n	80045c6 <I2SEx_RxISR_I2SExt+0x1a>
 80045c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c6:	68d8      	ldr	r0, [r3, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	1c99      	adds	r1, r3, #2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045d2:	b282      	uxth	r2, r0
 80045d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d121      	bne.n	8004632 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <I2SEx_RxISR_I2SExt+0x90>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d101      	bne.n	80045fc <I2SEx_RxISR_I2SExt+0x50>
 80045f8:	4b11      	ldr	r3, [pc, #68]	; (8004640 <I2SEx_RxISR_I2SExt+0x94>)
 80045fa:	e001      	b.n	8004600 <I2SEx_RxISR_I2SExt+0x54>
 80045fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	490d      	ldr	r1, [pc, #52]	; (800463c <I2SEx_RxISR_I2SExt+0x90>)
 8004608:	428b      	cmp	r3, r1
 800460a:	d101      	bne.n	8004610 <I2SEx_RxISR_I2SExt+0x64>
 800460c:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <I2SEx_RxISR_I2SExt+0x94>)
 800460e:	e001      	b.n	8004614 <I2SEx_RxISR_I2SExt+0x68>
 8004610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004614:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004618:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff03 	bl	8004438 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40003800 	.word	0x40003800
 8004640:	40003400 	.word	0x40003400

08004644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e267      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d075      	beq.n	800474e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004662:	4b88      	ldr	r3, [pc, #544]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b04      	cmp	r3, #4
 800466c:	d00c      	beq.n	8004688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466e:	4b85      	ldr	r3, [pc, #532]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004676:	2b08      	cmp	r3, #8
 8004678:	d112      	bne.n	80046a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467a:	4b82      	ldr	r3, [pc, #520]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004686:	d10b      	bne.n	80046a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004688:	4b7e      	ldr	r3, [pc, #504]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d05b      	beq.n	800474c <HAL_RCC_OscConfig+0x108>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d157      	bne.n	800474c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e242      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d106      	bne.n	80046b8 <HAL_RCC_OscConfig+0x74>
 80046aa:	4b76      	ldr	r3, [pc, #472]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a75      	ldr	r2, [pc, #468]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	e01d      	b.n	80046f4 <HAL_RCC_OscConfig+0xb0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCC_OscConfig+0x98>
 80046c2:	4b70      	ldr	r3, [pc, #448]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a6f      	ldr	r2, [pc, #444]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b6d      	ldr	r3, [pc, #436]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a6c      	ldr	r2, [pc, #432]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e00b      	b.n	80046f4 <HAL_RCC_OscConfig+0xb0>
 80046dc:	4b69      	ldr	r3, [pc, #420]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b66      	ldr	r3, [pc, #408]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a65      	ldr	r2, [pc, #404]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd f9dc 	bl	8001ab8 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd f9d8 	bl	8001ab8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e207      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	4b5b      	ldr	r3, [pc, #364]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0xc0>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fd f9c8 	bl	8001ab8 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd f9c4 	bl	8001ab8 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e1f3      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	4b51      	ldr	r3, [pc, #324]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0xe8>
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d063      	beq.n	8004822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800475a:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004766:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800476e:	2b08      	cmp	r3, #8
 8004770:	d11c      	bne.n	80047ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004772:	4b44      	ldr	r3, [pc, #272]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d116      	bne.n	80047ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477e:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_RCC_OscConfig+0x152>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e1c7      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4937      	ldr	r1, [pc, #220]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047aa:	e03a      	b.n	8004822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b4:	4b34      	ldr	r3, [pc, #208]	; (8004888 <HAL_RCC_OscConfig+0x244>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fd f97d 	bl	8001ab8 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c2:	f7fd f979 	bl	8001ab8 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e1a8      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e0:	4b28      	ldr	r3, [pc, #160]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4925      	ldr	r1, [pc, #148]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	600b      	str	r3, [r1, #0]
 80047f4:	e015      	b.n	8004822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f6:	4b24      	ldr	r3, [pc, #144]	; (8004888 <HAL_RCC_OscConfig+0x244>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fd f95c 	bl	8001ab8 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004804:	f7fd f958 	bl	8001ab8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e187      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004816:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d036      	beq.n	800489c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <HAL_RCC_OscConfig+0x248>)
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fd f93c 	bl	8001ab8 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004844:	f7fd f938 	bl	8001ab8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e167      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0x200>
 8004862:	e01b      	b.n	800489c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCC_OscConfig+0x248>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486a:	f7fd f925 	bl	8001ab8 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004870:	e00e      	b.n	8004890 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004872:	f7fd f921 	bl	8001ab8 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d907      	bls.n	8004890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e150      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
 8004884:	40023800 	.word	0x40023800
 8004888:	42470000 	.word	0x42470000
 800488c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004890:	4b88      	ldr	r3, [pc, #544]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ea      	bne.n	8004872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8097 	beq.w	80049d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ae:	4b81      	ldr	r3, [pc, #516]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	4b7d      	ldr	r3, [pc, #500]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	4a7c      	ldr	r2, [pc, #496]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ca:	4b7a      	ldr	r3, [pc, #488]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048da:	4b77      	ldr	r3, [pc, #476]	; (8004ab8 <HAL_RCC_OscConfig+0x474>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d118      	bne.n	8004918 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e6:	4b74      	ldr	r3, [pc, #464]	; (8004ab8 <HAL_RCC_OscConfig+0x474>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a73      	ldr	r2, [pc, #460]	; (8004ab8 <HAL_RCC_OscConfig+0x474>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f2:	f7fd f8e1 	bl	8001ab8 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fa:	f7fd f8dd 	bl	8001ab8 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e10c      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490c:	4b6a      	ldr	r3, [pc, #424]	; (8004ab8 <HAL_RCC_OscConfig+0x474>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d106      	bne.n	800492e <HAL_RCC_OscConfig+0x2ea>
 8004920:	4b64      	ldr	r3, [pc, #400]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	4a63      	ldr	r2, [pc, #396]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6713      	str	r3, [r2, #112]	; 0x70
 800492c:	e01c      	b.n	8004968 <HAL_RCC_OscConfig+0x324>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b05      	cmp	r3, #5
 8004934:	d10c      	bne.n	8004950 <HAL_RCC_OscConfig+0x30c>
 8004936:	4b5f      	ldr	r3, [pc, #380]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	4a5e      	ldr	r2, [pc, #376]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 800493c:	f043 0304 	orr.w	r3, r3, #4
 8004940:	6713      	str	r3, [r2, #112]	; 0x70
 8004942:	4b5c      	ldr	r3, [pc, #368]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	4a5b      	ldr	r2, [pc, #364]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6713      	str	r3, [r2, #112]	; 0x70
 800494e:	e00b      	b.n	8004968 <HAL_RCC_OscConfig+0x324>
 8004950:	4b58      	ldr	r3, [pc, #352]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a57      	ldr	r2, [pc, #348]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	4b55      	ldr	r3, [pc, #340]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a54      	ldr	r2, [pc, #336]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004962:	f023 0304 	bic.w	r3, r3, #4
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d015      	beq.n	800499c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fd f8a2 	bl	8001ab8 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004976:	e00a      	b.n	800498e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004978:	f7fd f89e 	bl	8001ab8 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e0cb      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498e:	4b49      	ldr	r3, [pc, #292]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0ee      	beq.n	8004978 <HAL_RCC_OscConfig+0x334>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499c:	f7fd f88c 	bl	8001ab8 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fd f888 	bl	8001ab8 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0b5      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ba:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ee      	bne.n	80049a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049cc:	4b39      	ldr	r3, [pc, #228]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	4a38      	ldr	r2, [pc, #224]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80049d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a1 	beq.w	8004b24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e2:	4b34      	ldr	r3, [pc, #208]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d05c      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d141      	bne.n	8004a7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f6:	4b31      	ldr	r3, [pc, #196]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7fd f85c 	bl	8001ab8 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a04:	f7fd f858 	bl	8001ab8 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e087      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	019b      	lsls	r3, r3, #6
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	061b      	lsls	r3, r3, #24
 8004a46:	491b      	ldr	r1, [pc, #108]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a52:	f7fd f831 	bl	8001ab8 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5a:	f7fd f82d 	bl	8001ab8 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e05c      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6c:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCC_OscConfig+0x416>
 8004a78:	e054      	b.n	8004b24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fd f81a 	bl	8001ab8 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fd f816 	bl	8001ab8 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e045      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x444>
 8004aa6:	e03d      	b.n	8004b24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e038      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <HAL_RCC_OscConfig+0x4ec>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d028      	beq.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d121      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d11a      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004af0:	4013      	ands	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d111      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800

08004b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0cc      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b48:	4b68      	ldr	r3, [pc, #416]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d90c      	bls.n	8004b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b65      	ldr	r3, [pc, #404]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b63      	ldr	r3, [pc, #396]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0b8      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d020      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b88:	4b59      	ldr	r3, [pc, #356]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4a58      	ldr	r2, [pc, #352]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba0:	4b53      	ldr	r3, [pc, #332]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a52      	ldr	r2, [pc, #328]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bac:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	494d      	ldr	r1, [pc, #308]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d044      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d119      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e07f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d003      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf2:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e06f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e067      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c12:	4b37      	ldr	r3, [pc, #220]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f023 0203 	bic.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4934      	ldr	r1, [pc, #208]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c24:	f7fc ff48 	bl	8001ab8 <HAL_GetTick>
 8004c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c2c:	f7fc ff44 	bl	8001ab8 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e04f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 020c 	and.w	r2, r3, #12
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d1eb      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d20c      	bcs.n	8004c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b22      	ldr	r3, [pc, #136]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b20      	ldr	r3, [pc, #128]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e032      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4916      	ldr	r1, [pc, #88]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	490e      	ldr	r1, [pc, #56]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cba:	f000 f821 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	490a      	ldr	r1, [pc, #40]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004ccc:	5ccb      	ldrb	r3, [r1, r3]
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <HAL_RCC_ClockConfig+0x1c8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fc fea8 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40023c00 	.word	0x40023c00
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	0800805c 	.word	0x0800805c
 8004cf8:	20000080 	.word	0x20000080
 8004cfc:	20000084 	.word	0x20000084

08004d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d04:	b094      	sub	sp, #80	; 0x50
 8004d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d10:	2300      	movs	r3, #0
 8004d12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d18:	4b79      	ldr	r3, [pc, #484]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d00d      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x40>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	f200 80e1 	bhi.w	8004eec <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_RCC_GetSysClockFreq+0x34>
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d003      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d32:	e0db      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d34:	4b73      	ldr	r3, [pc, #460]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d38:	e0db      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d3a:	4b73      	ldr	r3, [pc, #460]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d3e:	e0d8      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d40:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d4a:	4b6d      	ldr	r3, [pc, #436]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d063      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d56:	4b6a      	ldr	r3, [pc, #424]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	099b      	lsrs	r3, r3, #6
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d68:	633b      	str	r3, [r7, #48]	; 0x30
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d72:	4622      	mov	r2, r4
 8004d74:	462b      	mov	r3, r5
 8004d76:	f04f 0000 	mov.w	r0, #0
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	0159      	lsls	r1, r3, #5
 8004d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d84:	0150      	lsls	r0, r2, #5
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	1a51      	subs	r1, r2, r1
 8004d8e:	6139      	str	r1, [r7, #16]
 8004d90:	4629      	mov	r1, r5
 8004d92:	eb63 0301 	sbc.w	r3, r3, r1
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da4:	4659      	mov	r1, fp
 8004da6:	018b      	lsls	r3, r1, #6
 8004da8:	4651      	mov	r1, sl
 8004daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dae:	4651      	mov	r1, sl
 8004db0:	018a      	lsls	r2, r1, #6
 8004db2:	4651      	mov	r1, sl
 8004db4:	ebb2 0801 	subs.w	r8, r2, r1
 8004db8:	4659      	mov	r1, fp
 8004dba:	eb63 0901 	sbc.w	r9, r3, r1
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dd2:	4690      	mov	r8, r2
 8004dd4:	4699      	mov	r9, r3
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	eb18 0303 	adds.w	r3, r8, r3
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	462b      	mov	r3, r5
 8004de0:	eb49 0303 	adc.w	r3, r9, r3
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004df2:	4629      	mov	r1, r5
 8004df4:	024b      	lsls	r3, r1, #9
 8004df6:	4621      	mov	r1, r4
 8004df8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	024a      	lsls	r2, r1, #9
 8004e00:	4610      	mov	r0, r2
 8004e02:	4619      	mov	r1, r3
 8004e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e06:	2200      	movs	r2, #0
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e10:	f7fb f9da 	bl	80001c8 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4613      	mov	r3, r2
 8004e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e1c:	e058      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1e:	4b38      	ldr	r3, [pc, #224]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	099b      	lsrs	r3, r3, #6
 8004e24:	2200      	movs	r2, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	4611      	mov	r1, r2
 8004e2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
 8004e34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	f04f 0000 	mov.w	r0, #0
 8004e40:	f04f 0100 	mov.w	r1, #0
 8004e44:	0159      	lsls	r1, r3, #5
 8004e46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e4a:	0150      	lsls	r0, r2, #5
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4641      	mov	r1, r8
 8004e52:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e56:	4649      	mov	r1, r9
 8004e58:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e70:	ebb2 040a 	subs.w	r4, r2, sl
 8004e74:	eb63 050b 	sbc.w	r5, r3, fp
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	00eb      	lsls	r3, r5, #3
 8004e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e86:	00e2      	lsls	r2, r4, #3
 8004e88:	4614      	mov	r4, r2
 8004e8a:	461d      	mov	r5, r3
 8004e8c:	4643      	mov	r3, r8
 8004e8e:	18e3      	adds	r3, r4, r3
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	464b      	mov	r3, r9
 8004e94:	eb45 0303 	adc.w	r3, r5, r3
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	028b      	lsls	r3, r1, #10
 8004eaa:	4621      	mov	r1, r4
 8004eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	028a      	lsls	r2, r1, #10
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	61fa      	str	r2, [r7, #28]
 8004ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ec4:	f7fb f980 	bl	80001c8 <__aeabi_uldivmod>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4613      	mov	r3, r2
 8004ece:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	0c1b      	lsrs	r3, r3, #16
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	3301      	adds	r3, #1
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eea:	e002      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3750      	adds	r7, #80	; 0x50
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	007a1200 	.word	0x007a1200

08004f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000080 	.word	0x20000080

08004f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f28:	f7ff fff0 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	0a9b      	lsrs	r3, r3, #10
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4903      	ldr	r1, [pc, #12]	; (8004f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40023800 	.word	0x40023800
 8004f48:	0800806c 	.word	0x0800806c

08004f4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d105      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d035      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f74:	4b62      	ldr	r3, [pc, #392]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7a:	f7fc fd9d 	bl	8001ab8 <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f82:	f7fc fd99 	bl	8001ab8 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e0b0      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f94:	4b5b      	ldr	r3, [pc, #364]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f0      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	019a      	lsls	r2, r3, #6
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	071b      	lsls	r3, r3, #28
 8004fac:	4955      	ldr	r1, [pc, #340]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fb4:	4b52      	ldr	r3, [pc, #328]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fba:	f7fc fd7d 	bl	8001ab8 <HAL_GetTick>
 8004fbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fc2:	f7fc fd79 	bl	8001ab8 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e090      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fd4:	4b4b      	ldr	r3, [pc, #300]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8083 	beq.w	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	4b44      	ldr	r3, [pc, #272]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	4a43      	ldr	r2, [pc, #268]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffe:	4b41      	ldr	r3, [pc, #260]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800500a:	4b3f      	ldr	r3, [pc, #252]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a3e      	ldr	r2, [pc, #248]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005014:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005016:	f7fc fd4f 	bl	8001ab8 <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800501e:	f7fc fd4b 	bl	8001ab8 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e062      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005030:	4b35      	ldr	r3, [pc, #212]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800503c:	4b31      	ldr	r3, [pc, #196]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005044:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d02f      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d028      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800505a:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005062:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005064:	4b29      	ldr	r3, [pc, #164]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800506a:	4b28      	ldr	r3, [pc, #160]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005070:	4a24      	ldr	r2, [pc, #144]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005076:	4b23      	ldr	r3, [pc, #140]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d114      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005082:	f7fc fd19 	bl	8001ab8 <HAL_GetTick>
 8005086:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005088:	e00a      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800508a:	f7fc fd15 	bl	8001ab8 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	f241 3288 	movw	r2, #5000	; 0x1388
 8005098:	4293      	cmp	r3, r2
 800509a:	d901      	bls.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e02a      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a0:	4b18      	ldr	r3, [pc, #96]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0ee      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b8:	d10d      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ce:	490d      	ldr	r1, [pc, #52]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	608b      	str	r3, [r1, #8]
 80050d4:	e005      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	4a0a      	ldr	r2, [pc, #40]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050e0:	6093      	str	r3, [r2, #8]
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ee:	4905      	ldr	r1, [pc, #20]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	42470068 	.word	0x42470068
 8005104:	40023800 	.word	0x40023800
 8005108:	40007000 	.word	0x40007000
 800510c:	42470e40 	.word	0x42470e40

08005110 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d13e      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800512e:	4b23      	ldr	r3, [pc, #140]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d12f      	bne.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005144:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005146:	617b      	str	r3, [r7, #20]
          break;
 8005148:	e02f      	b.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800514a:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005156:	d108      	bne.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005158:	4b18      	ldr	r3, [pc, #96]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005160:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	e007      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800516a:	4b14      	ldr	r3, [pc, #80]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005172:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800517c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005180:	099b      	lsrs	r3, r3, #6
 8005182:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	fb02 f303 	mul.w	r3, r2, r3
 800518c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005194:	0f1b      	lsrs	r3, r3, #28
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	617b      	str	r3, [r7, #20]
          break;
 80051a2:	e002      	b.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
          break;
 80051a8:	bf00      	nop
        }
      }
      break;
 80051aa:	bf00      	nop
    }
  }
  return frequency;
 80051ac:	697b      	ldr	r3, [r7, #20]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40023800 	.word	0x40023800
 80051c0:	00bb8000 	.word	0x00bb8000
 80051c4:	007a1200 	.word	0x007a1200
 80051c8:	00f42400 	.word	0x00f42400

080051cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e07b      	b.n	80052d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d108      	bne.n	80051f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ee:	d009      	beq.n	8005204 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	61da      	str	r2, [r3, #28]
 80051f6:	e005      	b.n	8005204 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc fad8 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005288:	ea42 0103 	orr.w	r1, r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	f003 0104 	and.w	r1, r3, #4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	f003 0210 	and.w	r2, r3, #16
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e01a      	b.n	8005326 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005306:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7fc faab 	bl	8001864 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b08c      	sub	sp, #48	; 0x30
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800533c:	2301      	movs	r3, #1
 800533e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x26>
 8005350:	2302      	movs	r3, #2
 8005352:	e18a      	b.n	800566a <HAL_SPI_TransmitReceive+0x33c>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800535c:	f7fc fbac 	bl	8001ab8 <HAL_GetTick>
 8005360:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005372:	887b      	ldrh	r3, [r7, #2]
 8005374:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800537a:	2b01      	cmp	r3, #1
 800537c:	d00f      	beq.n	800539e <HAL_SPI_TransmitReceive+0x70>
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005384:	d107      	bne.n	8005396 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <HAL_SPI_TransmitReceive+0x68>
 800538e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005392:	2b04      	cmp	r3, #4
 8005394:	d003      	beq.n	800539e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005396:	2302      	movs	r3, #2
 8005398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800539c:	e15b      	b.n	8005656 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_SPI_TransmitReceive+0x82>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_SPI_TransmitReceive+0x82>
 80053aa:	887b      	ldrh	r3, [r7, #2]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053b6:	e14e      	b.n	8005656 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d003      	beq.n	80053cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2205      	movs	r2, #5
 80053c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	887a      	ldrh	r2, [r7, #2]
 80053dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	887a      	ldrh	r2, [r7, #2]
 80053e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	887a      	ldrh	r2, [r7, #2]
 80053ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d007      	beq.n	8005420 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005428:	d178      	bne.n	800551c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_SPI_TransmitReceive+0x10a>
 8005432:	8b7b      	ldrh	r3, [r7, #26]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d166      	bne.n	8005506 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	881a      	ldrh	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	1c9a      	adds	r2, r3, #2
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800545c:	e053      	b.n	8005506 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b02      	cmp	r3, #2
 800546a:	d11b      	bne.n	80054a4 <HAL_SPI_TransmitReceive+0x176>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d016      	beq.n	80054a4 <HAL_SPI_TransmitReceive+0x176>
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d113      	bne.n	80054a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	881a      	ldrh	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	1c9a      	adds	r2, r3, #2
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d119      	bne.n	80054e6 <HAL_SPI_TransmitReceive+0x1b8>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d014      	beq.n	80054e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	b292      	uxth	r2, r2
 80054c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	1c9a      	adds	r2, r3, #2
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054e2:	2301      	movs	r3, #1
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054e6:	f7fc fae7 	bl	8001ab8 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d807      	bhi.n	8005506 <HAL_SPI_TransmitReceive+0x1d8>
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d003      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005504:	e0a7      	b.n	8005656 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1a6      	bne.n	800545e <HAL_SPI_TransmitReceive+0x130>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1a1      	bne.n	800545e <HAL_SPI_TransmitReceive+0x130>
 800551a:	e07c      	b.n	8005616 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_SPI_TransmitReceive+0x1fc>
 8005524:	8b7b      	ldrh	r3, [r7, #26]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d16b      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	7812      	ldrb	r2, [r2, #0]
 8005536:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005550:	e057      	b.n	8005602 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b02      	cmp	r3, #2
 800555e:	d11c      	bne.n	800559a <HAL_SPI_TransmitReceive+0x26c>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d017      	beq.n	800559a <HAL_SPI_TransmitReceive+0x26c>
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d114      	bne.n	800559a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d119      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x2ae>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d014      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055d8:	2301      	movs	r3, #1
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055dc:	f7fc fa6c 	bl	8001ab8 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d803      	bhi.n	80055f4 <HAL_SPI_TransmitReceive+0x2c6>
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f2:	d102      	bne.n	80055fa <HAL_SPI_TransmitReceive+0x2cc>
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d103      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005600:	e029      	b.n	8005656 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1a2      	bne.n	8005552 <HAL_SPI_TransmitReceive+0x224>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d19d      	bne.n	8005552 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f8c0 	bl	80057a0 <SPI_EndRxTxTransaction>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d006      	beq.n	8005634 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005632:	e010      	b.n	8005656 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10b      	bne.n	8005654 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	e000      	b.n	8005656 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005654:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800566a:	4618      	mov	r0, r3
 800566c:	3730      	adds	r7, #48	; 0x30
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005680:	b2db      	uxtb	r3, r3
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056a0:	f7fc fa0a 	bl	8001ab8 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	4413      	add	r3, r2
 80056ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056b0:	f7fc fa02 	bl	8001ab8 <HAL_GetTick>
 80056b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056b6:	4b39      	ldr	r3, [pc, #228]	; (800579c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	015b      	lsls	r3, r3, #5
 80056bc:	0d1b      	lsrs	r3, r3, #20
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056c6:	e054      	b.n	8005772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d050      	beq.n	8005772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056d0:	f7fc f9f2 	bl	8001ab8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d902      	bls.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d13d      	bne.n	8005762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fe:	d111      	bne.n	8005724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005708:	d004      	beq.n	8005714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005712:	d107      	bne.n	8005724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572c:	d10f      	bne.n	800574e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800574c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e017      	b.n	8005792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3b01      	subs	r3, #1
 8005770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	bf0c      	ite	eq
 8005782:	2301      	moveq	r3, #1
 8005784:	2300      	movne	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	429a      	cmp	r2, r3
 800578e:	d19b      	bne.n	80056c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000080 	.word	0x20000080

080057a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <SPI_EndRxTxTransaction+0x7c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <SPI_EndRxTxTransaction+0x80>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	0d5b      	lsrs	r3, r3, #21
 80057b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057bc:	fb02 f303 	mul.w	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ca:	d112      	bne.n	80057f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	2180      	movs	r1, #128	; 0x80
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f7ff ff5a 	bl	8005690 <SPI_WaitFlagStateUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d016      	beq.n	8005810 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	f043 0220 	orr.w	r2, r3, #32
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e00f      	b.n	8005812 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b80      	cmp	r3, #128	; 0x80
 800580a:	d0f2      	beq.n	80057f2 <SPI_EndRxTxTransaction+0x52>
 800580c:	e000      	b.n	8005810 <SPI_EndRxTxTransaction+0x70>
        break;
 800580e:	bf00      	nop
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000080 	.word	0x20000080
 8005820:	165e9f81 	.word	0x165e9f81

08005824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005824:	b084      	sub	sp, #16
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	f107 001c 	add.w	r0, r7, #28
 8005832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	2b01      	cmp	r3, #1
 800583a:	d122      	bne.n	8005882 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d105      	bne.n	8005876 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f9c0 	bl	8005bfc <USB_CoreReset>
 800587c:	4603      	mov	r3, r0
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	e01a      	b.n	80058b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9b4 	bl	8005bfc <USB_CoreReset>
 8005894:	4603      	mov	r3, r0
 8005896:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
 80058aa:	e005      	b.n	80058b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d10b      	bne.n	80058d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f043 0206 	orr.w	r2, r3, #6
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f043 0220 	orr.w	r2, r3, #32
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058e2:	b004      	add	sp, #16
 80058e4:	4770      	bx	lr

080058e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f043 0201 	orr.w	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f023 0201 	bic.w	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d115      	bne.n	8005978 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005958:	2001      	movs	r0, #1
 800595a:	f7fc f8b9 	bl	8001ad0 <HAL_Delay>
      ms++;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f93a 	bl	8005bde <USB_GetMode>
 800596a:	4603      	mov	r3, r0
 800596c:	2b01      	cmp	r3, #1
 800596e:	d01e      	beq.n	80059ae <USB_SetCurrentMode+0x84>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b31      	cmp	r3, #49	; 0x31
 8005974:	d9f0      	bls.n	8005958 <USB_SetCurrentMode+0x2e>
 8005976:	e01a      	b.n	80059ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d115      	bne.n	80059aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800598a:	2001      	movs	r0, #1
 800598c:	f7fc f8a0 	bl	8001ad0 <HAL_Delay>
      ms++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f921 	bl	8005bde <USB_GetMode>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <USB_SetCurrentMode+0x84>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b31      	cmp	r3, #49	; 0x31
 80059a6:	d9f0      	bls.n	800598a <USB_SetCurrentMode+0x60>
 80059a8:	e001      	b.n	80059ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e005      	b.n	80059ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b32      	cmp	r3, #50	; 0x32
 80059b2:	d101      	bne.n	80059b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <USB_FlushTxFifo+0x64>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d901      	bls.n	80059e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e01b      	b.n	8005a1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	daf2      	bge.n	80059d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	019b      	lsls	r3, r3, #6
 80059f4:	f043 0220 	orr.w	r2, r3, #32
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3301      	adds	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4a08      	ldr	r2, [pc, #32]	; (8005a28 <USB_FlushTxFifo+0x64>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d901      	bls.n	8005a0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e006      	b.n	8005a1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d0f0      	beq.n	80059fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	00030d40 	.word	0x00030d40

08005a2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4a11      	ldr	r2, [pc, #68]	; (8005a88 <USB_FlushRxFifo+0x5c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e018      	b.n	8005a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	daf2      	bge.n	8005a38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2210      	movs	r2, #16
 8005a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <USB_FlushRxFifo+0x5c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e006      	b.n	8005a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d0f0      	beq.n	8005a5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	00030d40 	.word	0x00030d40

08005a8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	; 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	4611      	mov	r1, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	71fb      	strb	r3, [r7, #7]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005aaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d123      	bne.n	8005afa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ab2:	88bb      	ldrh	r3, [r7, #4]
 8005ab4:	3303      	adds	r3, #3
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e018      	b.n	8005af2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	031a      	lsls	r2, r3, #12
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005acc:	461a      	mov	r2, r3
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3301      	adds	r3, #1
 8005ade:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	3301      	adds	r3, #1
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d3e2      	bcc.n	8005ac0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3724      	adds	r7, #36	; 0x24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b08b      	sub	sp, #44	; 0x2c
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	4613      	mov	r3, r2
 8005b14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b2e:	2300      	movs	r3, #0
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	e014      	b.n	8005b5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	3301      	adds	r3, #1
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	3301      	adds	r3, #1
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	3301      	adds	r3, #1
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	3301      	adds	r3, #1
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	623b      	str	r3, [r7, #32]
 8005b5e:	6a3a      	ldr	r2, [r7, #32]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d3e6      	bcc.n	8005b34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b66:	8bfb      	ldrh	r3, [r7, #30]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01e      	beq.n	8005baa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b76:	461a      	mov	r2, r3
 8005b78:	f107 0310 	add.w	r3, r7, #16
 8005b7c:	6812      	ldr	r2, [r2, #0]
 8005b7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	701a      	strb	r2, [r3, #0]
      i++;
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	3301      	adds	r3, #1
 8005b96:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b9e:	8bfb      	ldrh	r3, [r7, #30]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ba4:	8bfb      	ldrh	r3, [r7, #30]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1ea      	bne.n	8005b80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	372c      	adds	r7, #44	; 0x2c
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f003 0301 	and.w	r3, r3, #1
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4a13      	ldr	r2, [pc, #76]	; (8005c60 <USB_CoreReset+0x64>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e01b      	b.n	8005c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	daf2      	bge.n	8005c08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f043 0201 	orr.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3301      	adds	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <USB_CoreReset+0x64>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e006      	b.n	8005c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d0f0      	beq.n	8005c32 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	00030d40 	.word	0x00030d40

08005c64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c64:	b084      	sub	sp, #16
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c84:	461a      	mov	r2, r3
 8005c86:	2300      	movs	r3, #0
 8005c88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d018      	beq.n	8005cec <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d10a      	bne.n	8005cd6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cce:	f043 0304 	orr.w	r3, r3, #4
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	e014      	b.n	8005d00 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ce4:	f023 0304 	bic.w	r3, r3, #4
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e009      	b.n	8005d00 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cfa:	f023 0304 	bic.w	r3, r3, #4
 8005cfe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d00:	2110      	movs	r1, #16
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fe5e 	bl	80059c4 <USB_FlushTxFifo>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff fe8a 	bl	8005a2c <USB_FlushRxFifo>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d22:	2300      	movs	r3, #0
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	e015      	b.n	8005d54 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d34:	461a      	mov	r2, r3
 8005d36:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	3301      	adds	r3, #1
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d3e5      	bcc.n	8005d28 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00b      	beq.n	8005d8e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <USB_HostInit+0x16c>)
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a13      	ldr	r2, [pc, #76]	; (8005dd4 <USB_HostInit+0x170>)
 8005d88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d8c:	e009      	b.n	8005da2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2280      	movs	r2, #128	; 0x80
 8005d92:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a10      	ldr	r2, [pc, #64]	; (8005dd8 <USB_HostInit+0x174>)
 8005d98:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a0f      	ldr	r2, [pc, #60]	; (8005ddc <USB_HostInit+0x178>)
 8005d9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d105      	bne.n	8005db4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f043 0210 	orr.w	r2, r3, #16
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699a      	ldr	r2, [r3, #24]
 8005db8:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <USB_HostInit+0x17c>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dcc:	b004      	add	sp, #16
 8005dce:	4770      	bx	lr
 8005dd0:	01000200 	.word	0x01000200
 8005dd4:	00e00300 	.word	0x00e00300
 8005dd8:	00600080 	.word	0x00600080
 8005ddc:	004000e0 	.word	0x004000e0
 8005de0:	a3200008 	.word	0xa3200008

08005de4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e02:	f023 0303 	bic.w	r3, r3, #3
 8005e06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	68f9      	ldr	r1, [r7, #12]
 8005e18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d107      	bne.n	8005e36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e32:	6053      	str	r3, [r2, #4]
 8005e34:	e009      	b.n	8005e4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d106      	bne.n	8005e4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e42:	461a      	mov	r2, r3
 8005e44:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <USB_DriveVbus+0x44>
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d106      	bne.n	8005e9c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e9a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea6:	d109      	bne.n	8005ebc <USB_DriveVbus+0x64>
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	0c5b      	lsrs	r3, r3, #17
 8005ee8:	f003 0303 	and.w	r3, r3, #3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	b29b      	uxth	r3, r3
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
	...

08005f1c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	4608      	mov	r0, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	70fb      	strb	r3, [r7, #3]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	70bb      	strb	r3, [r7, #2]
 8005f32:	4613      	mov	r3, r2
 8005f34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f50:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d87e      	bhi.n	8006058 <USB_HC_Init+0x13c>
 8005f5a:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <USB_HC_Init+0x44>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f71 	.word	0x08005f71
 8005f64:	0800601b 	.word	0x0800601b
 8005f68:	08005f71 	.word	0x08005f71
 8005f6c:	08005fdd 	.word	0x08005fdd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da10      	bge.n	8005fae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	78fa      	ldrb	r2, [r7, #3]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005faa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005fac:	e057      	b.n	800605e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d051      	beq.n	800605e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	78fa      	ldrb	r2, [r7, #3]
 8005fca:	0151      	lsls	r1, r2, #5
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	440a      	add	r2, r1
 8005fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005fd8:	60d3      	str	r3, [r2, #12]
      break;
 8005fda:	e040      	b.n	800605e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f240 639d 	movw	r3, #1693	; 0x69d
 8005fee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ff0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	da34      	bge.n	8006062 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	440a      	add	r2, r1
 800600e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006016:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006018:	e023      	b.n	8006062 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006026:	461a      	mov	r2, r3
 8006028:	f240 2325 	movw	r3, #549	; 0x225
 800602c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800602e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006032:	2b00      	cmp	r3, #0
 8006034:	da17      	bge.n	8006066 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4413      	add	r3, r2
 800603e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	78fa      	ldrb	r2, [r7, #3]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	440a      	add	r2, r1
 800604c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006050:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006054:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006056:	e006      	b.n	8006066 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	77fb      	strb	r3, [r7, #31]
      break;
 800605c:	e004      	b.n	8006068 <USB_HC_Init+0x14c>
      break;
 800605e:	bf00      	nop
 8006060:	e002      	b.n	8006068 <USB_HC_Init+0x14c>
      break;
 8006062:	bf00      	nop
 8006064:	e000      	b.n	8006068 <USB_HC_Init+0x14c>
      break;
 8006066:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	78fa      	ldrb	r2, [r7, #3]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	440a      	add	r2, r1
 800607e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006082:	f043 0302 	orr.w	r3, r3, #2
 8006086:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608e:	699a      	ldr	r2, [r3, #24]
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	2101      	movs	r1, #1
 8006098:	fa01 f303 	lsl.w	r3, r1, r3
 800609c:	6939      	ldr	r1, [r7, #16]
 800609e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060a2:	4313      	orrs	r3, r2
 80060a4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	da03      	bge.n	80060c2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	e001      	b.n	80060c6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff feff 	bl	8005eca <USB_GetHostSpeed>
 80060cc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80060ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d106      	bne.n	80060e4 <USB_HC_Init+0x1c8>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d003      	beq.n	80060e4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e001      	b.n	80060e8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060e8:	787b      	ldrb	r3, [r7, #1]
 80060ea:	059b      	lsls	r3, r3, #22
 80060ec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060f0:	78bb      	ldrb	r3, [r7, #2]
 80060f2:	02db      	lsls	r3, r3, #11
 80060f4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060f8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060fe:	049b      	lsls	r3, r3, #18
 8006100:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006104:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006106:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006108:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800610c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	0159      	lsls	r1, r3, #5
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	440b      	add	r3, r1
 800611a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006124:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006126:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800612a:	2b03      	cmp	r3, #3
 800612c:	d003      	beq.n	8006136 <USB_HC_Init+0x21a>
 800612e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006132:	2b01      	cmp	r3, #1
 8006134:	d10f      	bne.n	8006156 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	78fa      	ldrb	r2, [r7, #3]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	440a      	add	r2, r1
 800614c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006150:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006154:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006156:	7ffb      	ldrb	r3, [r7, #31]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08c      	sub	sp, #48	; 0x30
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800617c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006186:	2b00      	cmp	r3, #0
 8006188:	d02d      	beq.n	80061e6 <USB_HC_StartXfer+0x86>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	791b      	ldrb	r3, [r3, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d129      	bne.n	80061e6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d117      	bne.n	80061c8 <USB_HC_StartXfer+0x68>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	79db      	ldrb	r3, [r3, #7]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <USB_HC_StartXfer+0x48>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	79db      	ldrb	r3, [r3, #7]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d10f      	bne.n	80061c8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	6a3a      	ldr	r2, [r7, #32]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10b      	bne.n	80061e6 <USB_HC_StartXfer+0x86>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	795b      	ldrb	r3, [r3, #5]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d107      	bne.n	80061e6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	4619      	mov	r1, r3
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fa0f 	bl	8006600 <USB_DoPing>
      return HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	e0f8      	b.n	80063d8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d018      	beq.n	8006220 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	8912      	ldrh	r2, [r2, #8]
 80061f6:	4413      	add	r3, r2
 80061f8:	3b01      	subs	r3, #1
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	8912      	ldrh	r2, [r2, #8]
 80061fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006202:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006204:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006206:	8b7b      	ldrh	r3, [r7, #26]
 8006208:	429a      	cmp	r2, r3
 800620a:	d90b      	bls.n	8006224 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800620c:	8b7b      	ldrh	r3, [r7, #26]
 800620e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	8912      	ldrh	r2, [r2, #8]
 8006216:	fb03 f202 	mul.w	r2, r3, r2
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	611a      	str	r2, [r3, #16]
 800621e:	e001      	b.n	8006224 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006220:	2301      	movs	r3, #1
 8006222:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	78db      	ldrb	r3, [r3, #3]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d007      	beq.n	800623c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800622c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	8912      	ldrh	r2, [r2, #8]
 8006232:	fb03 f202 	mul.w	r2, r3, r2
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	611a      	str	r2, [r3, #16]
 800623a:	e003      	b.n	8006244 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800624c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800624e:	04d9      	lsls	r1, r3, #19
 8006250:	4b63      	ldr	r3, [pc, #396]	; (80063e0 <USB_HC_StartXfer+0x280>)
 8006252:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006254:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	7a9b      	ldrb	r3, [r3, #10]
 800625a:	075b      	lsls	r3, r3, #29
 800625c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	0148      	lsls	r0, r1, #5
 8006264:	6a39      	ldr	r1, [r7, #32]
 8006266:	4401      	add	r1, r0
 8006268:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800626c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800626e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	68d9      	ldr	r1, [r3, #12]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	4413      	add	r3, r2
 8006282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006286:	460a      	mov	r2, r1
 8006288:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	bf0c      	ite	eq
 800629a:	2301      	moveq	r3, #1
 800629c:	2300      	movne	r3, #0
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	6a3a      	ldr	r2, [r7, #32]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	7e7b      	ldrb	r3, [r7, #25]
 80062d2:	075b      	lsls	r3, r3, #29
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	0148      	lsls	r0, r1, #5
 80062d8:	6a39      	ldr	r1, [r7, #32]
 80062da:	4401      	add	r1, r0
 80062dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062fa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	78db      	ldrb	r3, [r3, #3]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	e003      	b.n	8006316 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006314:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800631c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632a:	461a      	mov	r2, r3
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	e04e      	b.n	80063d8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	78db      	ldrb	r3, [r3, #3]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d149      	bne.n	80063d6 <USB_HC_StartXfer+0x276>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d045      	beq.n	80063d6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	79db      	ldrb	r3, [r3, #7]
 800634e:	2b03      	cmp	r3, #3
 8006350:	d830      	bhi.n	80063b4 <USB_HC_StartXfer+0x254>
 8006352:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <USB_HC_StartXfer+0x1f8>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	08006369 	.word	0x08006369
 800635c:	0800638d 	.word	0x0800638d
 8006360:	08006369 	.word	0x08006369
 8006364:	0800638d 	.word	0x0800638d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	3303      	adds	r3, #3
 800636e:	089b      	lsrs	r3, r3, #2
 8006370:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006372:	8afa      	ldrh	r2, [r7, #22]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	b29b      	uxth	r3, r3
 800637a:	429a      	cmp	r2, r3
 800637c:	d91c      	bls.n	80063b8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f043 0220 	orr.w	r2, r3, #32
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	619a      	str	r2, [r3, #24]
        }
        break;
 800638a:	e015      	b.n	80063b8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	3303      	adds	r3, #3
 8006392:	089b      	lsrs	r3, r3, #2
 8006394:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006396:	8afa      	ldrh	r2, [r7, #22]
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d90a      	bls.n	80063bc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80063b2:	e003      	b.n	80063bc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80063b4:	bf00      	nop
 80063b6:	e002      	b.n	80063be <USB_HC_StartXfer+0x25e>
        break;
 80063b8:	bf00      	nop
 80063ba:	e000      	b.n	80063be <USB_HC_StartXfer+0x25e>
        break;
 80063bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	68d9      	ldr	r1, [r3, #12]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	785a      	ldrb	r2, [r3, #1]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2000      	movs	r0, #0
 80063ce:	9000      	str	r0, [sp, #0]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f7ff fb5b 	bl	8005a8c <USB_WritePacket>
  }

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3728      	adds	r7, #40	; 0x28
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	1ff80000 	.word	0x1ff80000

080063e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	b29b      	uxth	r3, r3
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006406:	b480      	push	{r7}
 8006408:	b089      	sub	sp, #36	; 0x24
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	0c9b      	lsrs	r3, r3, #18
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	0fdb      	lsrs	r3, r3, #31
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b20      	cmp	r3, #32
 8006454:	d104      	bne.n	8006460 <USB_HC_Halt+0x5a>
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	e0c8      	b.n	80065f2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <USB_HC_Halt+0x66>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d163      	bne.n	8006534 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	4413      	add	r3, r2
 8006474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	440a      	add	r2, r1
 8006482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 80ab 	bne.w	80065f0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d133      	bne.n	800650e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064c4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064e4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064f2:	d81d      	bhi.n	8006530 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800650a:	d0ec      	beq.n	80064e6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800650c:	e070      	b.n	80065f0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	440a      	add	r2, r1
 8006524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800652c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800652e:	e05f      	b.n	80065f0 <USB_HC_Halt+0x1ea>
            break;
 8006530:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006532:	e05d      	b.n	80065f0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	69fa      	ldr	r2, [r7, #28]
 8006548:	440a      	add	r2, r1
 800654a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006552:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d133      	bne.n	80065cc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	440a      	add	r2, r1
 800657a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006582:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	440a      	add	r2, r1
 800659a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065a2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3301      	adds	r3, #1
 80065a8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b0:	d81d      	bhi.n	80065ee <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c8:	d0ec      	beq.n	80065a4 <USB_HC_Halt+0x19e>
 80065ca:	e011      	b.n	80065f0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	e000      	b.n	80065f0 <USB_HC_Halt+0x1ea>
          break;
 80065ee:	bf00      	nop
    }
  }

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3724      	adds	r7, #36	; 0x24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
	...

08006600 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006614:	2301      	movs	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	04da      	lsls	r2, r3, #19
 800661c:	4b15      	ldr	r3, [pc, #84]	; (8006674 <USB_DoPing+0x74>)
 800661e:	4013      	ands	r3, r2
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	0151      	lsls	r1, r2, #5
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	440a      	add	r2, r1
 8006628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800662c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006630:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	4413      	add	r3, r2
 800663a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006648:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006650:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	461a      	mov	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	1ff80000 	.word	0x1ff80000

08006678 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff f93b 	bl	8005908 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006692:	2110      	movs	r1, #16
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff f995 	bl	80059c4 <USB_FlushTxFifo>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff f9c1 	bl	8005a2c <USB_FlushRxFifo>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80066b4:	2300      	movs	r3, #0
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	e01f      	b.n	80066fa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	461a      	mov	r2, r3
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	3301      	adds	r3, #1
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b0f      	cmp	r3, #15
 80066fe:	d9dc      	bls.n	80066ba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006700:	2300      	movs	r3, #0
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	e034      	b.n	8006770 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800671c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006724:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800672c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	461a      	mov	r2, r3
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800674c:	d80c      	bhi.n	8006768 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4413      	add	r3, r2
 8006756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006764:	d0ec      	beq.n	8006740 <USB_StopHost+0xc8>
 8006766:	e000      	b.n	800676a <USB_StopHost+0xf2>
        break;
 8006768:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	3301      	adds	r3, #1
 800676e:	61bb      	str	r3, [r7, #24]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b0f      	cmp	r3, #15
 8006774:	d9c7      	bls.n	8006706 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677c:	461a      	mov	r2, r3
 800677e:	f04f 33ff 	mov.w	r3, #4294967295
 8006782:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f04f 32ff 	mov.w	r2, #4294967295
 800678a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff f8aa 	bl	80058e6 <USB_EnableGlobalInt>

  return ret;
 8006792:	7ffb      	ldrb	r3, [r7, #31]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b089      	sub	sp, #36	; 0x24
 80067a0:	af04      	add	r7, sp, #16
 80067a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80067a4:	2301      	movs	r3, #1
 80067a6:	2202      	movs	r2, #2
 80067a8:	2102      	movs	r1, #2
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fc66 	bl	800707c <USBH_FindInterface>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2bff      	cmp	r3, #255	; 0xff
 80067b8:	d002      	beq.n	80067c0 <USBH_CDC_InterfaceInit+0x24>
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d901      	bls.n	80067c4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067c0:	2302      	movs	r3, #2
 80067c2:	e13d      	b.n	8006a40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fc3b 	bl	8007044 <USBH_SelectInterface>
 80067ce:	4603      	mov	r3, r0
 80067d0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80067d8:	2302      	movs	r3, #2
 80067da:	e131      	b.n	8006a40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80067e2:	2050      	movs	r0, #80	; 0x50
 80067e4:	f001 fb12 	bl	8007e0c <malloc>
 80067e8:	4603      	mov	r3, r0
 80067ea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80067fc:	2302      	movs	r3, #2
 80067fe:	e11f      	b.n	8006a40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006800:	2250      	movs	r2, #80	; 0x50
 8006802:	2100      	movs	r1, #0
 8006804:	68b8      	ldr	r0, [r7, #8]
 8006806:	f001 fb11 	bl	8007e2c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	211a      	movs	r1, #26
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	4413      	add	r3, r2
 8006816:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	b25b      	sxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	da15      	bge.n	800684e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	211a      	movs	r1, #26
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	4413      	add	r3, r2
 800682e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006832:	781a      	ldrb	r2, [r3, #0]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	211a      	movs	r1, #26
 800683e:	fb01 f303 	mul.w	r3, r1, r3
 8006842:	4413      	add	r3, r2
 8006844:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006848:	881a      	ldrh	r2, [r3, #0]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	785b      	ldrb	r3, [r3, #1]
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 ff9c 	bl	8007792 <USBH_AllocPipe>
 800685a:	4603      	mov	r3, r0
 800685c:	461a      	mov	r2, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	7819      	ldrb	r1, [r3, #0]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	7858      	ldrb	r0, [r3, #1]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	8952      	ldrh	r2, [r2, #10]
 800687a:	9202      	str	r2, [sp, #8]
 800687c:	2203      	movs	r2, #3
 800687e:	9201      	str	r2, [sp, #4]
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	4623      	mov	r3, r4
 8006884:	4602      	mov	r2, r0
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 ff54 	bl	8007734 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2200      	movs	r2, #0
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fa17 	bl	8007cc8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800689a:	2300      	movs	r3, #0
 800689c:	2200      	movs	r2, #0
 800689e:	210a      	movs	r1, #10
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fbeb 	bl	800707c <USBH_FindInterface>
 80068a6:	4603      	mov	r3, r0
 80068a8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	2bff      	cmp	r3, #255	; 0xff
 80068ae:	d002      	beq.n	80068b6 <USBH_CDC_InterfaceInit+0x11a>
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d901      	bls.n	80068ba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068b6:	2302      	movs	r3, #2
 80068b8:	e0c2      	b.n	8006a40 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	211a      	movs	r1, #26
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	b25b      	sxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	da16      	bge.n	8006900 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	211a      	movs	r1, #26
 80068d8:	fb01 f303 	mul.w	r3, r1, r3
 80068dc:	4413      	add	r3, r2
 80068de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068e2:	781a      	ldrb	r2, [r3, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	211a      	movs	r1, #26
 80068ee:	fb01 f303 	mul.w	r3, r1, r3
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068f8:	881a      	ldrh	r2, [r3, #0]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	835a      	strh	r2, [r3, #26]
 80068fe:	e015      	b.n	800692c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	211a      	movs	r1, #26
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	4413      	add	r3, r2
 800690c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	211a      	movs	r1, #26
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	4413      	add	r3, r2
 8006922:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006926:	881a      	ldrh	r2, [r3, #0]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	211a      	movs	r1, #26
 8006932:	fb01 f303 	mul.w	r3, r1, r3
 8006936:	4413      	add	r3, r2
 8006938:	f203 3356 	addw	r3, r3, #854	; 0x356
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	b25b      	sxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	da16      	bge.n	8006972 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	211a      	movs	r1, #26
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	4413      	add	r3, r2
 8006950:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006954:	781a      	ldrb	r2, [r3, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	211a      	movs	r1, #26
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	4413      	add	r3, r2
 8006966:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800696a:	881a      	ldrh	r2, [r3, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	835a      	strh	r2, [r3, #26]
 8006970:	e015      	b.n	800699e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	211a      	movs	r1, #26
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	211a      	movs	r1, #26
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	4413      	add	r3, r2
 8006994:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006998:	881a      	ldrh	r2, [r3, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	7b9b      	ldrb	r3, [r3, #14]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fef4 	bl	8007792 <USBH_AllocPipe>
 80069aa:	4603      	mov	r3, r0
 80069ac:	461a      	mov	r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	7bdb      	ldrb	r3, [r3, #15]
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 feea 	bl	8007792 <USBH_AllocPipe>
 80069be:	4603      	mov	r3, r0
 80069c0:	461a      	mov	r2, r3
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	7b59      	ldrb	r1, [r3, #13]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	7b98      	ldrb	r0, [r3, #14]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	8b12      	ldrh	r2, [r2, #24]
 80069de:	9202      	str	r2, [sp, #8]
 80069e0:	2202      	movs	r2, #2
 80069e2:	9201      	str	r2, [sp, #4]
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	4623      	mov	r3, r4
 80069e8:	4602      	mov	r2, r0
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fea2 	bl	8007734 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	7b19      	ldrb	r1, [r3, #12]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	7bd8      	ldrb	r0, [r3, #15]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	8b52      	ldrh	r2, [r2, #26]
 8006a08:	9202      	str	r2, [sp, #8]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	9201      	str	r2, [sp, #4]
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	4623      	mov	r3, r4
 8006a12:	4602      	mov	r2, r0
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fe8d 	bl	8007734 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	7b5b      	ldrb	r3, [r3, #13]
 8006a26:	2200      	movs	r2, #0
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 f94c 	bl	8007cc8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	7b1b      	ldrb	r3, [r3, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 f945 	bl	8007cc8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd90      	pop	{r4, r7, pc}

08006a48 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00e      	beq.n	8006a80 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fe82 	bl	8007772 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fead 	bl	80077d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	7b1b      	ldrb	r3, [r3, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00e      	beq.n	8006aa6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	7b1b      	ldrb	r3, [r3, #12]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fe6f 	bl	8007772 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	7b1b      	ldrb	r3, [r3, #12]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fe9a 	bl	80077d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	7b5b      	ldrb	r3, [r3, #13]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00e      	beq.n	8006acc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	7b5b      	ldrb	r3, [r3, #13]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fe5c 	bl	8007772 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	7b5b      	ldrb	r3, [r3, #13]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fe87 	bl	80077d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 f99b 	bl	8007e1c <free>
    phost->pActiveClass->pData = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aec:	2200      	movs	r2, #0
 8006aee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3340      	adds	r3, #64	; 0x40
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f8b1 	bl	8006c7a <GetLineCoding>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d105      	bne.n	8006b2e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b28:	2102      	movs	r1, #2
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b40:	2301      	movs	r3, #1
 8006b42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d877      	bhi.n	8006c4c <USBH_CDC_Process+0x114>
 8006b5c:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <USBH_CDC_Process+0x2c>)
 8006b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b62:	bf00      	nop
 8006b64:	08006b79 	.word	0x08006b79
 8006b68:	08006b7f 	.word	0x08006b7f
 8006b6c:	08006baf 	.word	0x08006baf
 8006b70:	08006c23 	.word	0x08006c23
 8006b74:	08006c31 	.word	0x08006c31
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b7c:	e06d      	b.n	8006c5a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f897 	bl	8006cb8 <SetLineCoding>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b9c:	e058      	b.n	8006c50 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d055      	beq.n	8006c50 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bac:	e050      	b.n	8006c50 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	3340      	adds	r3, #64	; 0x40
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f860 	bl	8006c7a <GetLineCoding>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d126      	bne.n	8006c12 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd6:	791b      	ldrb	r3, [r3, #4]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d13b      	bne.n	8006c54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d133      	bne.n	8006c54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d12b      	bne.n	8006c54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c04:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d124      	bne.n	8006c54 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f958 	bl	8006ec0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c10:	e020      	b.n	8006c54 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d01d      	beq.n	8006c54 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c20:	e018      	b.n	8006c54 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f867 	bl	8006cf6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f8da 	bl	8006de2 <CDC_ProcessReception>
      break;
 8006c2e:	e014      	b.n	8006c5a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c30:	2100      	movs	r1, #0
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fb08 	bl	8007248 <USBH_ClrFeature>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c4a:	e005      	b.n	8006c58 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c4c:	bf00      	nop
 8006c4e:	e004      	b.n	8006c5a <USBH_CDC_Process+0x122>
      break;
 8006c50:	bf00      	nop
 8006c52:	e002      	b.n	8006c5a <USBH_CDC_Process+0x122>
      break;
 8006c54:	bf00      	nop
 8006c56:	e000      	b.n	8006c5a <USBH_CDC_Process+0x122>
      break;
 8006c58:	bf00      	nop

  }

  return status;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	22a1      	movs	r2, #161	; 0xa1
 8006c88:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2221      	movs	r2, #33	; 0x21
 8006c8e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2207      	movs	r2, #7
 8006ca0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2207      	movs	r2, #7
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 faf1 	bl	8007290 <USBH_CtlReq>
 8006cae:	4603      	mov	r3, r0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2221      	movs	r2, #33	; 0x21
 8006cc6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2207      	movs	r2, #7
 8006cde:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2207      	movs	r2, #7
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fad2 	bl	8007290 <USBH_CtlReq>
 8006cec:	4603      	mov	r3, r0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b086      	sub	sp, #24
 8006cfa:	af02      	add	r7, sp, #8
 8006cfc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d002      	beq.n	8006d1c <CDC_ProcessTransmission+0x26>
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d023      	beq.n	8006d62 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d1a:	e05e      	b.n	8006dda <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	8b12      	ldrh	r2, [r2, #24]
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d90b      	bls.n	8006d40 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	69d9      	ldr	r1, [r3, #28]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8b1a      	ldrh	r2, [r3, #24]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	7b5b      	ldrb	r3, [r3, #13]
 8006d34:	2001      	movs	r0, #1
 8006d36:	9000      	str	r0, [sp, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fcb8 	bl	80076ae <USBH_BulkSendData>
 8006d3e:	e00b      	b.n	8006d58 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	7b5b      	ldrb	r3, [r3, #13]
 8006d4e:	2001      	movs	r0, #1
 8006d50:	9000      	str	r0, [sp, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fcab 	bl	80076ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d60:	e03b      	b.n	8006dda <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	7b5b      	ldrb	r3, [r3, #13]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 ff83 	bl	8007c74 <USBH_LL_GetURBState>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d72:	7afb      	ldrb	r3, [r7, #11]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d128      	bne.n	8006dca <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	8b12      	ldrh	r2, [r2, #24]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d90e      	bls.n	8006da2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	8b12      	ldrh	r2, [r2, #24]
 8006d8c:	1a9a      	subs	r2, r3, r2
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	8b12      	ldrh	r2, [r2, #24]
 8006d9a:	441a      	add	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	61da      	str	r2, [r3, #28]
 8006da0:	e002      	b.n	8006da8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d004      	beq.n	8006dba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006db8:	e00e      	b.n	8006dd8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f868 	bl	8006e98 <USBH_CDC_TransmitCallback>
      break;
 8006dc8:	e006      	b.n	8006dd8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006dca:	7afb      	ldrb	r3, [r7, #11]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d103      	bne.n	8006dd8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006dd8:	bf00      	nop
  }
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b086      	sub	sp, #24
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d002      	beq.n	8006e08 <CDC_ProcessReception+0x26>
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d00e      	beq.n	8006e24 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e06:	e043      	b.n	8006e90 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	6a19      	ldr	r1, [r3, #32]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	8b5a      	ldrh	r2, [r3, #26]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	7b1b      	ldrb	r3, [r3, #12]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fc6f 	bl	80076f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e22:	e035      	b.n	8006e90 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	7b1b      	ldrb	r3, [r3, #12]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 ff22 	bl	8007c74 <USBH_LL_GetURBState>
 8006e30:	4603      	mov	r3, r0
 8006e32:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e34:	7cfb      	ldrb	r3, [r7, #19]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d129      	bne.n	8006e8e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	7b1b      	ldrb	r3, [r3, #12]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fe85 	bl	8007b50 <USBH_LL_GetLastXferSize>
 8006e46:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d016      	beq.n	8006e80 <CDC_ProcessReception+0x9e>
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	8b5b      	ldrh	r3, [r3, #26]
 8006e56:	461a      	mov	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d910      	bls.n	8006e80 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1ad2      	subs	r2, r2, r3
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	6a1a      	ldr	r2, [r3, #32]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	441a      	add	r2, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2203      	movs	r2, #3
 8006e7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e7e:	e006      	b.n	8006e8e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f80f 	bl	8006eac <USBH_CDC_ReceiveCallback>
      break;
 8006e8e:	bf00      	nop
  }
}
 8006e90:	bf00      	nop
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e029      	b.n	8006f40 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	79fa      	ldrb	r2, [r7, #7]
 8006ef0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f81f 	bl	8006f48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 fd97 	bl	8007a6c <USBH_LL_Init>

  return USBH_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f54:	2300      	movs	r3, #0
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	e009      	b.n	8006f6e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	33e0      	adds	r3, #224	; 0xe0
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	2200      	movs	r2, #0
 8006f66:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b0f      	cmp	r3, #15
 8006f72:	d9f2      	bls.n	8006f5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	e009      	b.n	8006f8e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f84:	2200      	movs	r2, #0
 8006f86:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f94:	d3f1      	bcc.n	8006f7a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2240      	movs	r2, #64	; 0x40
 8006fba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d016      	beq.n	8007032 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10e      	bne.n	800702c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007014:	1c59      	adds	r1, r3, #1
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	33de      	adds	r3, #222	; 0xde
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
 800702a:	e004      	b.n	8007036 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800702c:	2302      	movs	r3, #2
 800702e:	73fb      	strb	r3, [r7, #15]
 8007030:	e001      	b.n	8007036 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007032:	2302      	movs	r3, #2
 8007034:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800705a:	78fa      	ldrb	r2, [r7, #3]
 800705c:	429a      	cmp	r2, r3
 800705e:	d204      	bcs.n	800706a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	78fa      	ldrb	r2, [r7, #3]
 8007064:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007068:	e001      	b.n	800706e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800706a:	2302      	movs	r3, #2
 800706c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800706e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	4608      	mov	r0, r1
 8007086:	4611      	mov	r1, r2
 8007088:	461a      	mov	r2, r3
 800708a:	4603      	mov	r3, r0
 800708c:	70fb      	strb	r3, [r7, #3]
 800708e:	460b      	mov	r3, r1
 8007090:	70bb      	strb	r3, [r7, #2]
 8007092:	4613      	mov	r3, r2
 8007094:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070a4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070a6:	e025      	b.n	80070f4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	221a      	movs	r2, #26
 80070ac:	fb02 f303 	mul.w	r3, r2, r3
 80070b0:	3308      	adds	r3, #8
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	3302      	adds	r3, #2
 80070b8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	795b      	ldrb	r3, [r3, #5]
 80070be:	78fa      	ldrb	r2, [r7, #3]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d002      	beq.n	80070ca <USBH_FindInterface+0x4e>
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	2bff      	cmp	r3, #255	; 0xff
 80070c8:	d111      	bne.n	80070ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070ce:	78ba      	ldrb	r2, [r7, #2]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d002      	beq.n	80070da <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070d4:	78bb      	ldrb	r3, [r7, #2]
 80070d6:	2bff      	cmp	r3, #255	; 0xff
 80070d8:	d109      	bne.n	80070ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070de:	787a      	ldrb	r2, [r7, #1]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d002      	beq.n	80070ea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070e4:	787b      	ldrb	r3, [r7, #1]
 80070e6:	2bff      	cmp	r3, #255	; 0xff
 80070e8:	d101      	bne.n	80070ee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	e006      	b.n	80070fc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	3301      	adds	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d9d6      	bls.n	80070a8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070fa:	23ff      	movs	r3, #255	; 0xff
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fce7 	bl	8007ae4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007116:	2101      	movs	r1, #1
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fdbe 	bl	8007c9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f804 	bl	800716a <USBH_HandleSof>
}
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b0b      	cmp	r3, #11
 800717a:	d10a      	bne.n	8007192 <USBH_HandleSof+0x28>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d005      	beq.n	8007192 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
  }
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80071aa:	bf00      	nop
}
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80071c6:	bf00      	nop
}
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fc7a 	bl	8007b1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	791b      	ldrb	r3, [r3, #4]
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fad1 	bl	80077d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	795b      	ldrb	r3, [r3, #5]
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 facb 	bl	80077d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	789b      	ldrb	r3, [r3, #2]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d10f      	bne.n	800727c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	b29a      	uxth	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800727c:	2200      	movs	r2, #0
 800727e:	2100      	movs	r1, #0
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f805 	bl	8007290 <USBH_CtlReq>
 8007286:	4603      	mov	r3, r0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800729e:	2301      	movs	r3, #1
 80072a0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	789b      	ldrb	r3, [r3, #2]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d002      	beq.n	80072b0 <USBH_CtlReq+0x20>
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d00f      	beq.n	80072ce <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80072ae:	e027      	b.n	8007300 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2201      	movs	r2, #1
 80072c0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2202      	movs	r2, #2
 80072c6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80072c8:	2301      	movs	r3, #1
 80072ca:	75fb      	strb	r3, [r7, #23]
      break;
 80072cc:	e018      	b.n	8007300 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f81c 	bl	800730c <USBH_HandleControl>
 80072d4:	4603      	mov	r3, r0
 80072d6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <USBH_CtlReq+0x54>
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d106      	bne.n	80072f2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	761a      	strb	r2, [r3, #24]
      break;
 80072f0:	e005      	b.n	80072fe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d102      	bne.n	80072fe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	709a      	strb	r2, [r3, #2]
      break;
 80072fe:	bf00      	nop
  }
  return status;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af02      	add	r7, sp, #8
 8007312:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007314:	2301      	movs	r3, #1
 8007316:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007318:	2300      	movs	r3, #0
 800731a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7e1b      	ldrb	r3, [r3, #24]
 8007320:	3b01      	subs	r3, #1
 8007322:	2b0a      	cmp	r3, #10
 8007324:	f200 8156 	bhi.w	80075d4 <USBH_HandleControl+0x2c8>
 8007328:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <USBH_HandleControl+0x24>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	0800735d 	.word	0x0800735d
 8007334:	08007377 	.word	0x08007377
 8007338:	080073e1 	.word	0x080073e1
 800733c:	08007407 	.word	0x08007407
 8007340:	0800743f 	.word	0x0800743f
 8007344:	08007469 	.word	0x08007469
 8007348:	080074bb 	.word	0x080074bb
 800734c:	080074dd 	.word	0x080074dd
 8007350:	08007519 	.word	0x08007519
 8007354:	0800753f 	.word	0x0800753f
 8007358:	0800757d 	.word	0x0800757d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f103 0110 	add.w	r1, r3, #16
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	795b      	ldrb	r3, [r3, #5]
 8007366:	461a      	mov	r2, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f943 	bl	80075f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	761a      	strb	r2, [r3, #24]
      break;
 8007374:	e139      	b.n	80075ea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	795b      	ldrb	r3, [r3, #5]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fc79 	bl	8007c74 <USBH_LL_GetURBState>
 8007382:	4603      	mov	r3, r0
 8007384:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d11e      	bne.n	80073ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7c1b      	ldrb	r3, [r3, #16]
 8007390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007394:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	8adb      	ldrh	r3, [r3, #22]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800739e:	7b7b      	ldrb	r3, [r7, #13]
 80073a0:	2b80      	cmp	r3, #128	; 0x80
 80073a2:	d103      	bne.n	80073ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2203      	movs	r2, #3
 80073a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80073aa:	e115      	b.n	80075d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2205      	movs	r2, #5
 80073b0:	761a      	strb	r2, [r3, #24]
      break;
 80073b2:	e111      	b.n	80075d8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80073b4:	7b7b      	ldrb	r3, [r7, #13]
 80073b6:	2b80      	cmp	r3, #128	; 0x80
 80073b8:	d103      	bne.n	80073c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2209      	movs	r2, #9
 80073be:	761a      	strb	r2, [r3, #24]
      break;
 80073c0:	e10a      	b.n	80075d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2207      	movs	r2, #7
 80073c6:	761a      	strb	r2, [r3, #24]
      break;
 80073c8:	e106      	b.n	80075d8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d003      	beq.n	80073d8 <USBH_HandleControl+0xcc>
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	f040 8100 	bne.w	80075d8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	220b      	movs	r2, #11
 80073dc:	761a      	strb	r2, [r3, #24]
      break;
 80073de:	e0fb      	b.n	80075d8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6899      	ldr	r1, [r3, #8]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	899a      	ldrh	r2, [r3, #12]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	791b      	ldrb	r3, [r3, #4]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f93a 	bl	8007672 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2204      	movs	r2, #4
 8007402:	761a      	strb	r2, [r3, #24]
      break;
 8007404:	e0f1      	b.n	80075ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	791b      	ldrb	r3, [r3, #4]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fc31 	bl	8007c74 <USBH_LL_GetURBState>
 8007412:	4603      	mov	r3, r0
 8007414:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d102      	bne.n	8007422 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2209      	movs	r2, #9
 8007420:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b05      	cmp	r3, #5
 8007426:	d102      	bne.n	800742e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007428:	2303      	movs	r3, #3
 800742a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800742c:	e0d6      	b.n	80075dc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b04      	cmp	r3, #4
 8007432:	f040 80d3 	bne.w	80075dc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	220b      	movs	r2, #11
 800743a:	761a      	strb	r2, [r3, #24]
      break;
 800743c:	e0ce      	b.n	80075dc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6899      	ldr	r1, [r3, #8]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	899a      	ldrh	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	795b      	ldrb	r3, [r3, #5]
 800744a:	2001      	movs	r0, #1
 800744c:	9000      	str	r0, [sp, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8ea 	bl	8007628 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2206      	movs	r2, #6
 8007464:	761a      	strb	r2, [r3, #24]
      break;
 8007466:	e0c0      	b.n	80075ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	795b      	ldrb	r3, [r3, #5]
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fc00 	bl	8007c74 <USBH_LL_GetURBState>
 8007474:	4603      	mov	r3, r0
 8007476:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d103      	bne.n	8007486 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2207      	movs	r2, #7
 8007482:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007484:	e0ac      	b.n	80075e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b05      	cmp	r3, #5
 800748a:	d105      	bne.n	8007498 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	220c      	movs	r2, #12
 8007490:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007492:	2303      	movs	r3, #3
 8007494:	73fb      	strb	r3, [r7, #15]
      break;
 8007496:	e0a3      	b.n	80075e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d103      	bne.n	80074a6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2205      	movs	r2, #5
 80074a2:	761a      	strb	r2, [r3, #24]
      break;
 80074a4:	e09c      	b.n	80075e0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	f040 8099 	bne.w	80075e0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	220b      	movs	r2, #11
 80074b2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80074b4:	2302      	movs	r3, #2
 80074b6:	73fb      	strb	r3, [r7, #15]
      break;
 80074b8:	e092      	b.n	80075e0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	791b      	ldrb	r3, [r3, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	2100      	movs	r1, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f8d5 	bl	8007672 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2208      	movs	r2, #8
 80074d8:	761a      	strb	r2, [r3, #24]

      break;
 80074da:	e086      	b.n	80075ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	791b      	ldrb	r3, [r3, #4]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fbc6 	bl	8007c74 <USBH_LL_GetURBState>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d105      	bne.n	80074fe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	220d      	movs	r2, #13
 80074f6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80074fc:	e072      	b.n	80075e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	2b04      	cmp	r3, #4
 8007502:	d103      	bne.n	800750c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	220b      	movs	r2, #11
 8007508:	761a      	strb	r2, [r3, #24]
      break;
 800750a:	e06b      	b.n	80075e4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b05      	cmp	r3, #5
 8007510:	d168      	bne.n	80075e4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007512:	2303      	movs	r3, #3
 8007514:	73fb      	strb	r3, [r7, #15]
      break;
 8007516:	e065      	b.n	80075e4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	795b      	ldrb	r3, [r3, #5]
 800751c:	2201      	movs	r2, #1
 800751e:	9200      	str	r2, [sp, #0]
 8007520:	2200      	movs	r2, #0
 8007522:	2100      	movs	r1, #0
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f87f 	bl	8007628 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007530:	b29a      	uxth	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	220a      	movs	r2, #10
 800753a:	761a      	strb	r2, [r3, #24]
      break;
 800753c:	e055      	b.n	80075ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	795b      	ldrb	r3, [r3, #5]
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fb95 	bl	8007c74 <USBH_LL_GetURBState>
 800754a:	4603      	mov	r3, r0
 800754c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d105      	bne.n	8007560 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	220d      	movs	r2, #13
 800755c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800755e:	e043      	b.n	80075e8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d103      	bne.n	800756e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2209      	movs	r2, #9
 800756a:	761a      	strb	r2, [r3, #24]
      break;
 800756c:	e03c      	b.n	80075e8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b04      	cmp	r3, #4
 8007572:	d139      	bne.n	80075e8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	220b      	movs	r2, #11
 8007578:	761a      	strb	r2, [r3, #24]
      break;
 800757a:	e035      	b.n	80075e8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	7e5b      	ldrb	r3, [r3, #25]
 8007580:	3301      	adds	r3, #1
 8007582:	b2da      	uxtb	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	765a      	strb	r2, [r3, #25]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	7e5b      	ldrb	r3, [r3, #25]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d806      	bhi.n	800759e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800759c:	e025      	b.n	80075ea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a4:	2106      	movs	r1, #6
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	795b      	ldrb	r3, [r3, #5]
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f90c 	bl	80077d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	791b      	ldrb	r3, [r3, #4]
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f906 	bl	80077d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80075ce:	2302      	movs	r3, #2
 80075d0:	73fb      	strb	r3, [r7, #15]
      break;
 80075d2:	e00a      	b.n	80075ea <USBH_HandleControl+0x2de>

    default:
      break;
 80075d4:	bf00      	nop
 80075d6:	e008      	b.n	80075ea <USBH_HandleControl+0x2de>
      break;
 80075d8:	bf00      	nop
 80075da:	e006      	b.n	80075ea <USBH_HandleControl+0x2de>
      break;
 80075dc:	bf00      	nop
 80075de:	e004      	b.n	80075ea <USBH_HandleControl+0x2de>
      break;
 80075e0:	bf00      	nop
 80075e2:	e002      	b.n	80075ea <USBH_HandleControl+0x2de>
      break;
 80075e4:	bf00      	nop
 80075e6:	e000      	b.n	80075ea <USBH_HandleControl+0x2de>
      break;
 80075e8:	bf00      	nop
  }

  return status;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af04      	add	r7, sp, #16
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007602:	79f9      	ldrb	r1, [r7, #7]
 8007604:	2300      	movs	r3, #0
 8007606:	9303      	str	r3, [sp, #12]
 8007608:	2308      	movs	r3, #8
 800760a:	9302      	str	r3, [sp, #8]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	2300      	movs	r3, #0
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	2300      	movs	r3, #0
 8007616:	2200      	movs	r2, #0
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fafa 	bl	8007c12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af04      	add	r7, sp, #16
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4611      	mov	r1, r2
 8007634:	461a      	mov	r2, r3
 8007636:	460b      	mov	r3, r1
 8007638:	80fb      	strh	r3, [r7, #6]
 800763a:	4613      	mov	r3, r2
 800763c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800764c:	7979      	ldrb	r1, [r7, #5]
 800764e:	7e3b      	ldrb	r3, [r7, #24]
 8007650:	9303      	str	r3, [sp, #12]
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	9302      	str	r3, [sp, #8]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	2301      	movs	r3, #1
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	2300      	movs	r3, #0
 8007660:	2200      	movs	r2, #0
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 fad5 	bl	8007c12 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b088      	sub	sp, #32
 8007676:	af04      	add	r7, sp, #16
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	4611      	mov	r1, r2
 800767e:	461a      	mov	r2, r3
 8007680:	460b      	mov	r3, r1
 8007682:	80fb      	strh	r3, [r7, #6]
 8007684:	4613      	mov	r3, r2
 8007686:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007688:	7979      	ldrb	r1, [r7, #5]
 800768a:	2300      	movs	r3, #0
 800768c:	9303      	str	r3, [sp, #12]
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	9302      	str	r3, [sp, #8]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	2301      	movs	r3, #1
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	2300      	movs	r3, #0
 800769c:	2201      	movs	r2, #1
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fab7 	bl	8007c12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80076a4:	2300      	movs	r3, #0

}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b088      	sub	sp, #32
 80076b2:	af04      	add	r7, sp, #16
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	4611      	mov	r1, r2
 80076ba:	461a      	mov	r2, r3
 80076bc:	460b      	mov	r3, r1
 80076be:	80fb      	strh	r3, [r7, #6]
 80076c0:	4613      	mov	r3, r2
 80076c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80076d2:	7979      	ldrb	r1, [r7, #5]
 80076d4:	7e3b      	ldrb	r3, [r7, #24]
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	88fb      	ldrh	r3, [r7, #6]
 80076da:	9302      	str	r3, [sp, #8]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	2301      	movs	r3, #1
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	2302      	movs	r3, #2
 80076e6:	2200      	movs	r2, #0
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fa92 	bl	8007c12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af04      	add	r7, sp, #16
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4611      	mov	r1, r2
 8007704:	461a      	mov	r2, r3
 8007706:	460b      	mov	r3, r1
 8007708:	80fb      	strh	r3, [r7, #6]
 800770a:	4613      	mov	r3, r2
 800770c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800770e:	7979      	ldrb	r1, [r7, #5]
 8007710:	2300      	movs	r3, #0
 8007712:	9303      	str	r3, [sp, #12]
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	9302      	str	r3, [sp, #8]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	2301      	movs	r3, #1
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2302      	movs	r3, #2
 8007722:	2201      	movs	r2, #1
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 fa74 	bl	8007c12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af04      	add	r7, sp, #16
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	461a      	mov	r2, r3
 8007742:	4603      	mov	r3, r0
 8007744:	70fb      	strb	r3, [r7, #3]
 8007746:	460b      	mov	r3, r1
 8007748:	70bb      	strb	r3, [r7, #2]
 800774a:	4613      	mov	r3, r2
 800774c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800774e:	7878      	ldrb	r0, [r7, #1]
 8007750:	78ba      	ldrb	r2, [r7, #2]
 8007752:	78f9      	ldrb	r1, [r7, #3]
 8007754:	8b3b      	ldrh	r3, [r7, #24]
 8007756:	9302      	str	r3, [sp, #8]
 8007758:	7d3b      	ldrb	r3, [r7, #20]
 800775a:	9301      	str	r3, [sp, #4]
 800775c:	7c3b      	ldrb	r3, [r7, #16]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	4603      	mov	r3, r0
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa07 	bl	8007b76 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa26 	bl	8007bd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f836 	bl	8007810 <USBH_GetFreePipe>
 80077a4:	4603      	mov	r3, r0
 80077a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80077a8:	89fb      	ldrh	r3, [r7, #14]
 80077aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00a      	beq.n	80077c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	89fb      	ldrh	r3, [r7, #14]
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	33e0      	adds	r3, #224	; 0xe0
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80077c8:	89fb      	ldrh	r3, [r7, #14]
 80077ca:	b2db      	uxtb	r3, r3
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	2b0f      	cmp	r3, #15
 80077e4:	d80d      	bhi.n	8007802 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	33e0      	adds	r3, #224	; 0xe0
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	33e0      	adds	r3, #224	; 0xe0
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	440b      	add	r3, r1
 8007800:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800781c:	2300      	movs	r3, #0
 800781e:	73fb      	strb	r3, [r7, #15]
 8007820:	e00f      	b.n	8007842 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007822:	7bfb      	ldrb	r3, [r7, #15]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	33e0      	adds	r3, #224	; 0xe0
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d102      	bne.n	800783c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	b29b      	uxth	r3, r3
 800783a:	e007      	b.n	800784c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	3301      	adds	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b0f      	cmp	r3, #15
 8007846:	d9ec      	bls.n	8007822 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007848:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800785c:	2201      	movs	r2, #1
 800785e:	490e      	ldr	r1, [pc, #56]	; (8007898 <MX_USB_HOST_Init+0x40>)
 8007860:	480e      	ldr	r0, [pc, #56]	; (800789c <MX_USB_HOST_Init+0x44>)
 8007862:	f7ff fb37 	bl	8006ed4 <USBH_Init>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800786c:	f7f9 fb72 	bl	8000f54 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007870:	490b      	ldr	r1, [pc, #44]	; (80078a0 <MX_USB_HOST_Init+0x48>)
 8007872:	480a      	ldr	r0, [pc, #40]	; (800789c <MX_USB_HOST_Init+0x44>)
 8007874:	f7ff fbbc 	bl	8006ff0 <USBH_RegisterClass>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800787e:	f7f9 fb69 	bl	8000f54 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007882:	4806      	ldr	r0, [pc, #24]	; (800789c <MX_USB_HOST_Init+0x44>)
 8007884:	f7ff fc40 	bl	8007108 <USBH_Start>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800788e:	f7f9 fb61 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007892:	bf00      	nop
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	080078a5 	.word	0x080078a5
 800789c:	20000284 	.word	0x20000284
 80078a0:	2000008c 	.word	0x2000008c

080078a4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	2b04      	cmp	r3, #4
 80078b6:	d819      	bhi.n	80078ec <USBH_UserProcess+0x48>
 80078b8:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <USBH_UserProcess+0x1c>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078ed 	.word	0x080078ed
 80078c4:	080078dd 	.word	0x080078dd
 80078c8:	080078ed 	.word	0x080078ed
 80078cc:	080078e5 	.word	0x080078e5
 80078d0:	080078d5 	.word	0x080078d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80078d4:	4b09      	ldr	r3, [pc, #36]	; (80078fc <USBH_UserProcess+0x58>)
 80078d6:	2203      	movs	r2, #3
 80078d8:	701a      	strb	r2, [r3, #0]
  break;
 80078da:	e008      	b.n	80078ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <USBH_UserProcess+0x58>)
 80078de:	2202      	movs	r2, #2
 80078e0:	701a      	strb	r2, [r3, #0]
  break;
 80078e2:	e004      	b.n	80078ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <USBH_UserProcess+0x58>)
 80078e6:	2201      	movs	r2, #1
 80078e8:	701a      	strb	r2, [r3, #0]
  break;
 80078ea:	e000      	b.n	80078ee <USBH_UserProcess+0x4a>

  default:
  break;
 80078ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	2000065c 	.word	0x2000065c

08007900 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	; 0x28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	609a      	str	r2, [r3, #8]
 8007914:	60da      	str	r2, [r3, #12]
 8007916:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007920:	d147      	bne.n	80079b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007922:	2300      	movs	r3, #0
 8007924:	613b      	str	r3, [r7, #16]
 8007926:	4b25      	ldr	r3, [pc, #148]	; (80079bc <HAL_HCD_MspInit+0xbc>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	4a24      	ldr	r2, [pc, #144]	; (80079bc <HAL_HCD_MspInit+0xbc>)
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	6313      	str	r3, [r2, #48]	; 0x30
 8007932:	4b22      	ldr	r3, [pc, #136]	; (80079bc <HAL_HCD_MspInit+0xbc>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	613b      	str	r3, [r7, #16]
 800793c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800793e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007944:	2300      	movs	r3, #0
 8007946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800794c:	f107 0314 	add.w	r3, r7, #20
 8007950:	4619      	mov	r1, r3
 8007952:	481b      	ldr	r0, [pc, #108]	; (80079c0 <HAL_HCD_MspInit+0xc0>)
 8007954:	f7fa f9f2 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007958:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800795c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800795e:	2302      	movs	r3, #2
 8007960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007966:	2300      	movs	r3, #0
 8007968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800796a:	230a      	movs	r3, #10
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800796e:	f107 0314 	add.w	r3, r7, #20
 8007972:	4619      	mov	r1, r3
 8007974:	4812      	ldr	r0, [pc, #72]	; (80079c0 <HAL_HCD_MspInit+0xc0>)
 8007976:	f7fa f9e1 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800797a:	4b10      	ldr	r3, [pc, #64]	; (80079bc <HAL_HCD_MspInit+0xbc>)
 800797c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797e:	4a0f      	ldr	r2, [pc, #60]	; (80079bc <HAL_HCD_MspInit+0xbc>)
 8007980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007984:	6353      	str	r3, [r2, #52]	; 0x34
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <HAL_HCD_MspInit+0xbc>)
 800798c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798e:	4a0b      	ldr	r2, [pc, #44]	; (80079bc <HAL_HCD_MspInit+0xbc>)
 8007990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007994:	6453      	str	r3, [r2, #68]	; 0x44
 8007996:	4b09      	ldr	r3, [pc, #36]	; (80079bc <HAL_HCD_MspInit+0xbc>)
 8007998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800799a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80079a2:	2200      	movs	r2, #0
 80079a4:	2100      	movs	r1, #0
 80079a6:	2043      	movs	r0, #67	; 0x43
 80079a8:	f7fa f991 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80079ac:	2043      	movs	r0, #67	; 0x43
 80079ae:	f7fa f9aa 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079b2:	bf00      	nop
 80079b4:	3728      	adds	r7, #40	; 0x28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	40023800 	.word	0x40023800
 80079c0:	40020000 	.word	0x40020000

080079c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fbb7 	bl	8007146 <USBH_LL_IncTimer>
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff fbef 	bl	80071d2 <USBH_LL_Connect>
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fbf8 	bl	8007200 <USBH_LL_Disconnect>
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
 8007a24:	4613      	mov	r3, r2
 8007a26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fba9 	bl	800719a <USBH_LL_PortEnabled>
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff fba9 	bl	80071b6 <USBH_LL_PortDisabled>
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d12a      	bne.n	8007ad4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007a7e:	4a18      	ldr	r2, [pc, #96]	; (8007ae0 <USBH_LL_Init+0x74>)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a15      	ldr	r2, [pc, #84]	; (8007ae0 <USBH_LL_Init+0x74>)
 8007a8a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a8e:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <USBH_LL_Init+0x74>)
 8007a90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007a96:	4b12      	ldr	r3, [pc, #72]	; (8007ae0 <USBH_LL_Init+0x74>)
 8007a98:	2208      	movs	r2, #8
 8007a9a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007a9c:	4b10      	ldr	r3, [pc, #64]	; (8007ae0 <USBH_LL_Init+0x74>)
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007aa2:	4b0f      	ldr	r3, [pc, #60]	; (8007ae0 <USBH_LL_Init+0x74>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <USBH_LL_Init+0x74>)
 8007aaa:	2202      	movs	r2, #2
 8007aac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007aae:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <USBH_LL_Init+0x74>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ab4:	480a      	ldr	r0, [pc, #40]	; (8007ae0 <USBH_LL_Init+0x74>)
 8007ab6:	f7fa fbf2 	bl	800229e <HAL_HCD_Init>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007ac0:	f7f9 fa48 	bl	8000f54 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007ac4:	4806      	ldr	r0, [pc, #24]	; (8007ae0 <USBH_LL_Init+0x74>)
 8007ac6:	f7fa ffc8 	bl	8002a5a <HAL_HCD_GetCurrentFrame>
 8007aca:	4603      	mov	r3, r0
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fb2a 	bl	8007128 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000660 	.word	0x20000660

08007ae4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fa ff45 	bl	800298a <HAL_HCD_Start>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 f90e 	bl	8007d28 <USBH_Get_USB_Status>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fa ff4d 	bl	80029d0 <HAL_HCD_Stop>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 f8f3 	bl	8007d28 <USBH_Get_USB_Status>
 8007b42:	4603      	mov	r3, r0
 8007b44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fa ff63 	bl	8002a32 <HAL_HCD_HC_GetXferCount>
 8007b6c:	4603      	mov	r3, r0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b76:	b590      	push	{r4, r7, lr}
 8007b78:	b089      	sub	sp, #36	; 0x24
 8007b7a:	af04      	add	r7, sp, #16
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	4608      	mov	r0, r1
 8007b80:	4611      	mov	r1, r2
 8007b82:	461a      	mov	r2, r3
 8007b84:	4603      	mov	r3, r0
 8007b86:	70fb      	strb	r3, [r7, #3]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70bb      	strb	r3, [r7, #2]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b9e:	787c      	ldrb	r4, [r7, #1]
 8007ba0:	78ba      	ldrb	r2, [r7, #2]
 8007ba2:	78f9      	ldrb	r1, [r7, #3]
 8007ba4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ba6:	9302      	str	r3, [sp, #8]
 8007ba8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	f7fa fbd4 	bl	8002362 <HAL_HCD_HC_Init>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f8b1 	bl	8007d28 <USBH_Get_USB_Status>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd90      	pop	{r4, r7, pc}

08007bd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fa fc44 	bl	8002480 <HAL_HCD_HC_Halt>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f892 	bl	8007d28 <USBH_Get_USB_Status>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007c12:	b590      	push	{r4, r7, lr}
 8007c14:	b089      	sub	sp, #36	; 0x24
 8007c16:	af04      	add	r7, sp, #16
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	461a      	mov	r2, r3
 8007c20:	4603      	mov	r3, r0
 8007c22:	70fb      	strb	r3, [r7, #3]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70bb      	strb	r3, [r7, #2]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c3a:	787c      	ldrb	r4, [r7, #1]
 8007c3c:	78ba      	ldrb	r2, [r7, #2]
 8007c3e:	78f9      	ldrb	r1, [r7, #3]
 8007c40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c44:	9303      	str	r3, [sp, #12]
 8007c46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c48:	9302      	str	r3, [sp, #8]
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	4623      	mov	r3, r4
 8007c56:	f7fa fc37 	bl	80024c8 <HAL_HCD_HC_SubmitRequest>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 f861 	bl	8007d28 <USBH_Get_USB_Status>
 8007c66:	4603      	mov	r3, r0
 8007c68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd90      	pop	{r4, r7, pc}

08007c74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fa febd 	bl	8002a0a <HAL_HCD_HC_GetURBState>
 8007c90:	4603      	mov	r3, r0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d103      	bne.n	8007cb8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f864 	bl	8007d80 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007cb8:	20c8      	movs	r0, #200	; 0xc8
 8007cba:	f7f9 ff09 	bl	8001ad0 <HAL_Delay>
  return USBH_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007cde:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	212c      	movs	r1, #44	; 0x2c
 8007ce6:	fb01 f303 	mul.w	r3, r1, r3
 8007cea:	4413      	add	r3, r2
 8007cec:	333b      	adds	r3, #59	; 0x3b
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d009      	beq.n	8007d08 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	212c      	movs	r1, #44	; 0x2c
 8007cfa:	fb01 f303 	mul.w	r3, r1, r3
 8007cfe:	4413      	add	r3, r2
 8007d00:	3354      	adds	r3, #84	; 0x54
 8007d02:	78ba      	ldrb	r2, [r7, #2]
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e008      	b.n	8007d1a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	212c      	movs	r1, #44	; 0x2c
 8007d0e:	fb01 f303 	mul.w	r3, r1, r3
 8007d12:	4413      	add	r3, r2
 8007d14:	3355      	adds	r3, #85	; 0x55
 8007d16:	78ba      	ldrb	r2, [r7, #2]
 8007d18:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d817      	bhi.n	8007d6c <USBH_Get_USB_Status+0x44>
 8007d3c:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <USBH_Get_USB_Status+0x1c>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007d5b 	.word	0x08007d5b
 8007d4c:	08007d61 	.word	0x08007d61
 8007d50:	08007d67 	.word	0x08007d67
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
    break;
 8007d58:	e00b      	b.n	8007d72 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d5e:	e008      	b.n	8007d72 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
    break;
 8007d64:	e005      	b.n	8007d72 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007d66:	2302      	movs	r3, #2
 8007d68:	73fb      	strb	r3, [r7, #15]
    break;
 8007d6a:	e002      	b.n	8007d72 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d70:	bf00      	nop
  }
  return usb_status;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	e001      	b.n	8007d9e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	461a      	mov	r2, r3
 8007da2:	2101      	movs	r1, #1
 8007da4:	4803      	ldr	r0, [pc, #12]	; (8007db4 <MX_DriverVbusFS+0x34>)
 8007da6:	f7fa fa61 	bl	800226c <HAL_GPIO_WritePin>
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	40020800 	.word	0x40020800

08007db8 <__errno>:
 8007db8:	4b01      	ldr	r3, [pc, #4]	; (8007dc0 <__errno+0x8>)
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	200000ac 	.word	0x200000ac

08007dc4 <__libc_init_array>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4d0d      	ldr	r5, [pc, #52]	; (8007dfc <__libc_init_array+0x38>)
 8007dc8:	4c0d      	ldr	r4, [pc, #52]	; (8007e00 <__libc_init_array+0x3c>)
 8007dca:	1b64      	subs	r4, r4, r5
 8007dcc:	10a4      	asrs	r4, r4, #2
 8007dce:	2600      	movs	r6, #0
 8007dd0:	42a6      	cmp	r6, r4
 8007dd2:	d109      	bne.n	8007de8 <__libc_init_array+0x24>
 8007dd4:	4d0b      	ldr	r5, [pc, #44]	; (8007e04 <__libc_init_array+0x40>)
 8007dd6:	4c0c      	ldr	r4, [pc, #48]	; (8007e08 <__libc_init_array+0x44>)
 8007dd8:	f000 f92e 	bl	8008038 <_init>
 8007ddc:	1b64      	subs	r4, r4, r5
 8007dde:	10a4      	asrs	r4, r4, #2
 8007de0:	2600      	movs	r6, #0
 8007de2:	42a6      	cmp	r6, r4
 8007de4:	d105      	bne.n	8007df2 <__libc_init_array+0x2e>
 8007de6:	bd70      	pop	{r4, r5, r6, pc}
 8007de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dec:	4798      	blx	r3
 8007dee:	3601      	adds	r6, #1
 8007df0:	e7ee      	b.n	8007dd0 <__libc_init_array+0xc>
 8007df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007df6:	4798      	blx	r3
 8007df8:	3601      	adds	r6, #1
 8007dfa:	e7f2      	b.n	8007de2 <__libc_init_array+0x1e>
 8007dfc:	0800807c 	.word	0x0800807c
 8007e00:	0800807c 	.word	0x0800807c
 8007e04:	0800807c 	.word	0x0800807c
 8007e08:	08008080 	.word	0x08008080

08007e0c <malloc>:
 8007e0c:	4b02      	ldr	r3, [pc, #8]	; (8007e18 <malloc+0xc>)
 8007e0e:	4601      	mov	r1, r0
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	f000 b87f 	b.w	8007f14 <_malloc_r>
 8007e16:	bf00      	nop
 8007e18:	200000ac 	.word	0x200000ac

08007e1c <free>:
 8007e1c:	4b02      	ldr	r3, [pc, #8]	; (8007e28 <free+0xc>)
 8007e1e:	4601      	mov	r1, r0
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	f000 b80b 	b.w	8007e3c <_free_r>
 8007e26:	bf00      	nop
 8007e28:	200000ac 	.word	0x200000ac

08007e2c <memset>:
 8007e2c:	4402      	add	r2, r0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d100      	bne.n	8007e36 <memset+0xa>
 8007e34:	4770      	bx	lr
 8007e36:	f803 1b01 	strb.w	r1, [r3], #1
 8007e3a:	e7f9      	b.n	8007e30 <memset+0x4>

08007e3c <_free_r>:
 8007e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e3e:	2900      	cmp	r1, #0
 8007e40:	d044      	beq.n	8007ecc <_free_r+0x90>
 8007e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e46:	9001      	str	r0, [sp, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e4e:	bfb8      	it	lt
 8007e50:	18e4      	addlt	r4, r4, r3
 8007e52:	f000 f8e3 	bl	800801c <__malloc_lock>
 8007e56:	4a1e      	ldr	r2, [pc, #120]	; (8007ed0 <_free_r+0x94>)
 8007e58:	9801      	ldr	r0, [sp, #4]
 8007e5a:	6813      	ldr	r3, [r2, #0]
 8007e5c:	b933      	cbnz	r3, 8007e6c <_free_r+0x30>
 8007e5e:	6063      	str	r3, [r4, #4]
 8007e60:	6014      	str	r4, [r2, #0]
 8007e62:	b003      	add	sp, #12
 8007e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e68:	f000 b8de 	b.w	8008028 <__malloc_unlock>
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	d908      	bls.n	8007e82 <_free_r+0x46>
 8007e70:	6825      	ldr	r5, [r4, #0]
 8007e72:	1961      	adds	r1, r4, r5
 8007e74:	428b      	cmp	r3, r1
 8007e76:	bf01      	itttt	eq
 8007e78:	6819      	ldreq	r1, [r3, #0]
 8007e7a:	685b      	ldreq	r3, [r3, #4]
 8007e7c:	1949      	addeq	r1, r1, r5
 8007e7e:	6021      	streq	r1, [r4, #0]
 8007e80:	e7ed      	b.n	8007e5e <_free_r+0x22>
 8007e82:	461a      	mov	r2, r3
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	b10b      	cbz	r3, 8007e8c <_free_r+0x50>
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	d9fa      	bls.n	8007e82 <_free_r+0x46>
 8007e8c:	6811      	ldr	r1, [r2, #0]
 8007e8e:	1855      	adds	r5, r2, r1
 8007e90:	42a5      	cmp	r5, r4
 8007e92:	d10b      	bne.n	8007eac <_free_r+0x70>
 8007e94:	6824      	ldr	r4, [r4, #0]
 8007e96:	4421      	add	r1, r4
 8007e98:	1854      	adds	r4, r2, r1
 8007e9a:	42a3      	cmp	r3, r4
 8007e9c:	6011      	str	r1, [r2, #0]
 8007e9e:	d1e0      	bne.n	8007e62 <_free_r+0x26>
 8007ea0:	681c      	ldr	r4, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	6053      	str	r3, [r2, #4]
 8007ea6:	4421      	add	r1, r4
 8007ea8:	6011      	str	r1, [r2, #0]
 8007eaa:	e7da      	b.n	8007e62 <_free_r+0x26>
 8007eac:	d902      	bls.n	8007eb4 <_free_r+0x78>
 8007eae:	230c      	movs	r3, #12
 8007eb0:	6003      	str	r3, [r0, #0]
 8007eb2:	e7d6      	b.n	8007e62 <_free_r+0x26>
 8007eb4:	6825      	ldr	r5, [r4, #0]
 8007eb6:	1961      	adds	r1, r4, r5
 8007eb8:	428b      	cmp	r3, r1
 8007eba:	bf04      	itt	eq
 8007ebc:	6819      	ldreq	r1, [r3, #0]
 8007ebe:	685b      	ldreq	r3, [r3, #4]
 8007ec0:	6063      	str	r3, [r4, #4]
 8007ec2:	bf04      	itt	eq
 8007ec4:	1949      	addeq	r1, r1, r5
 8007ec6:	6021      	streq	r1, [r4, #0]
 8007ec8:	6054      	str	r4, [r2, #4]
 8007eca:	e7ca      	b.n	8007e62 <_free_r+0x26>
 8007ecc:	b003      	add	sp, #12
 8007ece:	bd30      	pop	{r4, r5, pc}
 8007ed0:	20000964 	.word	0x20000964

08007ed4 <sbrk_aligned>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	4e0e      	ldr	r6, [pc, #56]	; (8007f10 <sbrk_aligned+0x3c>)
 8007ed8:	460c      	mov	r4, r1
 8007eda:	6831      	ldr	r1, [r6, #0]
 8007edc:	4605      	mov	r5, r0
 8007ede:	b911      	cbnz	r1, 8007ee6 <sbrk_aligned+0x12>
 8007ee0:	f000 f88c 	bl	8007ffc <_sbrk_r>
 8007ee4:	6030      	str	r0, [r6, #0]
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 f887 	bl	8007ffc <_sbrk_r>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	d00a      	beq.n	8007f08 <sbrk_aligned+0x34>
 8007ef2:	1cc4      	adds	r4, r0, #3
 8007ef4:	f024 0403 	bic.w	r4, r4, #3
 8007ef8:	42a0      	cmp	r0, r4
 8007efa:	d007      	beq.n	8007f0c <sbrk_aligned+0x38>
 8007efc:	1a21      	subs	r1, r4, r0
 8007efe:	4628      	mov	r0, r5
 8007f00:	f000 f87c 	bl	8007ffc <_sbrk_r>
 8007f04:	3001      	adds	r0, #1
 8007f06:	d101      	bne.n	8007f0c <sbrk_aligned+0x38>
 8007f08:	f04f 34ff 	mov.w	r4, #4294967295
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	20000968 	.word	0x20000968

08007f14 <_malloc_r>:
 8007f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f18:	1ccd      	adds	r5, r1, #3
 8007f1a:	f025 0503 	bic.w	r5, r5, #3
 8007f1e:	3508      	adds	r5, #8
 8007f20:	2d0c      	cmp	r5, #12
 8007f22:	bf38      	it	cc
 8007f24:	250c      	movcc	r5, #12
 8007f26:	2d00      	cmp	r5, #0
 8007f28:	4607      	mov	r7, r0
 8007f2a:	db01      	blt.n	8007f30 <_malloc_r+0x1c>
 8007f2c:	42a9      	cmp	r1, r5
 8007f2e:	d905      	bls.n	8007f3c <_malloc_r+0x28>
 8007f30:	230c      	movs	r3, #12
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	2600      	movs	r6, #0
 8007f36:	4630      	mov	r0, r6
 8007f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f3c:	4e2e      	ldr	r6, [pc, #184]	; (8007ff8 <_malloc_r+0xe4>)
 8007f3e:	f000 f86d 	bl	800801c <__malloc_lock>
 8007f42:	6833      	ldr	r3, [r6, #0]
 8007f44:	461c      	mov	r4, r3
 8007f46:	bb34      	cbnz	r4, 8007f96 <_malloc_r+0x82>
 8007f48:	4629      	mov	r1, r5
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	f7ff ffc2 	bl	8007ed4 <sbrk_aligned>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	4604      	mov	r4, r0
 8007f54:	d14d      	bne.n	8007ff2 <_malloc_r+0xde>
 8007f56:	6834      	ldr	r4, [r6, #0]
 8007f58:	4626      	mov	r6, r4
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	d140      	bne.n	8007fe0 <_malloc_r+0xcc>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	4631      	mov	r1, r6
 8007f62:	4638      	mov	r0, r7
 8007f64:	eb04 0803 	add.w	r8, r4, r3
 8007f68:	f000 f848 	bl	8007ffc <_sbrk_r>
 8007f6c:	4580      	cmp	r8, r0
 8007f6e:	d13a      	bne.n	8007fe6 <_malloc_r+0xd2>
 8007f70:	6821      	ldr	r1, [r4, #0]
 8007f72:	3503      	adds	r5, #3
 8007f74:	1a6d      	subs	r5, r5, r1
 8007f76:	f025 0503 	bic.w	r5, r5, #3
 8007f7a:	3508      	adds	r5, #8
 8007f7c:	2d0c      	cmp	r5, #12
 8007f7e:	bf38      	it	cc
 8007f80:	250c      	movcc	r5, #12
 8007f82:	4629      	mov	r1, r5
 8007f84:	4638      	mov	r0, r7
 8007f86:	f7ff ffa5 	bl	8007ed4 <sbrk_aligned>
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d02b      	beq.n	8007fe6 <_malloc_r+0xd2>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	442b      	add	r3, r5
 8007f92:	6023      	str	r3, [r4, #0]
 8007f94:	e00e      	b.n	8007fb4 <_malloc_r+0xa0>
 8007f96:	6822      	ldr	r2, [r4, #0]
 8007f98:	1b52      	subs	r2, r2, r5
 8007f9a:	d41e      	bmi.n	8007fda <_malloc_r+0xc6>
 8007f9c:	2a0b      	cmp	r2, #11
 8007f9e:	d916      	bls.n	8007fce <_malloc_r+0xba>
 8007fa0:	1961      	adds	r1, r4, r5
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	6025      	str	r5, [r4, #0]
 8007fa6:	bf18      	it	ne
 8007fa8:	6059      	strne	r1, [r3, #4]
 8007faa:	6863      	ldr	r3, [r4, #4]
 8007fac:	bf08      	it	eq
 8007fae:	6031      	streq	r1, [r6, #0]
 8007fb0:	5162      	str	r2, [r4, r5]
 8007fb2:	604b      	str	r3, [r1, #4]
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f104 060b 	add.w	r6, r4, #11
 8007fba:	f000 f835 	bl	8008028 <__malloc_unlock>
 8007fbe:	f026 0607 	bic.w	r6, r6, #7
 8007fc2:	1d23      	adds	r3, r4, #4
 8007fc4:	1af2      	subs	r2, r6, r3
 8007fc6:	d0b6      	beq.n	8007f36 <_malloc_r+0x22>
 8007fc8:	1b9b      	subs	r3, r3, r6
 8007fca:	50a3      	str	r3, [r4, r2]
 8007fcc:	e7b3      	b.n	8007f36 <_malloc_r+0x22>
 8007fce:	6862      	ldr	r2, [r4, #4]
 8007fd0:	42a3      	cmp	r3, r4
 8007fd2:	bf0c      	ite	eq
 8007fd4:	6032      	streq	r2, [r6, #0]
 8007fd6:	605a      	strne	r2, [r3, #4]
 8007fd8:	e7ec      	b.n	8007fb4 <_malloc_r+0xa0>
 8007fda:	4623      	mov	r3, r4
 8007fdc:	6864      	ldr	r4, [r4, #4]
 8007fde:	e7b2      	b.n	8007f46 <_malloc_r+0x32>
 8007fe0:	4634      	mov	r4, r6
 8007fe2:	6876      	ldr	r6, [r6, #4]
 8007fe4:	e7b9      	b.n	8007f5a <_malloc_r+0x46>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	603b      	str	r3, [r7, #0]
 8007fea:	4638      	mov	r0, r7
 8007fec:	f000 f81c 	bl	8008028 <__malloc_unlock>
 8007ff0:	e7a1      	b.n	8007f36 <_malloc_r+0x22>
 8007ff2:	6025      	str	r5, [r4, #0]
 8007ff4:	e7de      	b.n	8007fb4 <_malloc_r+0xa0>
 8007ff6:	bf00      	nop
 8007ff8:	20000964 	.word	0x20000964

08007ffc <_sbrk_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d06      	ldr	r5, [pc, #24]	; (8008018 <_sbrk_r+0x1c>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	602b      	str	r3, [r5, #0]
 8008008:	f7f9 fc7e 	bl	8001908 <_sbrk>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_sbrk_r+0x1a>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_sbrk_r+0x1a>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	2000096c 	.word	0x2000096c

0800801c <__malloc_lock>:
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <__malloc_lock+0x8>)
 800801e:	f000 b809 	b.w	8008034 <__retarget_lock_acquire_recursive>
 8008022:	bf00      	nop
 8008024:	20000970 	.word	0x20000970

08008028 <__malloc_unlock>:
 8008028:	4801      	ldr	r0, [pc, #4]	; (8008030 <__malloc_unlock+0x8>)
 800802a:	f000 b804 	b.w	8008036 <__retarget_lock_release_recursive>
 800802e:	bf00      	nop
 8008030:	20000970 	.word	0x20000970

08008034 <__retarget_lock_acquire_recursive>:
 8008034:	4770      	bx	lr

08008036 <__retarget_lock_release_recursive>:
 8008036:	4770      	bx	lr

08008038 <_init>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	bf00      	nop
 800803c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803e:	bc08      	pop	{r3}
 8008040:	469e      	mov	lr, r3
 8008042:	4770      	bx	lr

08008044 <_fini>:
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	bf00      	nop
 8008048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804a:	bc08      	pop	{r3}
 800804c:	469e      	mov	lr, r3
 800804e:	4770      	bx	lr
