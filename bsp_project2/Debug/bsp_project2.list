
bsp_project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008004  08008004  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08008004  08008004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800800c  0800800c  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08008014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          0000080c  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000091c  2000091c  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f80  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fe0  00000000  00000000  000380c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  0003c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  0003d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c6c  00000000  00000000  0003e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001991a  00000000  00000000  000631bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce930  00000000  00000000  0007cad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b406  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005060  00000000  00000000  0014b458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007fc8 	.word	0x08007fc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	08007fc8 	.word	0x08007fc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80004da:	f000 fed1 	bl	8001280 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80004e4:	f107 030f 	add.w	r3, r7, #15
 80004e8:	2201      	movs	r2, #1
 80004ea:	2120      	movs	r1, #32
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 ff25 	bl	800133c <ACCELERO_IO_Write>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <LIS302DL_DeInit>:
  * @brief  LIS302DL De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000512:	f000 feb5 	bl	8001280 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	2201      	movs	r2, #1
 800051a:	210f      	movs	r1, #15
 800051c:	4618      	mov	r0, r3
 800051e:	f000 ff3f 	bl	80013a0 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 8000522:	79fb      	ldrb	r3, [r7, #7]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800053a:	f107 030f 	add.w	r3, r7, #15
 800053e:	2201      	movs	r2, #1
 8000540:	2121      	movs	r1, #33	; 0x21
 8000542:	4618      	mov	r0, r3
 8000544:	f000 ff2c 	bl	80013a0 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 800054e:	b2db      	uxtb	r3, r3
 8000550:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4313      	orrs	r3, r2
 8000558:	b2db      	uxtb	r3, r3
 800055a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800055c:	f107 030f 	add.w	r3, r7, #15
 8000560:	2201      	movs	r2, #1
 8000562:	2121      	movs	r1, #33	; 0x21
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fee9 	bl	800133c <ACCELERO_IO_Write>
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800057e:	f107 030f 	add.w	r3, r7, #15
 8000582:	2201      	movs	r2, #1
 8000584:	2138      	movs	r1, #56	; 0x38
 8000586:	4618      	mov	r0, r3
 8000588:	f000 ff0a 	bl	80013a0 <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000594:	4313      	orrs	r3, r2
 8000596:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800059c:	4313      	orrs	r3, r2
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005a2:	f107 030f 	add.w	r3, r7, #15
 80005a6:	2201      	movs	r2, #1
 80005a8:	2138      	movs	r1, #56	; 0x38
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fec6 	bl	800133c <ACCELERO_IO_Write>
}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 80005c2:	f000 fe8b 	bl	80012dc <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80005c6:	2340      	movs	r3, #64	; 0x40
 80005c8:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 80005ca:	2310      	movs	r3, #16
 80005cc:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80005ce:	2320      	movs	r3, #32
 80005d0:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffcc 	bl	8000572 <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 80005da:	233f      	movs	r3, #63	; 0x3f
 80005dc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	2201      	movs	r2, #1
 80005e2:	2122      	movs	r1, #34	; 0x22
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fea9 	bl	800133c <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 80005ea:	2350      	movs	r3, #80	; 0x50
 80005ec:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	2201      	movs	r2, #1
 80005f2:	2138      	movs	r1, #56	; 0x38
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fea1 	bl	800133c <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 80005fa:	23aa      	movs	r3, #170	; 0xaa
 80005fc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	2201      	movs	r2, #1
 8000602:	213b      	movs	r1, #59	; 0x3b
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fe99 	bl	800133c <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 800060a:	230a      	movs	r3, #10
 800060c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2201      	movs	r2, #1
 8000612:	213c      	movs	r1, #60	; 0x3c
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fe91 	bl	800133c <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 800061a:	234c      	movs	r3, #76	; 0x4c
 800061c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	2201      	movs	r2, #1
 8000622:	2130      	movs	r1, #48	; 0x30
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fe89 	bl	800133c <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 800062a:	2303      	movs	r3, #3
 800062c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	2201      	movs	r2, #1
 8000632:	213d      	movs	r1, #61	; 0x3d
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fe81 	bl	800133c <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 800063a:	237f      	movs	r3, #127	; 0x7f
 800063c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	2201      	movs	r2, #1
 8000642:	213e      	movs	r1, #62	; 0x3e
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fe79 	bl	800133c <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 800064a:	237f      	movs	r3, #127	; 0x7f
 800064c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	2201      	movs	r2, #1
 8000652:	213f      	movs	r1, #63	; 0x3f
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fe71 	bl	800133c <ACCELERO_IO_Write>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	2201      	movs	r2, #1
 8000670:	2139      	movs	r1, #57	; 0x39
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fe94 	bl	80013a0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2206      	movs	r2, #6
 800067e:	2127      	movs	r1, #39	; 0x27
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fe8d 	bl	80013a0 <ACCELERO_IO_Read>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	2201      	movs	r2, #1
 8000698:	2121      	movs	r1, #33	; 0x21
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fe80 	bl	80013a0 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	2201      	movs	r2, #1
 80006ae:	2121      	movs	r1, #33	; 0x21
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fe43 	bl	800133c <ACCELERO_IO_Write>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b088      	sub	sp, #32
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80006c6:	2312      	movs	r3, #18
 80006c8:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 80006ce:	f107 030f 	add.w	r3, r7, #15
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fe62 	bl	80013a0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	2206      	movs	r2, #6
 80006e2:	2129      	movs	r1, #41	; 0x29
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fe5b 	bl	80013a0 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	77bb      	strb	r3, [r7, #30]
 80006ee:	e00f      	b.n	8000710 <LIS302DL_ReadACC+0x52>
  {
    pnRawData[i] = buffer[2*i];
 80006f0:	7fbb      	ldrb	r3, [r7, #30]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	3320      	adds	r3, #32
 80006f6:	443b      	add	r3, r7
 80006f8:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	b212      	sxth	r2, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	3320      	adds	r3, #32
 8000704:	443b      	add	r3, r7
 8000706:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800070a:	7fbb      	ldrb	r3, [r7, #30]
 800070c:	3301      	adds	r3, #1
 800070e:	77bb      	strb	r3, [r7, #30]
 8000710:	7fbb      	ldrb	r3, [r7, #30]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d9ec      	bls.n	80006f0 <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	f003 0320 	and.w	r3, r3, #32
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <LIS302DL_ReadACC+0x68>
 8000720:	2b20      	cmp	r3, #32
 8000722:	d003      	beq.n	800072c <LIS302DL_ReadACC+0x6e>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 8000724:	e005      	b.n	8000732 <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8000726:	2312      	movs	r3, #18
 8000728:	77fb      	strb	r3, [r7, #31]
    break;
 800072a:	e002      	b.n	8000732 <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 800072c:	2348      	movs	r3, #72	; 0x48
 800072e:	77fb      	strb	r3, [r7, #31]
    break;
 8000730:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	77bb      	strb	r3, [r7, #30]
 8000736:	e014      	b.n	8000762 <LIS302DL_ReadACC+0xa4>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000738:	7fbb      	ldrb	r3, [r7, #30]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	3320      	adds	r3, #32
 800073e:	443b      	add	r3, r7
 8000740:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000744:	b29a      	uxth	r2, r3
 8000746:	7ffb      	ldrb	r3, [r7, #31]
 8000748:	b29b      	uxth	r3, r3
 800074a:	fb12 f303 	smulbb	r3, r2, r3
 800074e:	b299      	uxth	r1, r3
 8000750:	7fbb      	ldrb	r3, [r7, #30]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	4413      	add	r3, r2
 8000758:	b20a      	sxth	r2, r1
 800075a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800075c:	7fbb      	ldrb	r3, [r7, #30]
 800075e:	3301      	adds	r3, #1
 8000760:	77bb      	strb	r3, [r7, #30]
 8000762:	7fbb      	ldrb	r3, [r7, #30]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d9e7      	bls.n	8000738 <LIS302DL_ReadACC+0x7a>
  }
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000780:	f000 fd7e 	bl	8001280 <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 800078a:	f107 030f 	add.w	r3, r7, #15
 800078e:	2201      	movs	r2, #1
 8000790:	2120      	movs	r1, #32
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fdd2 	bl	800133c <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000798:	88fb      	ldrh	r3, [r7, #6]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b29b      	uxth	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 80007a2:	f107 030f 	add.w	r3, r7, #15
 80007a6:	2201      	movs	r2, #1
 80007a8:	2124      	movs	r1, #36	; 0x24
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fdc6 	bl	800133c <ACCELERO_IO_Write>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <LIS3DSH_DeInit>:
  * @brief  LIS3DSH De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80007d0:	f000 fd56 	bl	8001280 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	2201      	movs	r2, #1
 80007d8:	210f      	movs	r1, #15
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fde0 	bl	80013a0 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007fe:	4313      	orrs	r3, r2
 8000800:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000806:	4313      	orrs	r3, r2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 800080c:	f107 030f 	add.w	r3, r7, #15
 8000810:	2201      	movs	r2, #1
 8000812:	2123      	movs	r1, #35	; 0x23
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fd91 	bl	800133c <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000822:	4313      	orrs	r3, r2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000828:	f107 030f 	add.w	r3, r7, #15
 800082c:	2201      	movs	r2, #1
 800082e:	2121      	movs	r1, #33	; 0x21
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fd83 	bl	800133c <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 800083e:	4313      	orrs	r3, r2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8000844:	f107 030f 	add.w	r3, r7, #15
 8000848:	2201      	movs	r2, #1
 800084a:	2122      	movs	r1, #34	; 0x22
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fd75 	bl	800133c <ACCELERO_IO_Write>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 8000864:	f000 fd3a 	bl	80012dc <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 800086c:	2300      	movs	r3, #0
 800086e:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000878:	2301      	movs	r3, #1
 800087a:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 800087c:	2300      	movs	r3, #0
 800087e:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000880:	463b      	mov	r3, r7
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffb1 	bl	80007ea <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 8000888:	2303      	movs	r3, #3
 800088a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	2201      	movs	r2, #1
 8000890:	2152      	movs	r1, #82	; 0x52
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fd52 	bl	800133c <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8000898:	23c8      	movs	r3, #200	; 0xc8
 800089a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	2201      	movs	r2, #1
 80008a0:	2154      	movs	r1, #84	; 0x54
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fd4a 	bl	800133c <ACCELERO_IO_Write>
  ctrl=0x45; 
 80008a8:	2345      	movs	r3, #69	; 0x45
 80008aa:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	2201      	movs	r2, #1
 80008b0:	2156      	movs	r1, #86	; 0x56
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fd42 	bl	800133c <ACCELERO_IO_Write>
  ctrl=0xFC; 
 80008b8:	23fc      	movs	r3, #252	; 0xfc
 80008ba:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	2201      	movs	r2, #1
 80008c0:	215a      	movs	r1, #90	; 0x5a
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fd3a 	bl	800133c <ACCELERO_IO_Write>
  ctrl=0xA1; 
 80008c8:	23a1      	movs	r3, #161	; 0xa1
 80008ca:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	2201      	movs	r2, #1
 80008d0:	215b      	movs	r1, #91	; 0x5b
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fd32 	bl	800133c <ACCELERO_IO_Write>
  ctrl=0x01; 
 80008d8:	2301      	movs	r3, #1
 80008da:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	2201      	movs	r2, #1
 80008e0:	215c      	movs	r1, #92	; 0x5c
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fd2a 	bl	800133c <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	2201      	movs	r2, #1
 80008ec:	217b      	movs	r1, #123	; 0x7b
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fd24 	bl	800133c <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	2201      	movs	r2, #1
 80008f8:	2160      	movs	r1, #96	; 0x60
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fd1e 	bl	800133c <ACCELERO_IO_Write>
  ctrl=0x06; 
 8000900:	2306      	movs	r3, #6
 8000902:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	2201      	movs	r2, #1
 8000908:	2161      	movs	r1, #97	; 0x61
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fd16 	bl	800133c <ACCELERO_IO_Write>
  ctrl=0x28; 
 8000910:	2328      	movs	r3, #40	; 0x28
 8000912:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	2201      	movs	r2, #1
 8000918:	2162      	movs	r1, #98	; 0x62
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fd0e 	bl	800133c <ACCELERO_IO_Write>
  ctrl=0x11; 
 8000920:	2311      	movs	r3, #17
 8000922:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	2201      	movs	r2, #1
 8000928:	2163      	movs	r1, #99	; 0x63
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fd06 	bl	800133c <ACCELERO_IO_Write>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2201      	movs	r2, #1
 8000942:	2125      	movs	r1, #37	; 0x25
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fd2b 	bl	80013a0 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	2125      	movs	r1, #37	; 0x25
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fcee 	bl	800133c <ACCELERO_IO_Write>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8000970:	2300      	movs	r3, #0
 8000972:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000974:	4b64      	ldr	r3, [pc, #400]	; (8000b08 <LIS3DSH_ReadACC+0x1a0>)
 8000976:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 800097e:	f107 030b 	add.w	r3, r7, #11
 8000982:	2201      	movs	r2, #1
 8000984:	2124      	movs	r1, #36	; 0x24
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fd0a 	bl	80013a0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2201      	movs	r2, #1
 8000992:	2128      	movs	r1, #40	; 0x28
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fd03 	bl	80013a0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	3301      	adds	r3, #1
 80009a0:	2201      	movs	r2, #1
 80009a2:	2129      	movs	r1, #41	; 0x29
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fcfb 	bl	80013a0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	3302      	adds	r3, #2
 80009b0:	2201      	movs	r2, #1
 80009b2:	212a      	movs	r1, #42	; 0x2a
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fcf3 	bl	80013a0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	3303      	adds	r3, #3
 80009c0:	2201      	movs	r2, #1
 80009c2:	212b      	movs	r1, #43	; 0x2b
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fceb 	bl	80013a0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	3304      	adds	r3, #4
 80009d0:	2201      	movs	r2, #1
 80009d2:	212c      	movs	r1, #44	; 0x2c
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fce3 	bl	80013a0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	3305      	adds	r3, #5
 80009e0:	2201      	movs	r2, #1
 80009e2:	212d      	movs	r1, #45	; 0x2d
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fcdb 	bl	80013a0 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 80009ea:	7afb      	ldrb	r3, [r7, #11]
 80009ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80009f0:	2b20      	cmp	r3, #32
 80009f2:	d854      	bhi.n	8000a9e <LIS3DSH_ReadACC+0x136>
 80009f4:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <LIS3DSH_ReadACC+0x94>)
 80009f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fa:	bf00      	nop
 80009fc:	08000a81 	.word	0x08000a81
 8000a00:	08000a9f 	.word	0x08000a9f
 8000a04:	08000a9f 	.word	0x08000a9f
 8000a08:	08000a9f 	.word	0x08000a9f
 8000a0c:	08000a9f 	.word	0x08000a9f
 8000a10:	08000a9f 	.word	0x08000a9f
 8000a14:	08000a9f 	.word	0x08000a9f
 8000a18:	08000a9f 	.word	0x08000a9f
 8000a1c:	08000a87 	.word	0x08000a87
 8000a20:	08000a9f 	.word	0x08000a9f
 8000a24:	08000a9f 	.word	0x08000a9f
 8000a28:	08000a9f 	.word	0x08000a9f
 8000a2c:	08000a9f 	.word	0x08000a9f
 8000a30:	08000a9f 	.word	0x08000a9f
 8000a34:	08000a9f 	.word	0x08000a9f
 8000a38:	08000a9f 	.word	0x08000a9f
 8000a3c:	08000a8d 	.word	0x08000a8d
 8000a40:	08000a9f 	.word	0x08000a9f
 8000a44:	08000a9f 	.word	0x08000a9f
 8000a48:	08000a9f 	.word	0x08000a9f
 8000a4c:	08000a9f 	.word	0x08000a9f
 8000a50:	08000a9f 	.word	0x08000a9f
 8000a54:	08000a9f 	.word	0x08000a9f
 8000a58:	08000a9f 	.word	0x08000a9f
 8000a5c:	08000a93 	.word	0x08000a93
 8000a60:	08000a9f 	.word	0x08000a9f
 8000a64:	08000a9f 	.word	0x08000a9f
 8000a68:	08000a9f 	.word	0x08000a9f
 8000a6c:	08000a9f 	.word	0x08000a9f
 8000a70:	08000a9f 	.word	0x08000a9f
 8000a74:	08000a9f 	.word	0x08000a9f
 8000a78:	08000a9f 	.word	0x08000a9f
 8000a7c:	08000a99 	.word	0x08000a99
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <LIS3DSH_ReadACC+0x1a0>)
 8000a82:	61bb      	str	r3, [r7, #24]
    break;
 8000a84:	e00c      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <LIS3DSH_ReadACC+0x1a4>)
 8000a88:	61bb      	str	r3, [r7, #24]
    break;
 8000a8a:	e009      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <LIS3DSH_ReadACC+0x1a8>)
 8000a8e:	61bb      	str	r3, [r7, #24]
    break;
 8000a90:	e006      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <LIS3DSH_ReadACC+0x1ac>)
 8000a94:	61bb      	str	r3, [r7, #24]
    break;
 8000a96:	e003      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <LIS3DSH_ReadACC+0x1b0>)
 8000a9a:	61bb      	str	r3, [r7, #24]
    break;
 8000a9c:	e000      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8000a9e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	77fb      	strb	r3, [r7, #31]
 8000aa4:	e027      	b.n	8000af6 <LIS3DSH_ReadACC+0x18e>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	3301      	adds	r3, #1
 8000aac:	3320      	adds	r3, #32
 8000aae:	443b      	add	r3, r7
 8000ab0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	7ffa      	ldrb	r2, [r7, #31]
 8000ab8:	0052      	lsls	r2, r2, #1
 8000aba:	3220      	adds	r2, #32
 8000abc:	443a      	add	r2, r7
 8000abe:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000acc:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad4:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae8:	ee17 2a90 	vmov	r2, s15
 8000aec:	b212      	sxth	r2, r2
 8000aee:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
 8000af2:	3301      	adds	r3, #1
 8000af4:	77fb      	strb	r3, [r7, #31]
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d9d4      	bls.n	8000aa6 <LIS3DSH_ReadACC+0x13e>
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	3d75c28f 	.word	0x3d75c28f
 8000b0c:	3df5c28f 	.word	0x3df5c28f
 8000b10:	3e3851ec 	.word	0x3e3851ec
 8000b14:	3e75c28f 	.word	0x3e75c28f
 8000b18:	3f3ae148 	.word	0x3f3ae148

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 ff2c 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f818 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f000 f8de 	bl	8000ce8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b2c:	f000 f87e 	bl	8000c2c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b30:	f000 f8aa 	bl	8000c88 <MX_I2S3_Init>
  //MX_SPI1_Init();
  MX_USB_HOST_Init();
 8000b34:	f006 fe58 	bl	80077e8 <MX_USB_HOST_Init>
  BSP_LED_Init(LED3);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fa57 	bl	8000fec <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 fa54 	bl	8000fec <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f000 fa51 	bl	8000fec <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f000 fa4e 	bl	8000fec <BSP_LED_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ACCELERO_MEMS_Test();
 8000b50:	f000 f9cd 	bl	8000eee <ACCELERO_MEMS_Test>
 8000b54:	e7fc      	b.n	8000b50 <main+0x34>
	...

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b094      	sub	sp, #80	; 0x50
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	2230      	movs	r2, #48	; 0x30
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f007 f928 	bl	8007dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <SystemClock_Config+0xcc>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <SystemClock_Config+0xcc>)
 8000b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <SystemClock_Config+0xcc>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <SystemClock_Config+0xd0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <SystemClock_Config+0xd0>)
 8000ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <SystemClock_Config+0xd0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bcc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fcf8 	bl	80045d4 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bea:	f000 f97b 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 ff59 	bl	8004ac4 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c18:	f000 f964 	bl	8000ee4 <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3750      	adds	r7, #80	; 0x50
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000

08000c2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <MX_I2C1_Init+0x54>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_I2C1_Init+0x58>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c6a:	f002 fecf 	bl	8003a0c <HAL_I2C_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f936 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000012c 	.word	0x2000012c
 8000c80:	40005400 	.word	0x40005400
 8000c84:	000186a0 	.word	0x000186a0

08000c88 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <MX_I2S3_Init+0x58>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <MX_I2S3_Init+0x5c>)
 8000cb2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000cc8:	f002 ffe4 	bl	8003c94 <HAL_I2S_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000cd2:	f000 f907 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000180 	.word	0x20000180
 8000ce0:	40003c00 	.word	0x40003c00
 8000ce4:	00017700 	.word	0x00017700

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
 8000d02:	4b72      	ldr	r3, [pc, #456]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a71      	ldr	r2, [pc, #452]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b6f      	ldr	r3, [pc, #444]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a6a      	ldr	r2, [pc, #424]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b68      	ldr	r3, [pc, #416]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b64      	ldr	r3, [pc, #400]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a63      	ldr	r2, [pc, #396]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a5c      	ldr	r2, [pc, #368]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a55      	ldr	r2, [pc, #340]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a4e      	ldr	r2, [pc, #312]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2108      	movs	r1, #8
 8000daa:	4849      	ldr	r0, [pc, #292]	; (8000ed0 <MX_GPIO_Init+0x1e8>)
 8000dac:	f001 fa26 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2101      	movs	r1, #1
 8000db4:	4847      	ldr	r0, [pc, #284]	; (8000ed4 <MX_GPIO_Init+0x1ec>)
 8000db6:	f001 fa21 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000dc0:	4845      	ldr	r0, [pc, #276]	; (8000ed8 <MX_GPIO_Init+0x1f0>)
 8000dc2:	f001 fa1b 	bl	80021fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	483c      	ldr	r0, [pc, #240]	; (8000ed0 <MX_GPIO_Init+0x1e8>)
 8000dde:	f000 ff75 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4836      	ldr	r0, [pc, #216]	; (8000ed4 <MX_GPIO_Init+0x1ec>)
 8000dfa:	f000 ff67 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	482e      	ldr	r0, [pc, #184]	; (8000ed4 <MX_GPIO_Init+0x1ec>)
 8000e1a:	f000 ff57 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e22:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	482a      	ldr	r0, [pc, #168]	; (8000edc <MX_GPIO_Init+0x1f4>)
 8000e34:	f000 ff4a 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4825      	ldr	r0, [pc, #148]	; (8000ee0 <MX_GPIO_Init+0x1f8>)
 8000e4c:	f000 ff3e 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e62:	2305      	movs	r3, #5
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	481c      	ldr	r0, [pc, #112]	; (8000ee0 <MX_GPIO_Init+0x1f8>)
 8000e6e:	f000 ff2d 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e72:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e76:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <MX_GPIO_Init+0x1f0>)
 8000e8c:	f000 ff1e 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e90:	2320      	movs	r3, #32
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_GPIO_Init+0x1f0>)
 8000ea4:	f000 ff12 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_GPIO_Init+0x1e8>)
 8000ebe:	f000 ff05 	bl	8001ccc <HAL_GPIO_Init>

}
 8000ec2:	bf00      	nop
 8000ec4:	3730      	adds	r7, #48	; 0x30
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>

08000eee <ACCELERO_MEMS_Test>:
  *         The main objective of this test is to check acceleration on 2 axes X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* Init Accelerometer MEMS */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8000ef2:	f000 fa8f 	bl	8001414 <BSP_ACCELERO_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <ACCELERO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 8000efc:	f7ff fff2 	bl	8000ee4 <Error_Handler>
  }
  

    ACCELERO_ReadAcc();
 8000f00:	f000 f802 	bl	8000f08 <ACCELERO_ReadAcc>

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <ACCELERO_ReadAcc>:
  * @brief  Read Acceleration data.
  * @param  None
  * @retval None
  */
static void ACCELERO_ReadAcc(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
  /* Accelerometer variables */
  int16_t buffer[3] = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	809a      	strh	r2, [r3, #4]
  int16_t xval, yval = 0x00;
 8000f16:	2300      	movs	r3, #0
 8000f18:	81fb      	strh	r3, [r7, #14]
  
  /* Read Acceleration */
  BSP_ACCELERO_GetXYZ(buffer);
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fb05 	bl	800152c <BSP_ACCELERO_GetXYZ>
  
  xval = buffer[0];
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	81bb      	strh	r3, [r7, #12]
  yval = buffer[1];
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	81fb      	strh	r3, [r7, #14]
  
  if((ABS(xval))>(ABS(yval)))
 8000f2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bfb8      	it	lt
 8000f32:	425b      	neglt	r3, r3
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bfb8      	it	lt
 8000f3e:	425b      	neglt	r3, r3
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d91f      	bls.n	8000f86 <ACCELERO_ReadAcc+0x7e>
  {
    if(xval > ThresholdHigh)
 8000f46:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <ACCELERO_ReadAcc+0xdc>)
 8000f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dd06      	ble.n	8000f62 <ACCELERO_ReadAcc+0x5a>
    { 
      /* LED5 On */
      BSP_LED_On(LED5);
 8000f54:	2002      	movs	r0, #2
 8000f56:	f000 f8c1 	bl	80010dc <BSP_LED_On>
      HAL_Delay(10);
 8000f5a:	200a      	movs	r0, #10
 8000f5c:	f000 fd80 	bl	8001a60 <HAL_Delay>
 8000f60:	e030      	b.n	8000fc4 <ACCELERO_ReadAcc+0xbc>
    }
    else if(xval < ThresholdLow)
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <ACCELERO_ReadAcc+0xe0>)
 8000f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f68:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	da06      	bge.n	8000f7e <ACCELERO_ReadAcc+0x76>
    { 
      /* LED4 On */
      BSP_LED_On(LED4);      
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 f8b3 	bl	80010dc <BSP_LED_On>
      HAL_Delay(10);
 8000f76:	200a      	movs	r0, #10
 8000f78:	f000 fd72 	bl	8001a60 <HAL_Delay>
 8000f7c:	e022      	b.n	8000fc4 <ACCELERO_ReadAcc+0xbc>
    }
    else
    { 
      HAL_Delay(10);
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f000 fd6e 	bl	8001a60 <HAL_Delay>
 8000f84:	e01e      	b.n	8000fc4 <ACCELERO_ReadAcc+0xbc>
    }
  }
  else
  {
    if(yval < ThresholdLow)
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <ACCELERO_ReadAcc+0xe0>)
 8000f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	da06      	bge.n	8000fa2 <ACCELERO_ReadAcc+0x9a>
    {
      /* LED6 On */
      BSP_LED_On(LED6);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f8a1 	bl	80010dc <BSP_LED_On>
      HAL_Delay(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f000 fd60 	bl	8001a60 <HAL_Delay>
 8000fa0:	e010      	b.n	8000fc4 <ACCELERO_ReadAcc+0xbc>
    }
    else if(yval > ThresholdHigh)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <ACCELERO_ReadAcc+0xdc>)
 8000fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dd06      	ble.n	8000fbe <ACCELERO_ReadAcc+0xb6>
    {
      /* LED3 On */
      BSP_LED_On(LED3);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 f893 	bl	80010dc <BSP_LED_On>
      HAL_Delay(10);
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f000 fd52 	bl	8001a60 <HAL_Delay>
 8000fbc:	e002      	b.n	8000fc4 <ACCELERO_ReadAcc+0xbc>
    } 
    else
    { 
      HAL_Delay(10);
 8000fbe:	200a      	movs	r0, #10
 8000fc0:	f000 fd4e 	bl	8001a60 <HAL_Delay>
    }
  } 
  
  BSP_LED_Off(LED3);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 f8a3 	bl	8001110 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f8a0 	bl	8001110 <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f000 f89d 	bl	8001110 <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	f000 f89a 	bl	8001110 <BSP_LED_Off>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000068 	.word	0x20000068
 8000fe8:	2000006a 	.word	0x2000006a

08000fec <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10e      	bne.n	800101a <BSP_LED_Init+0x2e>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <BSP_LED_Init+0xe4>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <BSP_LED_Init+0xe4>)
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <BSP_LED_Init+0xe4>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	e034      	b.n	8001084 <BSP_LED_Init+0x98>
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d10e      	bne.n	800103e <BSP_LED_Init+0x52>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <BSP_LED_Init+0xe4>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a29      	ldr	r2, [pc, #164]	; (80010d0 <BSP_LED_Init+0xe4>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <BSP_LED_Init+0xe4>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	e022      	b.n	8001084 <BSP_LED_Init+0x98>
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d10e      	bne.n	8001062 <BSP_LED_Init+0x76>
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <BSP_LED_Init+0xe4>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <BSP_LED_Init+0xe4>)
 800104e:	f043 0308 	orr.w	r3, r3, #8
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <BSP_LED_Init+0xe4>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	e010      	b.n	8001084 <BSP_LED_Init+0x98>
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d10d      	bne.n	8001084 <BSP_LED_Init+0x98>
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <BSP_LED_Init+0xe4>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <BSP_LED_Init+0xe4>)
 8001072:	f043 0308 	orr.w	r3, r3, #8
 8001076:	6313      	str	r3, [r2, #48]	; 0x30
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <BSP_LED_Init+0xe4>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <BSP_LED_Init+0xe8>)
 8001088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001092:	2301      	movs	r3, #1
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001096:	2302      	movs	r3, #2
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <BSP_LED_Init+0xec>)
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	f107 021c 	add.w	r2, r7, #28
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fe0f 	bl	8001ccc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <BSP_LED_Init+0xec>)
 80010b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <BSP_LED_Init+0xe8>)
 80010ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010be:	2200      	movs	r2, #0
 80010c0:	4619      	mov	r1, r3
 80010c2:	f001 f89b 	bl	80021fc <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	3730      	adds	r7, #48	; 0x30
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	08007fe4 	.word	0x08007fe4
 80010d8:	2000006c 	.word	0x2000006c

080010dc <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <BSP_LED_On+0x2c>)
 80010ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <BSP_LED_On+0x30>)
 80010f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f6:	2201      	movs	r2, #1
 80010f8:	4619      	mov	r1, r3
 80010fa:	f001 f87f 	bl	80021fc <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000006c 	.word	0x2000006c
 800110c:	08007fe4 	.word	0x08007fe4

08001110 <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <BSP_LED_Off+0x2c>)
 800111e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <BSP_LED_Off+0x30>)
 8001126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	f001 f865 	bl	80021fc <HAL_GPIO_WritePin>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000006c 	.word	0x2000006c
 8001140:	08007fe4 	.word	0x08007fe4

08001144 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001148:	4819      	ldr	r0, [pc, #100]	; (80011b0 <SPIx_Init+0x6c>)
 800114a:	f004 fa5a 	bl	8005602 <HAL_SPI_GetState>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d12a      	bne.n	80011aa <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <SPIx_Init+0x6c>)
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <SPIx_Init+0x70>)
 8001158:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <SPIx_Init+0x6c>)
 800115c:	2218      	movs	r2, #24
 800115e:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <SPIx_Init+0x6c>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <SPIx_Init+0x6c>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <SPIx_Init+0x6c>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <SPIx_Init+0x6c>)
 8001174:	2200      	movs	r2, #0
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <SPIx_Init+0x6c>)
 800117a:	2207      	movs	r2, #7
 800117c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <SPIx_Init+0x6c>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <SPIx_Init+0x6c>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <SPIx_Init+0x6c>)
 800118c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001190:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <SPIx_Init+0x6c>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <SPIx_Init+0x6c>)
 800119a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800119e:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 80011a0:	f000 f836 	bl	8001210 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <SPIx_Init+0x6c>)
 80011a6:	f003 ffd9 	bl	800515c <HAL_SPI_Init>
  }
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001c8 	.word	0x200001c8
 80011b4:	40013000 	.word	0x40013000

080011b8 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <SPIx_WriteRead+0x38>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f107 020f 	add.w	r2, r7, #15
 80011ce:	1df9      	adds	r1, r7, #7
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	4807      	ldr	r0, [pc, #28]	; (80011f4 <SPIx_WriteRead+0x3c>)
 80011d6:	f004 f872 	bl	80052be <HAL_SPI_TransmitReceive>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80011e0:	f000 f80a 	bl	80011f8 <SPIx_Error>
  }
  
  return receivedbyte;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000007c 	.word	0x2000007c
 80011f4:	200001c8 	.word	0x200001c8

080011f8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication bus */
  HAL_SPI_DeInit(&SpiHandle);
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <SPIx_Error+0x14>)
 80011fe:	f004 f836 	bl	800526e <HAL_SPI_DeInit>
  
  /* Re-Initialize the SPI communication bus */
  SPIx_Init();
 8001202:	f7ff ff9f 	bl	8001144 <SPIx_Init>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200001c8 	.word	0x200001c8

08001210 <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <SPIx_MspInit+0x68>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <SPIx_MspInit+0x68>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <SPIx_MspInit+0x68>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <SPIx_MspInit+0x68>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <SPIx_MspInit+0x68>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <SPIx_MspInit+0x68>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 800124e:	23e0      	movs	r3, #224	; 0xe0
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8001256:	2302      	movs	r3, #2
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800125e:	2305      	movs	r3, #5
 8001260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4619      	mov	r1, r3
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <SPIx_MspInit+0x6c>)
 800126a:	f000 fd2f 	bl	8001ccc <HAL_GPIO_Init>
}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000

08001280 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <ACCELERO_IO_Init+0x54>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <ACCELERO_IO_Init+0x54>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <ACCELERO_IO_Init+0x54>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 80012a2:	2308      	movs	r3, #8
 80012a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80012ae:	2301      	movs	r3, #1
 80012b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <ACCELERO_IO_Init+0x58>)
 80012b8:	f000 fd08 	bl	8001ccc <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 80012bc:	2201      	movs	r2, #1
 80012be:	2108      	movs	r1, #8
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <ACCELERO_IO_Init+0x58>)
 80012c2:	f000 ff9b 	bl	80021fc <HAL_GPIO_WritePin>
  
  SPIx_Init();
 80012c6:	f7ff ff3d 	bl	8001144 <SPIx_Init>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000

080012dc <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <ACCELERO_IO_ITConfig+0x58>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <ACCELERO_IO_ITConfig+0x58>)
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <ACCELERO_IO_ITConfig+0x58>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 80012fe:	2302      	movs	r3, #2
 8001300:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001302:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001306:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4808      	ldr	r0, [pc, #32]	; (8001338 <ACCELERO_IO_ITConfig+0x5c>)
 8001316:	f000 fcd9 	bl	8001ccc <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	210f      	movs	r1, #15
 800131e:	2007      	movs	r0, #7
 8001320:	f000 fc9d 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8001324:	2007      	movs	r0, #7
 8001326:	f000 fcb6 	bl	8001c96 <HAL_NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40021000 	.word	0x40021000

0800133c <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
 8001348:	4613      	mov	r3, r2
 800134a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800134c:	883b      	ldrh	r3, [r7, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d903      	bls.n	800135a <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001358:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 800135a:	2200      	movs	r2, #0
 800135c:	2108      	movs	r1, #8
 800135e:	480f      	ldr	r0, [pc, #60]	; (800139c <ACCELERO_IO_Write+0x60>)
 8001360:	f000 ff4c 	bl	80021fc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff26 	bl	80011b8 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800136c:	e00a      	b.n	8001384 <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff20 	bl	80011b8 <SPIx_WriteRead>
    NumByteToWrite--;
 8001378:	883b      	ldrh	r3, [r7, #0]
 800137a:	3b01      	subs	r3, #1
 800137c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3301      	adds	r3, #1
 8001382:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8001384:	883b      	ldrh	r3, [r7, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f1      	bne.n	800136e <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 800138a:	2201      	movs	r2, #1
 800138c:	2108      	movs	r1, #8
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <ACCELERO_IO_Write+0x60>)
 8001390:	f000 ff34 	bl	80021fc <HAL_GPIO_WritePin>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000

080013a0 <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
 80013ac:	4613      	mov	r3, r2
 80013ae:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80013b0:	883b      	ldrh	r3, [r7, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d904      	bls.n	80013c0 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80013bc:	70fb      	strb	r3, [r7, #3]
 80013be:	e003      	b.n	80013c8 <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 80013c8:	2200      	movs	r2, #0
 80013ca:	2108      	movs	r1, #8
 80013cc:	4810      	ldr	r0, [pc, #64]	; (8001410 <ACCELERO_IO_Read+0x70>)
 80013ce:	f000 ff15 	bl	80021fc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff feef 	bl	80011b8 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80013da:	e00c      	b.n	80013f6 <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff feeb 	bl	80011b8 <SPIx_WriteRead>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80013ea:	883b      	ldrh	r3, [r7, #0]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3301      	adds	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80013f6:	883b      	ldrh	r3, [r7, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1ef      	bne.n	80013dc <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 80013fc:	2201      	movs	r2, #1
 80013fe:	2108      	movs	r1, #8
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <ACCELERO_IO_Read+0x70>)
 8001402:	f000 fefb 	bl	80021fc <HAL_GPIO_WritePin>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000

08001414 <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 800141e:	2300      	movs	r3, #0
 8001420:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 8001422:	2300      	movs	r3, #0
 8001424:	723b      	strb	r3, [r7, #8]
 8001426:	2300      	movs	r3, #0
 8001428:	727b      	strb	r3, [r7, #9]
 800142a:	2300      	movs	r3, #0
 800142c:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <BSP_ACCELERO_Init+0x10c>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4798      	blx	r3
 8001434:	4603      	mov	r3, r0
 8001436:	2b3b      	cmp	r3, #59	; 0x3b
 8001438:	d138      	bne.n	80014ac <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 800143a:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <BSP_ACCELERO_Init+0x110>)
 800143c:	4a38      	ldr	r2, [pc, #224]	; (8001520 <BSP_ACCELERO_Init+0x10c>)
 800143e:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8001440:	2340      	movs	r3, #64	; 0x40
 8001442:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 8001444:	2300      	movs	r3, #0
 8001446:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 8001448:	2307      	movs	r3, #7
 800144a:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 8001450:	2300      	movs	r3, #0
 8001452:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001454:	7b7a      	ldrb	r2, [r7, #13]
 8001456:	7b3b      	ldrb	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 800145c:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 800145e:	4313      	orrs	r3, r2
 8001460:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 8001462:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001464:	4313      	orrs	r3, r2
 8001466:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 8001468:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 800146a:	4313      	orrs	r3, r2
 800146c:	b2db      	uxtb	r3, r3
 800146e:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <BSP_ACCELERO_Init+0x110>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	8aba      	ldrh	r2, [r7, #20]
 8001478:	4610      	mov	r0, r2
 800147a:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 800147c:	2320      	movs	r3, #32
 800147e:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8001480:	2301      	movs	r3, #1
 8001482:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 8001484:	230c      	movs	r3, #12
 8001486:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8001488:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 800148a:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 800148c:	4313      	orrs	r3, r2
 800148e:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 8001490:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8001492:	4313      	orrs	r3, r2
 8001494:	b2db      	uxtb	r3, r3
 8001496:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <BSP_ACCELERO_Init+0x110>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	8aba      	ldrh	r2, [r7, #20]
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	4610      	mov	r0, r2
 80014a4:	4798      	blx	r3

    ret = ACCELERO_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
 80014aa:	e034      	b.n	8001516 <BSP_ACCELERO_Init+0x102>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <BSP_ACCELERO_Init+0x114>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4798      	blx	r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b3f      	cmp	r3, #63	; 0x3f
 80014b6:	d12c      	bne.n	8001512 <BSP_ACCELERO_Init+0xfe>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <BSP_ACCELERO_Init+0x110>)
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <BSP_ACCELERO_Init+0x114>)
 80014bc:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 80014be:	2360      	movs	r3, #96	; 0x60
 80014c0:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 80014c2:	2307      	movs	r3, #7
 80014c4:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 80014ce:	2300      	movs	r3, #0
 80014d0:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 80014d2:	2300      	movs	r3, #0
 80014d4:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 80014d6:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 80014d8:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 80014da:	4313      	orrs	r3, r2
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 80014e0:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 80014e2:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 80014e8:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 80014ee:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	8abb      	ldrh	r3, [r7, #20]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <BSP_ACCELERO_Init+0x110>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	8aba      	ldrh	r2, [r7, #20]
 8001508:	4610      	mov	r0, r2
 800150a:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	75fb      	strb	r3, [r7, #23]
 8001510:	e001      	b.n	8001516 <BSP_ACCELERO_Init+0x102>
  }

  else
  {
    ret = ACCELERO_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8001516:	7dfb      	ldrb	r3, [r7, #23]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	20000220 	.word	0x20000220
 8001528:	20000034 	.word	0x20000034

0800152c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	81fb      	strh	r3, [r7, #14]
  
  if(AcceleroDrv->GetXYZ != NULL)
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <BSP_ACCELERO_GetXYZ+0x50>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	2b00      	cmp	r3, #0
 8001540:	d018      	beq.n	8001574 <BSP_ACCELERO_GetXYZ+0x48>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <BSP_ACCELERO_GetXYZ+0x50>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <BSP_ACCELERO_GetXYZ+0x50>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <BSP_ACCELERO_GetXYZ+0x54>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10e      	bne.n	8001574 <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	801a      	strh	r2, [r3, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	425b      	negs	r3, r3
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3302      	adds	r3, #2
 8001570:	b212      	sxth	r2, r2
 8001572:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000220 	.word	0x20000220
 8001580:	20000000 	.word	0x20000000

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <HAL_MspInit+0x4c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015c2:	2007      	movs	r0, #7
 80015c4:	f000 fb40 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_I2C_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12c      	bne.n	8001650 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_I2C_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_I2C_MspInit+0x88>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_I2C_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001612:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001618:	2312      	movs	r3, #18
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161c:	2301      	movs	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001624:	2304      	movs	r3, #4
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <HAL_I2C_MspInit+0x8c>)
 8001630:	f000 fb4c 	bl	8001ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_I2C_MspInit+0x88>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_I2C_MspInit+0x88>)
 800163e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001642:	6413      	str	r3, [r2, #64]	; 0x40
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_I2C_MspInit+0x88>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40005400 	.word	0x40005400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400

08001664 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a31      	ldr	r2, [pc, #196]	; (8001754 <HAL_I2S_MspInit+0xf0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d15a      	bne.n	800174a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001694:	2301      	movs	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001698:	23c0      	movs	r3, #192	; 0xc0
 800169a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800169c:	2302      	movs	r3, #2
 800169e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fc19 	bl	8004edc <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80016b0:	f7ff fc18 	bl	8000ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_I2S_MspInit+0xf4>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a26      	ldr	r2, [pc, #152]	; (8001758 <HAL_I2S_MspInit+0xf4>)
 80016be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_I2S_MspInit+0xf4>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_I2S_MspInit+0xf4>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_I2S_MspInit+0xf4>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_I2S_MspInit+0xf4>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_I2S_MspInit+0xf4>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_I2S_MspInit+0xf4>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_I2S_MspInit+0xf4>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001708:	2310      	movs	r3, #16
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001718:	2306      	movs	r3, #6
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	480e      	ldr	r0, [pc, #56]	; (800175c <HAL_I2S_MspInit+0xf8>)
 8001724:	f000 fad2 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001728:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800173a:	2306      	movs	r3, #6
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	4806      	ldr	r0, [pc, #24]	; (8001760 <HAL_I2S_MspInit+0xfc>)
 8001746:	f000 fac1 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3738      	adds	r7, #56	; 0x38
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40003c00 	.word	0x40003c00
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020800 	.word	0x40020800

08001764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_SPI_MspInit+0x84>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12b      	bne.n	80017de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_SPI_MspInit+0x88>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_SPI_MspInit+0x88>)
 8001790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_SPI_MspInit+0x88>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_SPI_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <HAL_SPI_MspInit+0x88>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_SPI_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017be:	23e0      	movs	r3, #224	; 0xe0
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ce:	2305      	movs	r3, #5
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_SPI_MspInit+0x8c>)
 80017da:	f000 fa77 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40013000 	.word	0x40013000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000

080017f4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_SPI_MspDeInit+0x30>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d109      	bne.n	800181a <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_SPI_MspDeInit+0x34>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_SPI_MspDeInit+0x34>)
 800180c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8001812:	21e0      	movs	r1, #224	; 0xe0
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <HAL_SPI_MspDeInit+0x38>)
 8001816:	f000 fbf5 	bl	8002004 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40013000 	.word	0x40013000
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler+0x4>

08001836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <MemManage_Handler+0x4>

08001842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler+0x4>

0800184e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187c:	f000 f8d0 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <OTG_FS_IRQHandler+0x10>)
 800188a:	f000 ff3b 	bl	8002704 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000608 	.word	0x20000608

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f006 fa3e 	bl	8007d48 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20020000 	.word	0x20020000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20000224 	.word	0x20000224
 8001900:	20000920 	.word	0x20000920

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001952:	f7ff ffd7 	bl	8001904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f006 f9fd 	bl	8007d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff f8df 	bl	8000b1c <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800196c:	08008014 	.word	0x08008014
  ldr r2, =_sbss
 8001970:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001974:	2000091c 	.word	0x2000091c

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_Init+0x40>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_Init+0x40>)
 8001992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_Init+0x40>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f94f 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fde8 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f967 	bl	8001cb2 <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 f92f 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000080 	.word	0x20000080
 8001a18:	20000088 	.word	0x20000088
 8001a1c:	20000084 	.word	0x20000084

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000088 	.word	0x20000088
 8001a44:	20000228 	.word	0x20000228

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000228 	.word	0x20000228

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000088 	.word	0x20000088

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4907      	ldr	r1, [pc, #28]	; (8001b44 <__NVIC_EnableIRQ+0x38>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff8e 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff29 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff3e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff8e 	bl	8001b9c <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff31 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e16b      	b.n	8001fc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 815a 	bne.w	8001fba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80b4 	beq.w	8001fba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a5f      	ldr	r2, [pc, #380]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a5b      	ldr	r2, [pc, #364]	; (8001fdc <HAL_GPIO_Init+0x310>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_GPIO_Init+0x314>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d02b      	beq.n	8001ef2 <HAL_GPIO_Init+0x226>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a51      	ldr	r2, [pc, #324]	; (8001fe4 <HAL_GPIO_Init+0x318>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d025      	beq.n	8001eee <HAL_GPIO_Init+0x222>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a50      	ldr	r2, [pc, #320]	; (8001fe8 <HAL_GPIO_Init+0x31c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01f      	beq.n	8001eea <HAL_GPIO_Init+0x21e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d019      	beq.n	8001ee6 <HAL_GPIO_Init+0x21a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4e      	ldr	r2, [pc, #312]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0x216>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4d      	ldr	r2, [pc, #308]	; (8001ff4 <HAL_GPIO_Init+0x328>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00d      	beq.n	8001ede <HAL_GPIO_Init+0x212>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4c      	ldr	r2, [pc, #304]	; (8001ff8 <HAL_GPIO_Init+0x32c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <HAL_GPIO_Init+0x20e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_GPIO_Init+0x330>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_GPIO_Init+0x20a>
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	e00e      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	e00c      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001eda:	2306      	movs	r3, #6
 8001edc:	e00a      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	4935      	ldr	r1, [pc, #212]	; (8001fdc <HAL_GPIO_Init+0x310>)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f36:	4a32      	ldr	r2, [pc, #200]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	f67f ae90 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40021400 	.word	0x40021400
 8001ff8:	40021800 	.word	0x40021800
 8001ffc:	40021c00 	.word	0x40021c00
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e0cd      	b.n	80021bc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002020:	2201      	movs	r2, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	429a      	cmp	r2, r3
 8002038:	f040 80bd 	bne.w	80021b6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800203c:	4a65      	ldr	r2, [pc, #404]	; (80021d4 <HAL_GPIO_DeInit+0x1d0>)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	4013      	ands	r3, r2
 800205c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a5d      	ldr	r2, [pc, #372]	; (80021d8 <HAL_GPIO_DeInit+0x1d4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d02b      	beq.n	80020be <HAL_GPIO_DeInit+0xba>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a5c      	ldr	r2, [pc, #368]	; (80021dc <HAL_GPIO_DeInit+0x1d8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d025      	beq.n	80020ba <HAL_GPIO_DeInit+0xb6>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a5b      	ldr	r2, [pc, #364]	; (80021e0 <HAL_GPIO_DeInit+0x1dc>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <HAL_GPIO_DeInit+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a5a      	ldr	r2, [pc, #360]	; (80021e4 <HAL_GPIO_DeInit+0x1e0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_DeInit+0xae>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a59      	ldr	r2, [pc, #356]	; (80021e8 <HAL_GPIO_DeInit+0x1e4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_DeInit+0xaa>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a58      	ldr	r2, [pc, #352]	; (80021ec <HAL_GPIO_DeInit+0x1e8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_DeInit+0xa6>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a57      	ldr	r2, [pc, #348]	; (80021f0 <HAL_GPIO_DeInit+0x1ec>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_DeInit+0xa2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a56      	ldr	r2, [pc, #344]	; (80021f4 <HAL_GPIO_DeInit+0x1f0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_DeInit+0x9e>
 800209e:	2307      	movs	r3, #7
 80020a0:	e00e      	b.n	80020c0 <HAL_GPIO_DeInit+0xbc>
 80020a2:	2308      	movs	r3, #8
 80020a4:	e00c      	b.n	80020c0 <HAL_GPIO_DeInit+0xbc>
 80020a6:	2306      	movs	r3, #6
 80020a8:	e00a      	b.n	80020c0 <HAL_GPIO_DeInit+0xbc>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_DeInit+0xbc>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_DeInit+0xbc>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_DeInit+0xbc>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_DeInit+0xbc>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_DeInit+0xbc>
 80020be:	2300      	movs	r3, #0
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d132      	bne.n	8002136 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020d0:	4b49      	ldr	r3, [pc, #292]	; (80021f8 <HAL_GPIO_DeInit+0x1f4>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	4947      	ldr	r1, [pc, #284]	; (80021f8 <HAL_GPIO_DeInit+0x1f4>)
 80020da:	4013      	ands	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80020de:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_GPIO_DeInit+0x1f4>)
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4944      	ldr	r1, [pc, #272]	; (80021f8 <HAL_GPIO_DeInit+0x1f4>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80020ec:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <HAL_GPIO_DeInit+0x1f4>)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4940      	ldr	r1, [pc, #256]	; (80021f8 <HAL_GPIO_DeInit+0x1f4>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80020fa:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <HAL_GPIO_DeInit+0x1f4>)
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43db      	mvns	r3, r3
 8002102:	493d      	ldr	r1, [pc, #244]	; (80021f8 <HAL_GPIO_DeInit+0x1f4>)
 8002104:	4013      	ands	r3, r2
 8002106:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002118:	4a2e      	ldr	r2, [pc, #184]	; (80021d4 <HAL_GPIO_DeInit+0x1d0>)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	43da      	mvns	r2, r3
 8002128:	482a      	ldr	r0, [pc, #168]	; (80021d4 <HAL_GPIO_DeInit+0x1d0>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	400a      	ands	r2, r1
 8002130:	3302      	adds	r3, #2
 8002132:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2103      	movs	r1, #3
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	220f      	movs	r2, #15
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	08d2      	lsrs	r2, r2, #3
 800216c:	4019      	ands	r1, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3208      	adds	r2, #8
 8002172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2103      	movs	r1, #3
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	2101      	movs	r1, #1
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	401a      	ands	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2103      	movs	r1, #3
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3301      	adds	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f af2e 	bls.w	8002020 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40013800 	.word	0x40013800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020c00 	.word	0x40020c00
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40021400 	.word	0x40021400
 80021f0:	40021800 	.word	0x40021800
 80021f4:	40021c00 	.word	0x40021c00
 80021f8:	40013c00 	.word	0x40013c00

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002218:	e003      	b.n	8002222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	619a      	str	r2, [r3, #24]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800222e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002230:	b08f      	sub	sp, #60	; 0x3c
 8002232:	af0a      	add	r7, sp, #40	; 0x28
 8002234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e054      	b.n	80022ea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f005 fb18 	bl	8007890 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2203      	movs	r2, #3
 8002264:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fb0a 	bl	8005898 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	687e      	ldr	r6, [r7, #4]
 800228c:	466d      	mov	r5, sp
 800228e:	f106 0410 	add.w	r4, r6, #16
 8002292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800229e:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a2:	1d33      	adds	r3, r6, #4
 80022a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a6:	6838      	ldr	r0, [r7, #0]
 80022a8:	f003 fa84 	bl	80057b4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 fb01 	bl	80058ba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	687e      	ldr	r6, [r7, #4]
 80022c0:	466d      	mov	r5, sp
 80022c2:	f106 0410 	add.w	r4, r6, #16
 80022c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d6:	1d33      	adds	r3, r6, #4
 80022d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022da:	6838      	ldr	r0, [r7, #0]
 80022dc:	f003 fc8a 	bl	8005bf4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022f2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80022f2:	b590      	push	{r4, r7, lr}
 80022f4:	b089      	sub	sp, #36	; 0x24
 80022f6:	af04      	add	r7, sp, #16
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	4608      	mov	r0, r1
 80022fc:	4611      	mov	r1, r2
 80022fe:	461a      	mov	r2, r3
 8002300:	4603      	mov	r3, r0
 8002302:	70fb      	strb	r3, [r7, #3]
 8002304:	460b      	mov	r3, r1
 8002306:	70bb      	strb	r3, [r7, #2]
 8002308:	4613      	mov	r3, r2
 800230a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_HCD_HC_Init+0x28>
 8002316:	2302      	movs	r3, #2
 8002318:	e076      	b.n	8002408 <HAL_HCD_HC_Init+0x116>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	333d      	adds	r3, #61	; 0x3d
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3338      	adds	r3, #56	; 0x38
 8002342:	787a      	ldrb	r2, [r7, #1]
 8002344:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3340      	adds	r3, #64	; 0x40
 8002354:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002356:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3339      	adds	r3, #57	; 0x39
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	333f      	adds	r3, #63	; 0x3f
 8002378:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800237c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	78ba      	ldrb	r2, [r7, #2]
 8002382:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002386:	b2d0      	uxtb	r0, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	333a      	adds	r3, #58	; 0x3a
 8002394:	4602      	mov	r2, r0
 8002396:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002398:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da09      	bge.n	80023b4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	333b      	adds	r3, #59	; 0x3b
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e008      	b.n	80023c6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	333b      	adds	r3, #59	; 0x3b
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	333c      	adds	r3, #60	; 0x3c
 80023d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023d8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	787c      	ldrb	r4, [r7, #1]
 80023e0:	78ba      	ldrb	r2, [r7, #2]
 80023e2:	78f9      	ldrb	r1, [r7, #3]
 80023e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	4623      	mov	r3, r4
 80023f6:	f003 fd59 	bl	8005eac <USB_HC_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	bd90      	pop	{r4, r7, pc}

08002410 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_HCD_HC_Halt+0x1e>
 800242a:	2302      	movs	r3, #2
 800242c:	e00f      	b.n	800244e <HAL_HCD_HC_Halt+0x3e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f003 ffa9 	bl	8006396 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4603      	mov	r3, r0
 8002468:	70fb      	strb	r3, [r7, #3]
 800246a:	460b      	mov	r3, r1
 800246c:	70bb      	strb	r3, [r7, #2]
 800246e:	4613      	mov	r3, r2
 8002470:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	333b      	adds	r3, #59	; 0x3b
 8002480:	78ba      	ldrb	r2, [r7, #2]
 8002482:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	333f      	adds	r3, #63	; 0x3f
 8002492:	787a      	ldrb	r2, [r7, #1]
 8002494:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002496:	7c3b      	ldrb	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d112      	bne.n	80024c2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3342      	adds	r3, #66	; 0x42
 80024aa:	2203      	movs	r2, #3
 80024ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	333d      	adds	r3, #61	; 0x3d
 80024bc:	7f3a      	ldrb	r2, [r7, #28]
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e008      	b.n	80024d4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	3342      	adds	r3, #66	; 0x42
 80024d0:	2202      	movs	r2, #2
 80024d2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	f200 80c6 	bhi.w	8002668 <HAL_HCD_HC_SubmitRequest+0x210>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	08002655 	.word	0x08002655
 80024ec:	08002559 	.word	0x08002559
 80024f0:	080025d7 	.word	0x080025d7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024f4:	7c3b      	ldrb	r3, [r7, #16]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	f040 80b8 	bne.w	800266c <HAL_HCD_HC_SubmitRequest+0x214>
 80024fc:	78bb      	ldrb	r3, [r7, #2]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 80b4 	bne.w	800266c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002504:	8b3b      	ldrh	r3, [r7, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d108      	bne.n	800251c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	3355      	adds	r3, #85	; 0x55
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3355      	adds	r3, #85	; 0x55
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3342      	adds	r3, #66	; 0x42
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002542:	e093      	b.n	800266c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3342      	adds	r3, #66	; 0x42
 8002552:	2202      	movs	r2, #2
 8002554:	701a      	strb	r2, [r3, #0]
      break;
 8002556:	e089      	b.n	800266c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002558:	78bb      	ldrb	r3, [r7, #2]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d11d      	bne.n	800259a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3355      	adds	r3, #85	; 0x55
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	3342      	adds	r3, #66	; 0x42
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002584:	e073      	b.n	800266e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3342      	adds	r3, #66	; 0x42
 8002594:	2202      	movs	r2, #2
 8002596:	701a      	strb	r2, [r3, #0]
      break;
 8002598:	e069      	b.n	800266e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3354      	adds	r3, #84	; 0x54
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	3342      	adds	r3, #66	; 0x42
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
      break;
 80025c0:	e055      	b.n	800266e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	3342      	adds	r3, #66	; 0x42
 80025d0:	2202      	movs	r2, #2
 80025d2:	701a      	strb	r2, [r3, #0]
      break;
 80025d4:	e04b      	b.n	800266e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025d6:	78bb      	ldrb	r3, [r7, #2]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11d      	bne.n	8002618 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3355      	adds	r3, #85	; 0x55
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3342      	adds	r3, #66	; 0x42
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002602:	e034      	b.n	800266e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3342      	adds	r3, #66	; 0x42
 8002612:	2202      	movs	r2, #2
 8002614:	701a      	strb	r2, [r3, #0]
      break;
 8002616:	e02a      	b.n	800266e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3354      	adds	r3, #84	; 0x54
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3342      	adds	r3, #66	; 0x42
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
      break;
 800263e:	e016      	b.n	800266e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3342      	adds	r3, #66	; 0x42
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
      break;
 8002652:	e00c      	b.n	800266e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3342      	adds	r3, #66	; 0x42
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
      break;
 8002666:	e002      	b.n	800266e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002668:	bf00      	nop
 800266a:	e000      	b.n	800266e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800266c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	3344      	adds	r3, #68	; 0x44
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	8b3a      	ldrh	r2, [r7, #24]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	202c      	movs	r0, #44	; 0x2c
 8002688:	fb00 f303 	mul.w	r3, r0, r3
 800268c:	440b      	add	r3, r1
 800268e:	334c      	adds	r3, #76	; 0x4c
 8002690:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3360      	adds	r3, #96	; 0x60
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3350      	adds	r3, #80	; 0x50
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	3339      	adds	r3, #57	; 0x39
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3361      	adds	r3, #97	; 0x61
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	222c      	movs	r2, #44	; 0x2c
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	3338      	adds	r3, #56	; 0x38
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	18d1      	adds	r1, r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	f003 fcfc 	bl	80060f0 <USB_HC_StartXfer>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop

08002704 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f003 fa27 	bl	8005b6e <USB_GetMode>
 8002720:	4603      	mov	r3, r0
 8002722:	2b01      	cmp	r3, #1
 8002724:	f040 80f6 	bne.w	8002914 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 fa0b 	bl	8005b48 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80ec 	beq.w	8002912 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fa02 	bl	8005b48 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800274e:	d104      	bne.n	800275a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002758:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f003 f9f2 	bl	8005b48 <USB_ReadInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800276e:	d104      	bne.n	800277a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002778:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 f9e2 	bl	8005b48 <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800278a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800278e:	d104      	bne.n	800279a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002798:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 f9d2 	bl	8005b48 <USB_ReadInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d103      	bne.n	80027b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2202      	movs	r2, #2
 80027b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 f9c4 	bl	8005b48 <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ca:	d11c      	bne.n	8002806 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80027e6:	2110      	movs	r1, #16
 80027e8:	6938      	ldr	r0, [r7, #16]
 80027ea:	f003 f8b3 	bl	8005954 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80027ee:	6938      	ldr	r0, [r7, #16]
 80027f0:	f003 f8e4 	bl	80059bc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 faba 	bl	8005d74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f005 f8c3 	bl	800798c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f003 f99c 	bl	8005b48 <USB_ReadInterrupts>
 8002810:	4603      	mov	r3, r0
 8002812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002816:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800281a:	d102      	bne.n	8002822 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f001 f882 	bl	8003926 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f003 f98e 	bl	8005b48 <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b08      	cmp	r3, #8
 8002834:	d106      	bne.n	8002844 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f005 f88c 	bl	8007954 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2208      	movs	r2, #8
 8002842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 f97d 	bl	8005b48 <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b10      	cmp	r3, #16
 8002856:	d101      	bne.n	800285c <HAL_HCD_IRQHandler+0x158>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_HCD_IRQHandler+0x15a>
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d012      	beq.n	8002888 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0210 	bic.w	r2, r2, #16
 8002870:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 ff85 	bl	8003782 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0210 	orr.w	r2, r2, #16
 8002886:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f003 f95b 	bl	8005b48 <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800289c:	d13a      	bne.n	8002914 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 fd66 	bl	8006374 <USB_HC_ReadInterrupt>
 80028a8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e025      	b.n	80028fc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d018      	beq.n	80028f6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028da:	d106      	bne.n	80028ea <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f88f 	bl	8002a06 <HCD_HC_IN_IRQHandler>
 80028e8:	e005      	b.n	80028f6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4619      	mov	r1, r3
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fbdd 	bl	80030b0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	429a      	cmp	r2, r3
 8002904:	d3d4      	bcc.n	80028b0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290e:	615a      	str	r2, [r3, #20]
 8002910:	e000      	b.n	8002914 <HAL_HCD_IRQHandler+0x210>
      return;
 8002912:	bf00      	nop
    }
  }
}
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_HCD_Start+0x16>
 800292c:	2302      	movs	r3, #2
 800292e:	e013      	b.n	8002958 <HAL_HCD_Start+0x3e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2101      	movs	r1, #1
 800293e:	4618      	mov	r0, r3
 8002940:	f003 fa52 	bl	8005de8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f002 ff94 	bl	8005876 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_HCD_Stop+0x16>
 8002972:	2302      	movs	r3, #2
 8002974:	e00d      	b.n	8002992 <HAL_HCD_Stop+0x32>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fe40 	bl	8006608 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3360      	adds	r3, #96	; 0x60
 80029b4:	781b      	ldrb	r3, [r3, #0]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3350      	adds	r3, #80	; 0x50
 80029dc:	681b      	ldr	r3, [r3, #0]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fa46 	bl	8005e88 <USB_GetCurrentFrame>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d11a      	bne.n	8002a6c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	461a      	mov	r2, r3
 8002a44:	2304      	movs	r3, #4
 8002a46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3361      	adds	r3, #97	; 0x61
 8002a56:	2206      	movs	r2, #6
 8002a58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 fc96 	bl	8006396 <USB_HC_Halt>
 8002a6a:	e0af      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a82:	d11b      	bne.n	8002abc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	461a      	mov	r2, r3
 8002a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3361      	adds	r3, #97	; 0x61
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 fc6e 	bl	8006396 <USB_HC_Halt>
 8002aba:	e087      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d109      	bne.n	8002ae6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	6093      	str	r3, [r2, #8]
 8002ae4:	e072      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d11a      	bne.n	8002b32 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3361      	adds	r3, #97	; 0x61
 8002b1c:	2205      	movs	r2, #5
 8002b1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fc33 	bl	8006396 <USB_HC_Halt>
 8002b30:	e04c      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b48:	d11b      	bne.n	8002b82 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b56:	461a      	mov	r2, r3
 8002b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	3361      	adds	r3, #97	; 0x61
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 fc0b 	bl	8006396 <USB_HC_Halt>
 8002b80:	e024      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b80      	cmp	r3, #128	; 0x80
 8002b96:	d119      	bne.n	8002bcc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3361      	adds	r3, #97	; 0x61
 8002bb8:	2206      	movs	r2, #6
 8002bba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fbe5 	bl	8006396 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be2:	d112      	bne.n	8002c0a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fbd1 	bl	8006396 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	461a      	mov	r2, r3
 8002c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c06:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c08:	e24e      	b.n	80030a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	f040 80df 	bne.w	8002de0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	3348      	adds	r3, #72	; 0x48
 8002c38:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0159      	lsls	r1, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	440b      	add	r3, r1
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c4c:	1ad2      	subs	r2, r2, r3
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	202c      	movs	r0, #44	; 0x2c
 8002c54:	fb00 f303 	mul.w	r3, r0, r3
 8002c58:	440b      	add	r3, r1
 8002c5a:	3350      	adds	r3, #80	; 0x50
 8002c5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3361      	adds	r3, #97	; 0x61
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	335c      	adds	r3, #92	; 0x5c
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2301      	movs	r3, #1
 8002c92:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	333f      	adds	r3, #63	; 0x3f
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	333f      	adds	r3, #63	; 0x3f
 8002cb6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d111      	bne.n	8002ce0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 fb65 	bl	8006396 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2310      	movs	r3, #16
 8002cdc:	6093      	str	r3, [r2, #8]
 8002cde:	e03a      	b.n	8002d56 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	333f      	adds	r3, #63	; 0x3f
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d009      	beq.n	8002d08 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	333f      	adds	r3, #63	; 0x3f
 8002d02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d126      	bne.n	8002d56 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	0151      	lsls	r1, r2, #5
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	440a      	add	r2, r1
 8002d1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d26:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	3360      	adds	r3, #96	; 0x60
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	b2d9      	uxtb	r1, r3
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	202c      	movs	r0, #44	; 0x2c
 8002d44:	fb00 f303 	mul.w	r3, r0, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3360      	adds	r3, #96	; 0x60
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f004 fe29 	bl	80079a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d12b      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3348      	adds	r3, #72	; 0x48
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	202c      	movs	r0, #44	; 0x2c
 8002d74:	fb00 f202 	mul.w	r2, r0, r2
 8002d78:	440a      	add	r2, r1
 8002d7a:	3240      	adds	r2, #64	; 0x40
 8002d7c:	8812      	ldrh	r2, [r2, #0]
 8002d7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 818e 	beq.w	80030a8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3354      	adds	r3, #84	; 0x54
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f083 0301 	eor.w	r3, r3, #1
 8002da0:	b2d8      	uxtb	r0, r3
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3354      	adds	r3, #84	; 0x54
 8002db0:	4602      	mov	r2, r0
 8002db2:	701a      	strb	r2, [r3, #0]
}
 8002db4:	e178      	b.n	80030a8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3354      	adds	r3, #84	; 0x54
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	f083 0301 	eor.w	r3, r3, #1
 8002dca:	b2d8      	uxtb	r0, r3
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3354      	adds	r3, #84	; 0x54
 8002dda:	4602      	mov	r2, r0
 8002ddc:	701a      	strb	r2, [r3, #0]
}
 8002dde:	e163      	b.n	80030a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	f040 80f6 	bne.w	8002fe4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3361      	adds	r3, #97	; 0x61
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d109      	bne.n	8002e20 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3360      	adds	r3, #96	; 0x60
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e0c9      	b.n	8002fb4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3361      	adds	r3, #97	; 0x61
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d109      	bne.n	8002e48 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3360      	adds	r3, #96	; 0x60
 8002e42:	2205      	movs	r2, #5
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e0b5      	b.n	8002fb4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3361      	adds	r3, #97	; 0x61
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d009      	beq.n	8002e70 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3361      	adds	r3, #97	; 0x61
 8002e6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d150      	bne.n	8002f12 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	335c      	adds	r3, #92	; 0x5c
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	202c      	movs	r0, #44	; 0x2c
 8002e88:	fb00 f303 	mul.w	r3, r0, r3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	335c      	adds	r3, #92	; 0x5c
 8002e90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d912      	bls.n	8002ecc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	335c      	adds	r3, #92	; 0x5c
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3360      	adds	r3, #96	; 0x60
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eca:	e073      	b.n	8002fb4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	2202      	movs	r2, #2
 8002edc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ef4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002efc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f10:	e050      	b.n	8002fb4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3361      	adds	r3, #97	; 0x61
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d122      	bne.n	8002f6c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	3360      	adds	r3, #96	; 0x60
 8002f34:	2202      	movs	r2, #2
 8002f36:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f4e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f56:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e023      	b.n	8002fb4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3361      	adds	r3, #97	; 0x61
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b07      	cmp	r3, #7
 8002f7e:	d119      	bne.n	8002fb4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	335c      	adds	r3, #92	; 0x5c
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	202c      	movs	r0, #44	; 0x2c
 8002f98:	fb00 f303 	mul.w	r3, r0, r3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	335c      	adds	r3, #92	; 0x5c
 8002fa0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	3360      	adds	r3, #96	; 0x60
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	b2d9      	uxtb	r1, r3
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	202c      	movs	r0, #44	; 0x2c
 8002fd0:	fb00 f303 	mul.w	r3, r0, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3360      	adds	r3, #96	; 0x60
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f004 fce3 	bl	80079a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fe2:	e061      	b.n	80030a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d156      	bne.n	80030a8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	333f      	adds	r3, #63	; 0x3f
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d111      	bne.n	8003032 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	335c      	adds	r3, #92	; 0x5c
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f003 f9b3 	bl	8006396 <USB_HC_Halt>
 8003030:	e031      	b.n	8003096 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	333f      	adds	r3, #63	; 0x3f
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	333f      	adds	r3, #63	; 0x3f
 8003054:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003056:	2b02      	cmp	r3, #2
 8003058:	d11d      	bne.n	8003096 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	335c      	adds	r3, #92	; 0x5c
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d110      	bne.n	8003096 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3361      	adds	r3, #97	; 0x61
 8003082:	2203      	movs	r2, #3
 8003084:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f003 f980 	bl	8006396 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4413      	add	r3, r2
 800309e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a2:	461a      	mov	r2, r3
 80030a4:	2310      	movs	r3, #16
 80030a6:	6093      	str	r3, [r2, #8]
}
 80030a8:	bf00      	nop
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d11a      	bne.n	8003116 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	2304      	movs	r3, #4
 80030f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3361      	adds	r3, #97	; 0x61
 8003100:	2206      	movs	r2, #6
 8003102:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f003 f941 	bl	8006396 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003114:	e331      	b.n	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b20      	cmp	r3, #32
 800312a:	d12e      	bne.n	800318a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	461a      	mov	r2, r3
 800313a:	2320      	movs	r3, #32
 800313c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	333d      	adds	r3, #61	; 0x3d
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	f040 8313 	bne.w	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	333d      	adds	r3, #61	; 0x3d
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	3360      	adds	r3, #96	; 0x60
 8003174:	2202      	movs	r2, #2
 8003176:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f003 f907 	bl	8006396 <USB_HC_Halt>
}
 8003188:	e2f7      	b.n	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a0:	d112      	bne.n	80031c8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	461a      	mov	r2, r3
 80031b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 f8e8 	bl	8006396 <USB_HC_Halt>
}
 80031c6:	e2d8      	b.n	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d140      	bne.n	8003260 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	335c      	adds	r3, #92	; 0x5c
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	d111      	bne.n	800322a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	333d      	adds	r3, #61	; 0x3d
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003224:	461a      	mov	r2, r3
 8003226:	2340      	movs	r3, #64	; 0x40
 8003228:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	461a      	mov	r2, r3
 8003238:	2301      	movs	r3, #1
 800323a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	3361      	adds	r3, #97	; 0x61
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f003 f89c 	bl	8006396 <USB_HC_Halt>
}
 800325e:	e28c      	b.n	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d12c      	bne.n	80032d0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	3361      	adds	r3, #97	; 0x61
 8003284:	2204      	movs	r2, #4
 8003286:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	333d      	adds	r3, #61	; 0x3d
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	335c      	adds	r3, #92	; 0x5c
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 f86d 	bl	8006396 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c8:	461a      	mov	r2, r3
 80032ca:	2340      	movs	r3, #64	; 0x40
 80032cc:	6093      	str	r3, [r2, #8]
}
 80032ce:	e254      	b.n	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d11a      	bne.n	800331c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	2308      	movs	r3, #8
 80032f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3361      	adds	r3, #97	; 0x61
 8003306:	2205      	movs	r2, #5
 8003308:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f003 f83e 	bl	8006396 <USB_HC_Halt>
}
 800331a:	e22e      	b.n	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b10      	cmp	r3, #16
 8003330:	d140      	bne.n	80033b4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	335c      	adds	r3, #92	; 0x5c
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	3361      	adds	r3, #97	; 0x61
 8003352:	2203      	movs	r2, #3
 8003354:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	333d      	adds	r3, #61	; 0x3d
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d112      	bne.n	8003390 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	333c      	adds	r3, #60	; 0x3c
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	333d      	adds	r3, #61	; 0x3d
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f002 fffb 	bl	8006396 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	2310      	movs	r3, #16
 80033b0:	6093      	str	r3, [r2, #8]
}
 80033b2:	e1e2      	b.n	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	2b80      	cmp	r3, #128	; 0x80
 80033c8:	d164      	bne.n	8003494 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d111      	bne.n	80033f6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	212c      	movs	r1, #44	; 0x2c
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	4413      	add	r3, r2
 80033de:	3361      	adds	r3, #97	; 0x61
 80033e0:	2206      	movs	r2, #6
 80033e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 ffd1 	bl	8006396 <USB_HC_Halt>
 80033f4:	e044      	b.n	8003480 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	335c      	adds	r3, #92	; 0x5c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	202c      	movs	r0, #44	; 0x2c
 800340e:	fb00 f303 	mul.w	r3, r0, r3
 8003412:	440b      	add	r3, r1
 8003414:	335c      	adds	r3, #92	; 0x5c
 8003416:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	335c      	adds	r3, #92	; 0x5c
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d920      	bls.n	800346e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	212c      	movs	r1, #44	; 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	335c      	adds	r3, #92	; 0x5c
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3360      	adds	r3, #96	; 0x60
 800344c:	2204      	movs	r2, #4
 800344e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	b2d9      	uxtb	r1, r3
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	202c      	movs	r0, #44	; 0x2c
 800345a:	fb00 f303 	mul.w	r3, r0, r3
 800345e:	4413      	add	r3, r2
 8003460:	3360      	adds	r3, #96	; 0x60
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f004 fa9e 	bl	80079a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800346c:	e008      	b.n	8003480 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	3360      	adds	r3, #96	; 0x60
 800347c:	2202      	movs	r2, #2
 800347e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348c:	461a      	mov	r2, r3
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	6093      	str	r3, [r2, #8]
}
 8003492:	e172      	b.n	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034aa:	d11b      	bne.n	80034e4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3361      	adds	r3, #97	; 0x61
 80034ba:	2208      	movs	r2, #8
 80034bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f002 ff64 	bl	8006396 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034da:	461a      	mov	r2, r3
 80034dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e0:	6093      	str	r3, [r2, #8]
}
 80034e2:	e14a      	b.n	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	f040 813f 	bne.w	800377a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3361      	adds	r3, #97	; 0x61
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d17d      	bne.n	800360c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3360      	adds	r3, #96	; 0x60
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	333f      	adds	r3, #63	; 0x3f
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d00a      	beq.n	800354c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	212c      	movs	r1, #44	; 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	333f      	adds	r3, #63	; 0x3f
 8003544:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003546:	2b03      	cmp	r3, #3
 8003548:	f040 8100 	bne.w	800374c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d113      	bne.n	800357c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3355      	adds	r3, #85	; 0x55
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	f083 0301 	eor.w	r3, r3, #1
 8003568:	b2d8      	uxtb	r0, r3
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3355      	adds	r3, #85	; 0x55
 8003578:	4602      	mov	r2, r0
 800357a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b01      	cmp	r3, #1
 8003582:	f040 80e3 	bne.w	800374c <HCD_HC_OUT_IRQHandler+0x69c>
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	212c      	movs	r1, #44	; 0x2c
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	334c      	adds	r3, #76	; 0x4c
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80d8 	beq.w	800374c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	212c      	movs	r1, #44	; 0x2c
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	334c      	adds	r3, #76	; 0x4c
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	202c      	movs	r0, #44	; 0x2c
 80035b2:	fb00 f202 	mul.w	r2, r0, r2
 80035b6:	440a      	add	r2, r1
 80035b8:	3240      	adds	r2, #64	; 0x40
 80035ba:	8812      	ldrh	r2, [r2, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	3b01      	subs	r3, #1
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	202c      	movs	r0, #44	; 0x2c
 80035c6:	fb00 f202 	mul.w	r2, r0, r2
 80035ca:	440a      	add	r2, r1
 80035cc:	3240      	adds	r2, #64	; 0x40
 80035ce:	8812      	ldrh	r2, [r2, #0]
 80035d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80b5 	beq.w	800374c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	3355      	adds	r3, #85	; 0x55
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	f083 0301 	eor.w	r3, r3, #1
 80035f6:	b2d8      	uxtb	r0, r3
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	212c      	movs	r1, #44	; 0x2c
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	4413      	add	r3, r2
 8003604:	3355      	adds	r3, #85	; 0x55
 8003606:	4602      	mov	r2, r0
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e09f      	b.n	800374c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	212c      	movs	r1, #44	; 0x2c
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	4413      	add	r3, r2
 8003618:	3361      	adds	r3, #97	; 0x61
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d109      	bne.n	8003634 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	3360      	adds	r3, #96	; 0x60
 800362e:	2202      	movs	r2, #2
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e08b      	b.n	800374c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3361      	adds	r3, #97	; 0x61
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d109      	bne.n	800365c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	212c      	movs	r1, #44	; 0x2c
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	4413      	add	r3, r2
 8003654:	3360      	adds	r3, #96	; 0x60
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e077      	b.n	800374c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3361      	adds	r3, #97	; 0x61
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d109      	bne.n	8003684 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	3360      	adds	r3, #96	; 0x60
 800367e:	2205      	movs	r2, #5
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e063      	b.n	800374c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	212c      	movs	r1, #44	; 0x2c
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	3361      	adds	r3, #97	; 0x61
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b06      	cmp	r3, #6
 8003696:	d009      	beq.n	80036ac <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	3361      	adds	r3, #97	; 0x61
 80036a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d14f      	bne.n	800374c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	335c      	adds	r3, #92	; 0x5c
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	202c      	movs	r0, #44	; 0x2c
 80036c4:	fb00 f303 	mul.w	r3, r0, r3
 80036c8:	440b      	add	r3, r1
 80036ca:	335c      	adds	r3, #92	; 0x5c
 80036cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	335c      	adds	r3, #92	; 0x5c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d912      	bls.n	8003708 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	335c      	adds	r3, #92	; 0x5c
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3360      	adds	r3, #96	; 0x60
 8003702:	2204      	movs	r2, #4
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e021      	b.n	800374c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	3360      	adds	r3, #96	; 0x60
 8003716:	2202      	movs	r2, #2
 8003718:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003730:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003738:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003746:	461a      	mov	r2, r3
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	461a      	mov	r2, r3
 800375a:	2302      	movs	r3, #2
 800375c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	b2d9      	uxtb	r1, r3
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	202c      	movs	r0, #44	; 0x2c
 8003768:	fb00 f303 	mul.w	r3, r0, r3
 800376c:	4413      	add	r3, r2
 800376e:	3360      	adds	r3, #96	; 0x60
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f004 f917 	bl	80079a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800377a:	bf00      	nop
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b08a      	sub	sp, #40	; 0x28
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	0c5b      	lsrs	r3, r3, #17
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d004      	beq.n	80037c8 <HCD_RXQLVL_IRQHandler+0x46>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	f000 80a9 	beq.w	8003918 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037c6:	e0aa      	b.n	800391e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80a6 	beq.w	800391c <HCD_RXQLVL_IRQHandler+0x19a>
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	4413      	add	r3, r2
 80037dc:	3344      	adds	r3, #68	; 0x44
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 809b 	beq.w	800391c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	3350      	adds	r3, #80	; 0x50
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	441a      	add	r2, r3
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	202c      	movs	r0, #44	; 0x2c
 8003800:	fb00 f303 	mul.w	r3, r0, r3
 8003804:	440b      	add	r3, r1
 8003806:	334c      	adds	r3, #76	; 0x4c
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d87a      	bhi.n	8003904 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	212c      	movs	r1, #44	; 0x2c
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	4413      	add	r3, r2
 800381e:	3344      	adds	r3, #68	; 0x44
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	b292      	uxth	r2, r2
 8003826:	4619      	mov	r1, r3
 8003828:	f002 f936 	bl	8005a98 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	3344      	adds	r3, #68	; 0x44
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	441a      	add	r2, r3
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	202c      	movs	r0, #44	; 0x2c
 8003846:	fb00 f303 	mul.w	r3, r0, r3
 800384a:	440b      	add	r3, r1
 800384c:	3344      	adds	r3, #68	; 0x44
 800384e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	212c      	movs	r1, #44	; 0x2c
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	4413      	add	r3, r2
 800385c:	3350      	adds	r3, #80	; 0x50
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	441a      	add	r2, r3
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	202c      	movs	r0, #44	; 0x2c
 800386a:	fb00 f303 	mul.w	r3, r0, r3
 800386e:	440b      	add	r3, r1
 8003870:	3350      	adds	r3, #80	; 0x50
 8003872:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	0cdb      	lsrs	r3, r3, #19
 8003884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003888:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	3340      	adds	r3, #64	; 0x40
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4293      	cmp	r3, r2
 80038a0:	d13c      	bne.n	800391c <HCD_RXQLVL_IRQHandler+0x19a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d039      	beq.n	800391c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038be:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038c6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	461a      	mov	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3354      	adds	r3, #84	; 0x54
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	f083 0301 	eor.w	r3, r3, #1
 80038ee:	b2d8      	uxtb	r0, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3354      	adds	r3, #84	; 0x54
 80038fe:	4602      	mov	r2, r0
 8003900:	701a      	strb	r2, [r3, #0]
      break;
 8003902:	e00b      	b.n	800391c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3360      	adds	r3, #96	; 0x60
 8003912:	2204      	movs	r2, #4
 8003914:	701a      	strb	r2, [r3, #0]
      break;
 8003916:	e001      	b.n	800391c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003918:	bf00      	nop
 800391a:	e000      	b.n	800391e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800391c:	bf00      	nop
  }
}
 800391e:	bf00      	nop
 8003920:	3728      	adds	r7, #40	; 0x28
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003952:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d10b      	bne.n	8003976 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d102      	bne.n	800396e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f004 f801 	bl	8007970 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f043 0302 	orr.w	r3, r3, #2
 8003974:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b08      	cmp	r3, #8
 800397e:	d132      	bne.n	80039e6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f043 0308 	orr.w	r3, r3, #8
 8003986:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b04      	cmp	r3, #4
 8003990:	d126      	bne.n	80039e0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d113      	bne.n	80039c2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039a4:	d106      	bne.n	80039b4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2102      	movs	r1, #2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f002 f9e1 	bl	8005d74 <USB_InitFSLSPClkSel>
 80039b2:	e011      	b.n	80039d8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2101      	movs	r1, #1
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 f9da 	bl	8005d74 <USB_InitFSLSPClkSel>
 80039c0:	e00a      	b.n	80039d8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d106      	bne.n	80039d8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039d0:	461a      	mov	r2, r3
 80039d2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039d6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f003 fff3 	bl	80079c4 <HAL_HCD_PortEnabled_Callback>
 80039de:	e002      	b.n	80039e6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f003 fffd 	bl	80079e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d103      	bne.n	80039f8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f043 0320 	orr.w	r3, r3, #32
 80039f6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6013      	str	r3, [r2, #0]
}
 8003a04:	bf00      	nop
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e12b      	b.n	8003c76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd fdce 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a70:	f001 fa20 	bl	8004eb4 <HAL_RCC_GetPCLK1Freq>
 8003a74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4a81      	ldr	r2, [pc, #516]	; (8003c80 <HAL_I2C_Init+0x274>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d807      	bhi.n	8003a90 <HAL_I2C_Init+0x84>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a80      	ldr	r2, [pc, #512]	; (8003c84 <HAL_I2C_Init+0x278>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	bf94      	ite	ls
 8003a88:	2301      	movls	r3, #1
 8003a8a:	2300      	movhi	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e006      	b.n	8003a9e <HAL_I2C_Init+0x92>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a7d      	ldr	r2, [pc, #500]	; (8003c88 <HAL_I2C_Init+0x27c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf94      	ite	ls
 8003a98:	2301      	movls	r3, #1
 8003a9a:	2300      	movhi	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0e7      	b.n	8003c76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a78      	ldr	r2, [pc, #480]	; (8003c8c <HAL_I2C_Init+0x280>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0c9b      	lsrs	r3, r3, #18
 8003ab0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a6a      	ldr	r2, [pc, #424]	; (8003c80 <HAL_I2C_Init+0x274>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d802      	bhi.n	8003ae0 <HAL_I2C_Init+0xd4>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3301      	adds	r3, #1
 8003ade:	e009      	b.n	8003af4 <HAL_I2C_Init+0xe8>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	4a69      	ldr	r2, [pc, #420]	; (8003c90 <HAL_I2C_Init+0x284>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	3301      	adds	r3, #1
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	495c      	ldr	r1, [pc, #368]	; (8003c80 <HAL_I2C_Init+0x274>)
 8003b10:	428b      	cmp	r3, r1
 8003b12:	d819      	bhi.n	8003b48 <HAL_I2C_Init+0x13c>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1e59      	subs	r1, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b22:	1c59      	adds	r1, r3, #1
 8003b24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b28:	400b      	ands	r3, r1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_I2C_Init+0x138>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1e59      	subs	r1, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	e051      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003b44:	2304      	movs	r3, #4
 8003b46:	e04f      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d111      	bne.n	8003b74 <HAL_I2C_Init+0x168>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e58      	subs	r0, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	440b      	add	r3, r1
 8003b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b62:	3301      	adds	r3, #1
 8003b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e012      	b.n	8003b9a <HAL_I2C_Init+0x18e>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	0099      	lsls	r1, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Init+0x196>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e022      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_I2C_Init+0x1bc>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1e58      	subs	r0, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6859      	ldr	r1, [r3, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	440b      	add	r3, r1
 8003bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc6:	e00f      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e58      	subs	r0, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	0099      	lsls	r1, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	6809      	ldr	r1, [r1, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6911      	ldr	r1, [r2, #16]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68d2      	ldr	r2, [r2, #12]
 8003c22:	4311      	orrs	r1, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	000186a0 	.word	0x000186a0
 8003c84:	001e847f 	.word	0x001e847f
 8003c88:	003d08ff 	.word	0x003d08ff
 8003c8c:	431bde83 	.word	0x431bde83
 8003c90:	10624dd3 	.word	0x10624dd3

08003c94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e128      	b.n	8003ef8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a90      	ldr	r2, [pc, #576]	; (8003f00 <HAL_I2S_Init+0x26c>)
 8003cbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fd fccf 	bl	8001664 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cdc:	f023 030f 	bic.w	r3, r3, #15
 8003ce0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d060      	beq.n	8003db4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e001      	b.n	8003d04 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d00:	2320      	movs	r3, #32
 8003d02:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d802      	bhi.n	8003d12 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d12:	2001      	movs	r0, #1
 8003d14:	f001 f9c4 	bl	80050a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d18:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d22:	d125      	bne.n	8003d70 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d010      	beq.n	8003d4e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	3305      	adds	r3, #5
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	e01f      	b.n	8003d8e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	461a      	mov	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	3305      	adds	r3, #5
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	e00e      	b.n	8003d8e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	461a      	mov	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	3305      	adds	r3, #5
 8003d8c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4a5c      	ldr	r2, [pc, #368]	; (8003f04 <HAL_I2S_Init+0x270>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e003      	b.n	8003dbc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003db4:	2302      	movs	r3, #2
 8003db6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d902      	bls.n	8003dc8 <HAL_I2S_Init+0x134>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	d907      	bls.n	8003dd8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f043 0210 	orr.w	r2, r3, #16
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e08f      	b.n	8003ef8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	ea42 0103 	orr.w	r1, r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003df6:	f023 030f 	bic.w	r3, r3, #15
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6851      	ldr	r1, [r2, #4]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6892      	ldr	r2, [r2, #8]
 8003e02:	4311      	orrs	r1, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68d2      	ldr	r2, [r2, #12]
 8003e08:	4311      	orrs	r1, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6992      	ldr	r2, [r2, #24]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e1a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d161      	bne.n	8003ee8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a38      	ldr	r2, [pc, #224]	; (8003f08 <HAL_I2S_Init+0x274>)
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a37      	ldr	r2, [pc, #220]	; (8003f0c <HAL_I2S_Init+0x278>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_I2S_Init+0x1a4>
 8003e34:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <HAL_I2S_Init+0x27c>)
 8003e36:	e001      	b.n	8003e3c <HAL_I2S_Init+0x1a8>
 8003e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	4932      	ldr	r1, [pc, #200]	; (8003f0c <HAL_I2S_Init+0x278>)
 8003e44:	428a      	cmp	r2, r1
 8003e46:	d101      	bne.n	8003e4c <HAL_I2S_Init+0x1b8>
 8003e48:	4a31      	ldr	r2, [pc, #196]	; (8003f10 <HAL_I2S_Init+0x27c>)
 8003e4a:	e001      	b.n	8003e50 <HAL_I2S_Init+0x1bc>
 8003e4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003e50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e54:	f023 030f 	bic.w	r3, r3, #15
 8003e58:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2b      	ldr	r2, [pc, #172]	; (8003f0c <HAL_I2S_Init+0x278>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d101      	bne.n	8003e68 <HAL_I2S_Init+0x1d4>
 8003e64:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <HAL_I2S_Init+0x27c>)
 8003e66:	e001      	b.n	8003e6c <HAL_I2S_Init+0x1d8>
 8003e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <HAL_I2S_Init+0x278>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_I2S_Init+0x1ea>
 8003e7a:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <HAL_I2S_Init+0x27c>)
 8003e7c:	e001      	b.n	8003e82 <HAL_I2S_Init+0x1ee>
 8003e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8e:	d003      	beq.n	8003e98 <HAL_I2S_Init+0x204>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d103      	bne.n	8003ea0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	e001      	b.n	8003ea4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ed0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <HAL_I2S_Init+0x278>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2S_Init+0x24c>
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_I2S_Init+0x27c>)
 8003ede:	e001      	b.n	8003ee4 <HAL_I2S_Init+0x250>
 8003ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee4:	897a      	ldrh	r2, [r7, #10]
 8003ee6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	0800400b 	.word	0x0800400b
 8003f04:	cccccccd 	.word	0xcccccccd
 8003f08:	08004121 	.word	0x08004121
 8003f0c:	40003800 	.word	0x40003800
 8003f10:	40003400 	.word	0x40003400

08003f14 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	881a      	ldrh	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10e      	bne.n	8003fa4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f94:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ffb8 	bl	8003f14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	1c9a      	adds	r2, r3, #2
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10e      	bne.n	8004002 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ff2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ff93 	bl	8003f28 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b04      	cmp	r3, #4
 8004024:	d13a      	bne.n	800409c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d109      	bne.n	8004044 <I2S_IRQHandler+0x3a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b40      	cmp	r3, #64	; 0x40
 800403c:	d102      	bne.n	8004044 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ffb4 	bl	8003fac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	d126      	bne.n	800409c <I2S_IRQHandler+0x92>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b20      	cmp	r3, #32
 800405a:	d11f      	bne.n	800409c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800406a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f043 0202 	orr.w	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ff50 	bl	8003f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d136      	bne.n	8004116 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d109      	bne.n	80040c6 <I2S_IRQHandler+0xbc>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040bc:	2b80      	cmp	r3, #128	; 0x80
 80040be:	d102      	bne.n	80040c6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff45 	bl	8003f50 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d122      	bne.n	8004116 <I2S_IRQHandler+0x10c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d11b      	bne.n	8004116 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040ec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004108:	f043 0204 	orr.w	r2, r3, #4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff13 	bl	8003f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004116:	bf00      	nop
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a92      	ldr	r2, [pc, #584]	; (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800413a:	4b92      	ldr	r3, [pc, #584]	; (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800413c:	e001      	b.n	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800413e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a8b      	ldr	r2, [pc, #556]	; (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d101      	bne.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004158:	4b8a      	ldr	r3, [pc, #552]	; (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800415a:	e001      	b.n	8004160 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800415c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800416c:	d004      	beq.n	8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 8099 	bne.w	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d107      	bne.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f925 	bl	80043dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f9c8 	bl	800453c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b40      	cmp	r3, #64	; 0x40
 80041b4:	d13a      	bne.n	800422c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d035      	beq.n	800422c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a6e      	ldr	r2, [pc, #440]	; (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80041ca:	4b6e      	ldr	r3, [pc, #440]	; (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041cc:	e001      	b.n	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80041ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4969      	ldr	r1, [pc, #420]	; (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041da:	428b      	cmp	r3, r1
 80041dc:	d101      	bne.n	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80041de:	4b69      	ldr	r3, [pc, #420]	; (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041e0:	e001      	b.n	80041e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80041e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	f043 0202 	orr.w	r2, r3, #2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fe88 	bl	8003f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b08      	cmp	r3, #8
 8004234:	f040 80c3 	bne.w	80043be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80bd 	beq.w	80043be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004252:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a49      	ldr	r2, [pc, #292]	; (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800425e:	4b49      	ldr	r3, [pc, #292]	; (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004260:	e001      	b.n	8004266 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004262:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4944      	ldr	r1, [pc, #272]	; (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800426e:	428b      	cmp	r3, r1
 8004270:	d101      	bne.n	8004276 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004272:	4b44      	ldr	r3, [pc, #272]	; (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004274:	e001      	b.n	800427a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004276:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800427a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800427e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fe4a 	bl	8003f3c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042a8:	e089      	b.n	80043be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d107      	bne.n	80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f8be 	bl	8004440 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d107      	bne.n	80042de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f8fd 	bl	80044d8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d12f      	bne.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d02a      	beq.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004300:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800430c:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800430e:	e001      	b.n	8004314 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004310:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4919      	ldr	r1, [pc, #100]	; (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800431c:	428b      	cmp	r3, r1
 800431e:	d101      	bne.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004320:	4b18      	ldr	r3, [pc, #96]	; (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004322:	e001      	b.n	8004328 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004324:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004328:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800432c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f043 0202 	orr.w	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fdfa 	bl	8003f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b08      	cmp	r3, #8
 8004350:	d136      	bne.n	80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d031      	beq.n	80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a07      	ldr	r2, [pc, #28]	; (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004368:	e001      	b.n	800436e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800436a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4902      	ldr	r1, [pc, #8]	; (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004376:	428b      	cmp	r3, r1
 8004378:	d106      	bne.n	8004388 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800437a:	4b02      	ldr	r3, [pc, #8]	; (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800437c:	e006      	b.n	800438c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800437e:	bf00      	nop
 8004380:	40003800 	.word	0x40003800
 8004384:	40003400 	.word	0x40003400
 8004388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800438c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004390:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f043 0204 	orr.w	r2, r3, #4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff fdc0 	bl	8003f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043bc:	e000      	b.n	80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043be:	bf00      	nop
}
 80043c0:	bf00      	nop
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c99      	adds	r1, r3, #2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6251      	str	r1, [r2, #36]	; 0x24
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d113      	bne.n	8004436 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800441c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff ffc9 	bl	80043c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	1c99      	adds	r1, r3, #2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6251      	str	r1, [r2, #36]	; 0x24
 8004452:	8819      	ldrh	r1, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <I2SEx_TxISR_I2SExt+0x90>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <I2SEx_TxISR_I2SExt+0x22>
 800445e:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <I2SEx_TxISR_I2SExt+0x94>)
 8004460:	e001      	b.n	8004466 <I2SEx_TxISR_I2SExt+0x26>
 8004462:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004466:	460a      	mov	r2, r1
 8004468:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d121      	bne.n	80044c6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <I2SEx_TxISR_I2SExt+0x90>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d101      	bne.n	8004490 <I2SEx_TxISR_I2SExt+0x50>
 800448c:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <I2SEx_TxISR_I2SExt+0x94>)
 800448e:	e001      	b.n	8004494 <I2SEx_TxISR_I2SExt+0x54>
 8004490:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	490d      	ldr	r1, [pc, #52]	; (80044d0 <I2SEx_TxISR_I2SExt+0x90>)
 800449c:	428b      	cmp	r3, r1
 800449e:	d101      	bne.n	80044a4 <I2SEx_TxISR_I2SExt+0x64>
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <I2SEx_TxISR_I2SExt+0x94>)
 80044a2:	e001      	b.n	80044a8 <I2SEx_TxISR_I2SExt+0x68>
 80044a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff ff81 	bl	80043c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40003800 	.word	0x40003800
 80044d4:	40003400 	.word	0x40003400

080044d8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68d8      	ldr	r0, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	1c99      	adds	r1, r3, #2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	62d1      	str	r1, [r2, #44]	; 0x2c
 80044f0:	b282      	uxth	r2, r0
 80044f2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d113      	bne.n	8004534 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800451a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ff4a 	bl	80043c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a20      	ldr	r2, [pc, #128]	; (80045cc <I2SEx_RxISR_I2SExt+0x90>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d101      	bne.n	8004552 <I2SEx_RxISR_I2SExt+0x16>
 800454e:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <I2SEx_RxISR_I2SExt+0x94>)
 8004550:	e001      	b.n	8004556 <I2SEx_RxISR_I2SExt+0x1a>
 8004552:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004556:	68d8      	ldr	r0, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	1c99      	adds	r1, r3, #2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004562:	b282      	uxth	r2, r0
 8004564:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d121      	bne.n	80045c2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a12      	ldr	r2, [pc, #72]	; (80045cc <I2SEx_RxISR_I2SExt+0x90>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <I2SEx_RxISR_I2SExt+0x50>
 8004588:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <I2SEx_RxISR_I2SExt+0x94>)
 800458a:	e001      	b.n	8004590 <I2SEx_RxISR_I2SExt+0x54>
 800458c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	490d      	ldr	r1, [pc, #52]	; (80045cc <I2SEx_RxISR_I2SExt+0x90>)
 8004598:	428b      	cmp	r3, r1
 800459a:	d101      	bne.n	80045a0 <I2SEx_RxISR_I2SExt+0x64>
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <I2SEx_RxISR_I2SExt+0x94>)
 800459e:	e001      	b.n	80045a4 <I2SEx_RxISR_I2SExt+0x68>
 80045a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045a8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff03 	bl	80043c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40003800 	.word	0x40003800
 80045d0:	40003400 	.word	0x40003400

080045d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e267      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d075      	beq.n	80046de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045f2:	4b88      	ldr	r3, [pc, #544]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d00c      	beq.n	8004618 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fe:	4b85      	ldr	r3, [pc, #532]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004606:	2b08      	cmp	r3, #8
 8004608:	d112      	bne.n	8004630 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460a:	4b82      	ldr	r3, [pc, #520]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004616:	d10b      	bne.n	8004630 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	4b7e      	ldr	r3, [pc, #504]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d05b      	beq.n	80046dc <HAL_RCC_OscConfig+0x108>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d157      	bne.n	80046dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e242      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004638:	d106      	bne.n	8004648 <HAL_RCC_OscConfig+0x74>
 800463a:	4b76      	ldr	r3, [pc, #472]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a75      	ldr	r2, [pc, #468]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e01d      	b.n	8004684 <HAL_RCC_OscConfig+0xb0>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x98>
 8004652:	4b70      	ldr	r3, [pc, #448]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a6f      	ldr	r2, [pc, #444]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4b6d      	ldr	r3, [pc, #436]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6c      	ldr	r2, [pc, #432]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e00b      	b.n	8004684 <HAL_RCC_OscConfig+0xb0>
 800466c:	4b69      	ldr	r3, [pc, #420]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a68      	ldr	r2, [pc, #416]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b66      	ldr	r3, [pc, #408]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a65      	ldr	r2, [pc, #404]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 800467e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d013      	beq.n	80046b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fd f9dc 	bl	8001a48 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004694:	f7fd f9d8 	bl	8001a48 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e207      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b5b      	ldr	r3, [pc, #364]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0xc0>
 80046b2:	e014      	b.n	80046de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b4:	f7fd f9c8 	bl	8001a48 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046bc:	f7fd f9c4 	bl	8001a48 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	; 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e1f3      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ce:	4b51      	ldr	r3, [pc, #324]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0xe8>
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d063      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ea:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f6:	4b47      	ldr	r3, [pc, #284]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d11c      	bne.n	800473c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004702:	4b44      	ldr	r3, [pc, #272]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d116      	bne.n	800473c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470e:	4b41      	ldr	r3, [pc, #260]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <HAL_RCC_OscConfig+0x152>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d001      	beq.n	8004726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e1c7      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004726:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4937      	ldr	r1, [pc, #220]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473a:	e03a      	b.n	80047b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d020      	beq.n	8004786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004744:	4b34      	ldr	r3, [pc, #208]	; (8004818 <HAL_RCC_OscConfig+0x244>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd f97d 	bl	8001a48 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004752:	f7fd f979 	bl	8001a48 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e1a8      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004764:	4b2b      	ldr	r3, [pc, #172]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004770:	4b28      	ldr	r3, [pc, #160]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4925      	ldr	r1, [pc, #148]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 8004780:	4313      	orrs	r3, r2
 8004782:	600b      	str	r3, [r1, #0]
 8004784:	e015      	b.n	80047b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <HAL_RCC_OscConfig+0x244>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd f95c 	bl	8001a48 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004794:	f7fd f958 	bl	8001a48 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e187      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a6:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d036      	beq.n	800482c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <HAL_RCC_OscConfig+0x248>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fd f93c 	bl	8001a48 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d4:	f7fd f938 	bl	8001a48 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e167      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e6:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_OscConfig+0x240>)
 80047e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x200>
 80047f2:	e01b      	b.n	800482c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f4:	4b09      	ldr	r3, [pc, #36]	; (800481c <HAL_RCC_OscConfig+0x248>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fa:	f7fd f925 	bl	8001a48 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004800:	e00e      	b.n	8004820 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004802:	f7fd f921 	bl	8001a48 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d907      	bls.n	8004820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e150      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
 8004814:	40023800 	.word	0x40023800
 8004818:	42470000 	.word	0x42470000
 800481c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004820:	4b88      	ldr	r3, [pc, #544]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1ea      	bne.n	8004802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8097 	beq.w	8004968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800483e:	4b81      	ldr	r3, [pc, #516]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	4b7d      	ldr	r3, [pc, #500]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	4a7c      	ldr	r2, [pc, #496]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004858:	6413      	str	r3, [r2, #64]	; 0x40
 800485a:	4b7a      	ldr	r3, [pc, #488]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486a:	4b77      	ldr	r3, [pc, #476]	; (8004a48 <HAL_RCC_OscConfig+0x474>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d118      	bne.n	80048a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004876:	4b74      	ldr	r3, [pc, #464]	; (8004a48 <HAL_RCC_OscConfig+0x474>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a73      	ldr	r2, [pc, #460]	; (8004a48 <HAL_RCC_OscConfig+0x474>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004882:	f7fd f8e1 	bl	8001a48 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488a:	f7fd f8dd 	bl	8001a48 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e10c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <HAL_RCC_OscConfig+0x474>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x2ea>
 80048b0:	4b64      	ldr	r3, [pc, #400]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	4a63      	ldr	r2, [pc, #396]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6713      	str	r3, [r2, #112]	; 0x70
 80048bc:	e01c      	b.n	80048f8 <HAL_RCC_OscConfig+0x324>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b05      	cmp	r3, #5
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x30c>
 80048c6:	4b5f      	ldr	r3, [pc, #380]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	4a5e      	ldr	r2, [pc, #376]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048cc:	f043 0304 	orr.w	r3, r3, #4
 80048d0:	6713      	str	r3, [r2, #112]	; 0x70
 80048d2:	4b5c      	ldr	r3, [pc, #368]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a5b      	ldr	r2, [pc, #364]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
 80048de:	e00b      	b.n	80048f8 <HAL_RCC_OscConfig+0x324>
 80048e0:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	4a57      	ldr	r2, [pc, #348]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	6713      	str	r3, [r2, #112]	; 0x70
 80048ec:	4b55      	ldr	r3, [pc, #340]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	4a54      	ldr	r2, [pc, #336]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f023 0304 	bic.w	r3, r3, #4
 80048f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d015      	beq.n	800492c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fd f8a2 	bl	8001a48 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004906:	e00a      	b.n	800491e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004908:	f7fd f89e 	bl	8001a48 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	; 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0cb      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491e:	4b49      	ldr	r3, [pc, #292]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0ee      	beq.n	8004908 <HAL_RCC_OscConfig+0x334>
 800492a:	e014      	b.n	8004956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492c:	f7fd f88c 	bl	8001a48 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004932:	e00a      	b.n	800494a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004934:	f7fd f888 	bl	8001a48 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e0b5      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494a:	4b3e      	ldr	r3, [pc, #248]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ee      	bne.n	8004934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d105      	bne.n	8004968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495c:	4b39      	ldr	r3, [pc, #228]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	4a38      	ldr	r2, [pc, #224]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004966:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80a1 	beq.w	8004ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004972:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b08      	cmp	r3, #8
 800497c:	d05c      	beq.n	8004a38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d141      	bne.n	8004a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004986:	4b31      	ldr	r3, [pc, #196]	; (8004a4c <HAL_RCC_OscConfig+0x478>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fd f85c 	bl	8001a48 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004994:	f7fd f858 	bl	8001a48 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e087      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	4b27      	ldr	r3, [pc, #156]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	019b      	lsls	r3, r3, #6
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	3b01      	subs	r3, #1
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	491b      	ldr	r1, [pc, #108]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_RCC_OscConfig+0x478>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e2:	f7fd f831 	bl	8001a48 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ea:	f7fd f82d 	bl	8001a48 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e05c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x416>
 8004a08:	e054      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <HAL_RCC_OscConfig+0x478>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fd f81a 	bl	8001a48 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fd f816 	bl	8001a48 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e045      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x444>
 8004a36:	e03d      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e038      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
 8004a44:	40023800 	.word	0x40023800
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a50:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <HAL_RCC_OscConfig+0x4ec>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d028      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d121      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d11a      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a80:	4013      	ands	r3, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d111      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023800 	.word	0x40023800

08004ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0cc      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b68      	ldr	r3, [pc, #416]	; (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d90c      	bls.n	8004b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b65      	ldr	r3, [pc, #404]	; (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aee:	4b63      	ldr	r3, [pc, #396]	; (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0b8      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d020      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b18:	4b59      	ldr	r3, [pc, #356]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4a58      	ldr	r2, [pc, #352]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b30:	4b53      	ldr	r3, [pc, #332]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4a52      	ldr	r2, [pc, #328]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b3c:	4b50      	ldr	r3, [pc, #320]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	494d      	ldr	r1, [pc, #308]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d044      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	4b47      	ldr	r3, [pc, #284]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d119      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e07f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d003      	beq.n	8004b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d107      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b82:	4b3f      	ldr	r3, [pc, #252]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e06f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b92:	4b3b      	ldr	r3, [pc, #236]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e067      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ba2:	4b37      	ldr	r3, [pc, #220]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f023 0203 	bic.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4934      	ldr	r1, [pc, #208]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb4:	f7fc ff48 	bl	8001a48 <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bbc:	f7fc ff44 	bl	8001a48 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e04f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd2:	4b2b      	ldr	r3, [pc, #172]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 020c 	and.w	r2, r3, #12
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d1eb      	bne.n	8004bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004be4:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d20c      	bcs.n	8004c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b22      	ldr	r3, [pc, #136]	; (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e032      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d008      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4916      	ldr	r1, [pc, #88]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c36:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	490e      	ldr	r1, [pc, #56]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c4a:	f000 f821 	bl	8004c90 <HAL_RCC_GetSysClockFreq>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	091b      	lsrs	r3, r3, #4
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	490a      	ldr	r1, [pc, #40]	; (8004c84 <HAL_RCC_ClockConfig+0x1c0>)
 8004c5c:	5ccb      	ldrb	r3, [r1, r3]
 8004c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c62:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fc fea8 	bl	80019c0 <HAL_InitTick>

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023c00 	.word	0x40023c00
 8004c80:	40023800 	.word	0x40023800
 8004c84:	08007fec 	.word	0x08007fec
 8004c88:	20000080 	.word	0x20000080
 8004c8c:	20000084 	.word	0x20000084

08004c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c94:	b094      	sub	sp, #80	; 0x50
 8004c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca8:	4b79      	ldr	r3, [pc, #484]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 030c 	and.w	r3, r3, #12
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	f200 80e1 	bhi.w	8004e7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d003      	beq.n	8004cca <HAL_RCC_GetSysClockFreq+0x3a>
 8004cc2:	e0db      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc4:	4b73      	ldr	r3, [pc, #460]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004cc8:	e0db      	b.n	8004e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cca:	4b73      	ldr	r3, [pc, #460]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ccc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cce:	e0d8      	b.n	8004e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cd0:	4b6f      	ldr	r3, [pc, #444]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cda:	4b6d      	ldr	r3, [pc, #436]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d063      	beq.n	8004dae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce6:	4b6a      	ldr	r3, [pc, #424]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	2200      	movs	r2, #0
 8004cee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	f04f 0000 	mov.w	r0, #0
 8004d0a:	f04f 0100 	mov.w	r1, #0
 8004d0e:	0159      	lsls	r1, r3, #5
 8004d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d14:	0150      	lsls	r0, r2, #5
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	1a51      	subs	r1, r2, r1
 8004d1e:	6139      	str	r1, [r7, #16]
 8004d20:	4629      	mov	r1, r5
 8004d22:	eb63 0301 	sbc.w	r3, r3, r1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d34:	4659      	mov	r1, fp
 8004d36:	018b      	lsls	r3, r1, #6
 8004d38:	4651      	mov	r1, sl
 8004d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d3e:	4651      	mov	r1, sl
 8004d40:	018a      	lsls	r2, r1, #6
 8004d42:	4651      	mov	r1, sl
 8004d44:	ebb2 0801 	subs.w	r8, r2, r1
 8004d48:	4659      	mov	r1, fp
 8004d4a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d62:	4690      	mov	r8, r2
 8004d64:	4699      	mov	r9, r3
 8004d66:	4623      	mov	r3, r4
 8004d68:	eb18 0303 	adds.w	r3, r8, r3
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	462b      	mov	r3, r5
 8004d70:	eb49 0303 	adc.w	r3, r9, r3
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d82:	4629      	mov	r1, r5
 8004d84:	024b      	lsls	r3, r1, #9
 8004d86:	4621      	mov	r1, r4
 8004d88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	024a      	lsls	r2, r1, #9
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
 8004d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d96:	2200      	movs	r2, #0
 8004d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004da0:	f7fb fa12 	bl	80001c8 <__aeabi_uldivmod>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4613      	mov	r3, r2
 8004daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dac:	e058      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dae:	4b38      	ldr	r3, [pc, #224]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	099b      	lsrs	r3, r3, #6
 8004db4:	2200      	movs	r2, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	4611      	mov	r1, r2
 8004dba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dbe:	623b      	str	r3, [r7, #32]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	f04f 0000 	mov.w	r0, #0
 8004dd0:	f04f 0100 	mov.w	r1, #0
 8004dd4:	0159      	lsls	r1, r3, #5
 8004dd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dda:	0150      	lsls	r0, r2, #5
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4641      	mov	r1, r8
 8004de2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004de6:	4649      	mov	r1, r9
 8004de8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004df8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e00:	ebb2 040a 	subs.w	r4, r2, sl
 8004e04:	eb63 050b 	sbc.w	r5, r3, fp
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	00eb      	lsls	r3, r5, #3
 8004e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e16:	00e2      	lsls	r2, r4, #3
 8004e18:	4614      	mov	r4, r2
 8004e1a:	461d      	mov	r5, r3
 8004e1c:	4643      	mov	r3, r8
 8004e1e:	18e3      	adds	r3, r4, r3
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	464b      	mov	r3, r9
 8004e24:	eb45 0303 	adc.w	r3, r5, r3
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e36:	4629      	mov	r1, r5
 8004e38:	028b      	lsls	r3, r1, #10
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e40:	4621      	mov	r1, r4
 8004e42:	028a      	lsls	r2, r1, #10
 8004e44:	4610      	mov	r0, r2
 8004e46:	4619      	mov	r1, r3
 8004e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	61fa      	str	r2, [r7, #28]
 8004e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e54:	f7fb f9b8 	bl	80001c8 <__aeabi_uldivmod>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	0c1b      	lsrs	r3, r3, #16
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e7a:	e002      	b.n	8004e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3750      	adds	r7, #80	; 0x50
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800
 8004e94:	00f42400 	.word	0x00f42400
 8004e98:	007a1200 	.word	0x007a1200

08004e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea0:	4b03      	ldr	r3, [pc, #12]	; (8004eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	20000080 	.word	0x20000080

08004eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004eb8:	f7ff fff0 	bl	8004e9c <HAL_RCC_GetHCLKFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	0a9b      	lsrs	r3, r3, #10
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	4903      	ldr	r1, [pc, #12]	; (8004ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	08007ffc 	.word	0x08007ffc

08004edc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d035      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f04:	4b62      	ldr	r3, [pc, #392]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f0a:	f7fc fd9d 	bl	8001a48 <HAL_GetTick>
 8004f0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f12:	f7fc fd99 	bl	8001a48 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e0b0      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f24:	4b5b      	ldr	r3, [pc, #364]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	019a      	lsls	r2, r3, #6
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	071b      	lsls	r3, r3, #28
 8004f3c:	4955      	ldr	r1, [pc, #340]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f44:	4b52      	ldr	r3, [pc, #328]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f4a:	f7fc fd7d 	bl	8001a48 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f50:	e008      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f52:	f7fc fd79 	bl	8001a48 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e090      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f64:	4b4b      	ldr	r3, [pc, #300]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8083 	beq.w	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	4b44      	ldr	r3, [pc, #272]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	4a43      	ldr	r2, [pc, #268]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8e:	4b41      	ldr	r3, [pc, #260]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f9a:	4b3f      	ldr	r3, [pc, #252]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a3e      	ldr	r2, [pc, #248]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa6:	f7fc fd4f 	bl	8001a48 <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fae:	f7fc fd4b 	bl	8001a48 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e062      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fc0:	4b35      	ldr	r3, [pc, #212]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fcc:	4b31      	ldr	r3, [pc, #196]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d02f      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d028      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fea:	4b2a      	ldr	r3, [pc, #168]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ff4:	4b29      	ldr	r3, [pc, #164]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ffa:	4b28      	ldr	r3, [pc, #160]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005000:	4a24      	ldr	r2, [pc, #144]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005006:	4b23      	ldr	r3, [pc, #140]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b01      	cmp	r3, #1
 8005010:	d114      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005012:	f7fc fd19 	bl	8001a48 <HAL_GetTick>
 8005016:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005018:	e00a      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800501a:	f7fc fd15 	bl	8001a48 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f241 3288 	movw	r2, #5000	; 0x1388
 8005028:	4293      	cmp	r3, r2
 800502a:	d901      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e02a      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005030:	4b18      	ldr	r3, [pc, #96]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0ee      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005048:	d10d      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800505a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505e:	490d      	ldr	r1, [pc, #52]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005060:	4313      	orrs	r3, r2
 8005062:	608b      	str	r3, [r1, #8]
 8005064:	e005      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005070:	6093      	str	r3, [r2, #8]
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005074:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800507e:	4905      	ldr	r1, [pc, #20]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005080:	4313      	orrs	r3, r2
 8005082:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	42470068 	.word	0x42470068
 8005094:	40023800 	.word	0x40023800
 8005098:	40007000 	.word	0x40007000
 800509c:	42470e40 	.word	0x42470e40

080050a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d13e      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050be:	4b23      	ldr	r3, [pc, #140]	; (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d12f      	bne.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050d4:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050d6:	617b      	str	r3, [r7, #20]
          break;
 80050d8:	e02f      	b.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050da:	4b1c      	ldr	r3, [pc, #112]	; (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e6:	d108      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050e8:	4b18      	ldr	r3, [pc, #96]	; (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f0:	4a18      	ldr	r2, [pc, #96]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e007      	b.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050fa:	4b14      	ldr	r3, [pc, #80]	; (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005102:	4a15      	ldr	r2, [pc, #84]	; (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800510c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005110:	099b      	lsrs	r3, r3, #6
 8005112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005124:	0f1b      	lsrs	r3, r3, #28
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]
          break;
 8005132:	e002      	b.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
          break;
 8005138:	bf00      	nop
        }
      }
      break;
 800513a:	bf00      	nop
    }
  }
  return frequency;
 800513c:	697b      	ldr	r3, [r7, #20]
}
 800513e:	4618      	mov	r0, r3
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40023800 	.word	0x40023800
 8005150:	00bb8000 	.word	0x00bb8000
 8005154:	007a1200 	.word	0x007a1200
 8005158:	00f42400 	.word	0x00f42400

0800515c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e07b      	b.n	8005266 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800517e:	d009      	beq.n	8005194 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	61da      	str	r2, [r3, #28]
 8005186:	e005      	b.n	8005194 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fc fad8 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005218:	ea42 0103 	orr.w	r1, r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	f003 0104 	and.w	r1, r3, #4
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f003 0210 	and.w	r2, r3, #16
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005254:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e01a      	b.n	80052b6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005296:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7fc faab 	bl	80017f4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b08c      	sub	sp, #48	; 0x30
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052cc:	2301      	movs	r3, #1
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x26>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e18a      	b.n	80055fa <HAL_SPI_TransmitReceive+0x33c>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052ec:	f7fc fbac 	bl	8001a48 <HAL_GetTick>
 80052f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005302:	887b      	ldrh	r3, [r7, #2]
 8005304:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005306:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800530a:	2b01      	cmp	r3, #1
 800530c:	d00f      	beq.n	800532e <HAL_SPI_TransmitReceive+0x70>
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005314:	d107      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d103      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x68>
 800531e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005322:	2b04      	cmp	r3, #4
 8005324:	d003      	beq.n	800532e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005326:	2302      	movs	r3, #2
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800532c:	e15b      	b.n	80055e6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_SPI_TransmitReceive+0x82>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_SPI_TransmitReceive+0x82>
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d103      	bne.n	8005348 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005346:	e14e      	b.n	80055e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b04      	cmp	r3, #4
 8005352:	d003      	beq.n	800535c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2205      	movs	r2, #5
 8005358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	887a      	ldrh	r2, [r7, #2]
 800536c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	887a      	ldrh	r2, [r7, #2]
 8005372:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	887a      	ldrh	r2, [r7, #2]
 800537e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	887a      	ldrh	r2, [r7, #2]
 8005384:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d007      	beq.n	80053b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b8:	d178      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_SPI_TransmitReceive+0x10a>
 80053c2:	8b7b      	ldrh	r3, [r7, #26]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d166      	bne.n	8005496 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	881a      	ldrh	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	1c9a      	adds	r2, r3, #2
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ec:	e053      	b.n	8005496 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d11b      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x176>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d016      	beq.n	8005434 <HAL_SPI_TransmitReceive+0x176>
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d113      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	881a      	ldrh	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	1c9a      	adds	r2, r3, #2
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d119      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x1b8>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d014      	beq.n	8005476 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	b292      	uxth	r2, r2
 8005458:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	1c9a      	adds	r2, r3, #2
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005472:	2301      	movs	r3, #1
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005476:	f7fc fae7 	bl	8001a48 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005482:	429a      	cmp	r2, r3
 8005484:	d807      	bhi.n	8005496 <HAL_SPI_TransmitReceive+0x1d8>
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d003      	beq.n	8005496 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005494:	e0a7      	b.n	80055e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1a6      	bne.n	80053ee <HAL_SPI_TransmitReceive+0x130>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1a1      	bne.n	80053ee <HAL_SPI_TransmitReceive+0x130>
 80054aa:	e07c      	b.n	80055a6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_SPI_TransmitReceive+0x1fc>
 80054b4:	8b7b      	ldrh	r3, [r7, #26]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d16b      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	330c      	adds	r3, #12
 80054c4:	7812      	ldrb	r2, [r2, #0]
 80054c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e0:	e057      	b.n	8005592 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d11c      	bne.n	800552a <HAL_SPI_TransmitReceive+0x26c>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <HAL_SPI_TransmitReceive+0x26c>
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d114      	bne.n	800552a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	7812      	ldrb	r2, [r2, #0]
 800550c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d119      	bne.n	800556c <HAL_SPI_TransmitReceive+0x2ae>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d014      	beq.n	800556c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005568:	2301      	movs	r3, #1
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800556c:	f7fc fa6c 	bl	8001a48 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005578:	429a      	cmp	r2, r3
 800557a:	d803      	bhi.n	8005584 <HAL_SPI_TransmitReceive+0x2c6>
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d102      	bne.n	800558a <HAL_SPI_TransmitReceive+0x2cc>
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005590:	e029      	b.n	80055e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1a2      	bne.n	80054e2 <HAL_SPI_TransmitReceive+0x224>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d19d      	bne.n	80054e2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f8c0 	bl	8005730 <SPI_EndRxTxTransaction>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d006      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055c2:	e010      	b.n	80055e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10b      	bne.n	80055e4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	e000      	b.n	80055e6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80055e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3730      	adds	r7, #48	; 0x30
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005610:	b2db      	uxtb	r3, r3
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4613      	mov	r3, r2
 800562e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005630:	f7fc fa0a 	bl	8001a48 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	4413      	add	r3, r2
 800563e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005640:	f7fc fa02 	bl	8001a48 <HAL_GetTick>
 8005644:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005646:	4b39      	ldr	r3, [pc, #228]	; (800572c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	015b      	lsls	r3, r3, #5
 800564c:	0d1b      	lsrs	r3, r3, #20
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005656:	e054      	b.n	8005702 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565e:	d050      	beq.n	8005702 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005660:	f7fc f9f2 	bl	8001a48 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	429a      	cmp	r2, r3
 800566e:	d902      	bls.n	8005676 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d13d      	bne.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800568e:	d111      	bne.n	80056b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005698:	d004      	beq.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a2:	d107      	bne.n	80056b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056bc:	d10f      	bne.n	80056de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e017      	b.n	8005722 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	3b01      	subs	r3, #1
 8005700:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	bf0c      	ite	eq
 8005712:	2301      	moveq	r3, #1
 8005714:	2300      	movne	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	429a      	cmp	r2, r3
 800571e:	d19b      	bne.n	8005658 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3720      	adds	r7, #32
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000080 	.word	0x20000080

08005730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800573c:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <SPI_EndRxTxTransaction+0x7c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <SPI_EndRxTxTransaction+0x80>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	0d5b      	lsrs	r3, r3, #21
 8005748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800574c:	fb02 f303 	mul.w	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800575a:	d112      	bne.n	8005782 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	2180      	movs	r1, #128	; 0x80
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff ff5a 	bl	8005620 <SPI_WaitFlagStateUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d016      	beq.n	80057a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005776:	f043 0220 	orr.w	r2, r3, #32
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e00f      	b.n	80057a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	3b01      	subs	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005798:	2b80      	cmp	r3, #128	; 0x80
 800579a:	d0f2      	beq.n	8005782 <SPI_EndRxTxTransaction+0x52>
 800579c:	e000      	b.n	80057a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800579e:	bf00      	nop
  }

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000080 	.word	0x20000080
 80057b0:	165e9f81 	.word	0x165e9f81

080057b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b4:	b084      	sub	sp, #16
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	f107 001c 	add.w	r0, r7, #28
 80057c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d122      	bne.n	8005812 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d105      	bne.n	8005806 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f9c0 	bl	8005b8c <USB_CoreReset>
 800580c:	4603      	mov	r3, r0
 800580e:	73fb      	strb	r3, [r7, #15]
 8005810:	e01a      	b.n	8005848 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f9b4 	bl	8005b8c <USB_CoreReset>
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
 800583a:	e005      	b.n	8005848 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	2b01      	cmp	r3, #1
 800584c:	d10b      	bne.n	8005866 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f043 0206 	orr.w	r2, r3, #6
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f043 0220 	orr.w	r2, r3, #32
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005866:	7bfb      	ldrb	r3, [r7, #15]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005872:	b004      	add	sp, #16
 8005874:	4770      	bx	lr

08005876 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f043 0201 	orr.w	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f023 0201 	bic.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d115      	bne.n	8005908 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058e8:	2001      	movs	r0, #1
 80058ea:	f7fc f8b9 	bl	8001a60 <HAL_Delay>
      ms++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f93a 	bl	8005b6e <USB_GetMode>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d01e      	beq.n	800593e <USB_SetCurrentMode+0x84>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b31      	cmp	r3, #49	; 0x31
 8005904:	d9f0      	bls.n	80058e8 <USB_SetCurrentMode+0x2e>
 8005906:	e01a      	b.n	800593e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d115      	bne.n	800593a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800591a:	2001      	movs	r0, #1
 800591c:	f7fc f8a0 	bl	8001a60 <HAL_Delay>
      ms++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f921 	bl	8005b6e <USB_GetMode>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <USB_SetCurrentMode+0x84>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b31      	cmp	r3, #49	; 0x31
 8005936:	d9f0      	bls.n	800591a <USB_SetCurrentMode+0x60>
 8005938:	e001      	b.n	800593e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e005      	b.n	800594a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b32      	cmp	r3, #50	; 0x32
 8005942:	d101      	bne.n	8005948 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3301      	adds	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <USB_FlushTxFifo+0x64>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e01b      	b.n	80059ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	daf2      	bge.n	8005962 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	019b      	lsls	r3, r3, #6
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4a08      	ldr	r2, [pc, #32]	; (80059b8 <USB_FlushTxFifo+0x64>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e006      	b.n	80059ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d0f0      	beq.n	800598c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	00030d40 	.word	0x00030d40

080059bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a11      	ldr	r2, [pc, #68]	; (8005a18 <USB_FlushRxFifo+0x5c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e018      	b.n	8005a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	daf2      	bge.n	80059c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2210      	movs	r2, #16
 80059ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3301      	adds	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4a08      	ldr	r2, [pc, #32]	; (8005a18 <USB_FlushRxFifo+0x5c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e006      	b.n	8005a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d0f0      	beq.n	80059ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	00030d40 	.word	0x00030d40

08005a1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b089      	sub	sp, #36	; 0x24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	4611      	mov	r1, r2
 8005a28:	461a      	mov	r2, r3
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	71fb      	strb	r3, [r7, #7]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d123      	bne.n	8005a8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a42:	88bb      	ldrh	r3, [r7, #4]
 8005a44:	3303      	adds	r3, #3
 8005a46:	089b      	lsrs	r3, r3, #2
 8005a48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e018      	b.n	8005a82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	031a      	lsls	r2, r3, #12
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	3301      	adds	r3, #1
 8005a68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	3301      	adds	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d3e2      	bcc.n	8005a50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3724      	adds	r7, #36	; 0x24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b08b      	sub	sp, #44	; 0x2c
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	089b      	lsrs	r3, r3, #2
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	623b      	str	r3, [r7, #32]
 8005ac2:	e014      	b.n	8005aee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	3301      	adds	r3, #1
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	3301      	adds	r3, #1
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	3301      	adds	r3, #1
 8005aec:	623b      	str	r3, [r7, #32]
 8005aee:	6a3a      	ldr	r2, [r7, #32]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d3e6      	bcc.n	8005ac4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005af6:	8bfb      	ldrh	r3, [r7, #30]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01e      	beq.n	8005b3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b06:	461a      	mov	r2, r3
 8005b08:	f107 0310 	add.w	r3, r7, #16
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	701a      	strb	r2, [r3, #0]
      i++;
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	3301      	adds	r3, #1
 8005b26:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b2e:	8bfb      	ldrh	r3, [r7, #30]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b34:	8bfb      	ldrh	r3, [r7, #30]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1ea      	bne.n	8005b10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	372c      	adds	r7, #44	; 0x2c
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b60:	68fb      	ldr	r3, [r7, #12]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a13      	ldr	r2, [pc, #76]	; (8005bf0 <USB_CoreReset+0x64>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e01b      	b.n	8005be2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	daf2      	bge.n	8005b98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f043 0201 	orr.w	r2, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <USB_CoreReset+0x64>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d901      	bls.n	8005bd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e006      	b.n	8005be2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d0f0      	beq.n	8005bc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	00030d40 	.word	0x00030d40

08005bf4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c14:	461a      	mov	r2, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d018      	beq.n	8005c7c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d10a      	bne.n	8005c66 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c5e:	f043 0304 	orr.w	r3, r3, #4
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e014      	b.n	8005c90 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c74:	f023 0304 	bic.w	r3, r3, #4
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e009      	b.n	8005c90 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c8a:	f023 0304 	bic.w	r3, r3, #4
 8005c8e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c90:	2110      	movs	r1, #16
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fe5e 	bl	8005954 <USB_FlushTxFifo>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff fe8a 	bl	80059bc <USB_FlushRxFifo>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	e015      	b.n	8005ce4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d3e5      	bcc.n	8005cb8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a13      	ldr	r2, [pc, #76]	; (8005d60 <USB_HostInit+0x16c>)
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a13      	ldr	r2, [pc, #76]	; (8005d64 <USB_HostInit+0x170>)
 8005d18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d1c:	e009      	b.n	8005d32 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2280      	movs	r2, #128	; 0x80
 8005d22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a10      	ldr	r2, [pc, #64]	; (8005d68 <USB_HostInit+0x174>)
 8005d28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a0f      	ldr	r2, [pc, #60]	; (8005d6c <USB_HostInit+0x178>)
 8005d2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d105      	bne.n	8005d44 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f043 0210 	orr.w	r2, r3, #16
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <USB_HostInit+0x17c>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d5c:	b004      	add	sp, #16
 8005d5e:	4770      	bx	lr
 8005d60:	01000200 	.word	0x01000200
 8005d64:	00e00300 	.word	0x00e00300
 8005d68:	00600080 	.word	0x00600080
 8005d6c:	004000e0 	.word	0x004000e0
 8005d70:	a3200008 	.word	0xa3200008

08005d74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d92:	f023 0303 	bic.w	r3, r3, #3
 8005d96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	68f9      	ldr	r1, [r7, #12]
 8005da8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005dac:	4313      	orrs	r3, r2
 8005dae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d107      	bne.n	8005dc6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005dc2:	6053      	str	r3, [r2, #4]
 8005dc4:	e009      	b.n	8005dda <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d106      	bne.n	8005dda <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f241 7370 	movw	r3, #6000	; 0x1770
 8005dd8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d109      	bne.n	8005e2c <USB_DriveVbus+0x44>
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d106      	bne.n	8005e2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e36:	d109      	bne.n	8005e4c <USB_DriveVbus+0x64>
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	0c5b      	lsrs	r3, r3, #17
 8005e78:	f003 0303 	and.w	r3, r3, #3
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	b29b      	uxth	r3, r3
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
	...

08005eac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	70fb      	strb	r3, [r7, #3]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	70bb      	strb	r3, [r7, #2]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eda:	461a      	mov	r2, r3
 8005edc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ee2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d87e      	bhi.n	8005fe8 <USB_HC_Init+0x13c>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <USB_HC_Init+0x44>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005fab 	.word	0x08005fab
 8005ef8:	08005f01 	.word	0x08005f01
 8005efc:	08005f6d 	.word	0x08005f6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	da10      	bge.n	8005f3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f3c:	e057      	b.n	8005fee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d051      	beq.n	8005fee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	78fa      	ldrb	r2, [r7, #3]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f68:	60d3      	str	r3, [r2, #12]
      break;
 8005f6a:	e040      	b.n	8005fee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da34      	bge.n	8005ff2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fa8:	e023      	b.n	8005ff2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f240 2325 	movw	r3, #549	; 0x225
 8005fbc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	da17      	bge.n	8005ff6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005fe4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005fe6:	e006      	b.n	8005ff6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	77fb      	strb	r3, [r7, #31]
      break;
 8005fec:	e004      	b.n	8005ff8 <USB_HC_Init+0x14c>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <USB_HC_Init+0x14c>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <USB_HC_Init+0x14c>
      break;
 8005ff6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	440a      	add	r2, r1
 800600e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006012:	f043 0302 	orr.w	r3, r3, #2
 8006016:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601e:	699a      	ldr	r2, [r3, #24]
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	2101      	movs	r1, #1
 8006028:	fa01 f303 	lsl.w	r3, r1, r3
 800602c:	6939      	ldr	r1, [r7, #16]
 800602e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006032:	4313      	orrs	r3, r2
 8006034:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006042:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006046:	2b00      	cmp	r3, #0
 8006048:	da03      	bge.n	8006052 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800604a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	e001      	b.n	8006056 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff feff 	bl	8005e5a <USB_GetHostSpeed>
 800605c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800605e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006062:	2b02      	cmp	r3, #2
 8006064:	d106      	bne.n	8006074 <USB_HC_Init+0x1c8>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d003      	beq.n	8006074 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800606c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	e001      	b.n	8006078 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006078:	787b      	ldrb	r3, [r7, #1]
 800607a:	059b      	lsls	r3, r3, #22
 800607c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006080:	78bb      	ldrb	r3, [r7, #2]
 8006082:	02db      	lsls	r3, r3, #11
 8006084:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006088:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800608a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800608e:	049b      	lsls	r3, r3, #18
 8006090:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006094:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006096:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006098:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800609c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	0159      	lsls	r1, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	440b      	add	r3, r1
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060b4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d003      	beq.n	80060c6 <USB_HC_Init+0x21a>
 80060be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10f      	bne.n	80060e6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80060e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800610c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d02d      	beq.n	8006176 <USB_HC_StartXfer+0x86>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d129      	bne.n	8006176 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d117      	bne.n	8006158 <USB_HC_StartXfer+0x68>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	79db      	ldrb	r3, [r3, #7]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <USB_HC_StartXfer+0x48>
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	79db      	ldrb	r3, [r3, #7]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d10f      	bne.n	8006158 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	6a3a      	ldr	r2, [r7, #32]
 800614c:	440a      	add	r2, r1
 800614e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10b      	bne.n	8006176 <USB_HC_StartXfer+0x86>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	795b      	ldrb	r3, [r3, #5]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d107      	bne.n	8006176 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	4619      	mov	r1, r3
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fa0f 	bl	8006590 <USB_DoPing>
      return HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	e0f8      	b.n	8006368 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d018      	beq.n	80061b0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	8912      	ldrh	r2, [r2, #8]
 8006186:	4413      	add	r3, r2
 8006188:	3b01      	subs	r3, #1
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	8912      	ldrh	r2, [r2, #8]
 800618e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006192:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006194:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006196:	8b7b      	ldrh	r3, [r7, #26]
 8006198:	429a      	cmp	r2, r3
 800619a:	d90b      	bls.n	80061b4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800619c:	8b7b      	ldrh	r3, [r7, #26]
 800619e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	8912      	ldrh	r2, [r2, #8]
 80061a6:	fb03 f202 	mul.w	r2, r3, r2
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	611a      	str	r2, [r3, #16]
 80061ae:	e001      	b.n	80061b4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80061b0:	2301      	movs	r3, #1
 80061b2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	78db      	ldrb	r3, [r3, #3]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	8912      	ldrh	r2, [r2, #8]
 80061c2:	fb03 f202 	mul.w	r2, r3, r2
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	611a      	str	r2, [r3, #16]
 80061ca:	e003      	b.n	80061d4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	695a      	ldr	r2, [r3, #20]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061de:	04d9      	lsls	r1, r3, #19
 80061e0:	4b63      	ldr	r3, [pc, #396]	; (8006370 <USB_HC_StartXfer+0x280>)
 80061e2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061e4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	7a9b      	ldrb	r3, [r3, #10]
 80061ea:	075b      	lsls	r3, r3, #29
 80061ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061f0:	69f9      	ldr	r1, [r7, #28]
 80061f2:	0148      	lsls	r0, r1, #5
 80061f4:	6a39      	ldr	r1, [r7, #32]
 80061f6:	4401      	add	r1, r0
 80061f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061fc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061fe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	68d9      	ldr	r1, [r3, #12]
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	4413      	add	r3, r2
 8006212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006216:	460a      	mov	r2, r1
 8006218:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	bf0c      	ite	eq
 800622a:	2301      	moveq	r3, #1
 800622c:	2300      	movne	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	4413      	add	r3, r2
 800623a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	6a3a      	ldr	r2, [r7, #32]
 8006246:	440a      	add	r2, r1
 8006248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800624c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006250:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	4413      	add	r3, r2
 800625a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	7e7b      	ldrb	r3, [r7, #25]
 8006262:	075b      	lsls	r3, r3, #29
 8006264:	69f9      	ldr	r1, [r7, #28]
 8006266:	0148      	lsls	r0, r1, #5
 8006268:	6a39      	ldr	r1, [r7, #32]
 800626a:	4401      	add	r1, r0
 800626c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006270:	4313      	orrs	r3, r2
 8006272:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800628a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	78db      	ldrb	r3, [r3, #3]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	e003      	b.n	80062a6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062a4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ba:	461a      	mov	r2, r3
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e04e      	b.n	8006368 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	78db      	ldrb	r3, [r3, #3]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d149      	bne.n	8006366 <USB_HC_StartXfer+0x276>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d045      	beq.n	8006366 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	79db      	ldrb	r3, [r3, #7]
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d830      	bhi.n	8006344 <USB_HC_StartXfer+0x254>
 80062e2:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <USB_HC_StartXfer+0x1f8>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	0800631d 	.word	0x0800631d
 80062f0:	080062f9 	.word	0x080062f9
 80062f4:	0800631d 	.word	0x0800631d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	3303      	adds	r3, #3
 80062fe:	089b      	lsrs	r3, r3, #2
 8006300:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006302:	8afa      	ldrh	r2, [r7, #22]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	b29b      	uxth	r3, r3
 800630a:	429a      	cmp	r2, r3
 800630c:	d91c      	bls.n	8006348 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f043 0220 	orr.w	r2, r3, #32
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	619a      	str	r2, [r3, #24]
        }
        break;
 800631a:	e015      	b.n	8006348 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	3303      	adds	r3, #3
 8006322:	089b      	lsrs	r3, r3, #2
 8006324:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006326:	8afa      	ldrh	r2, [r7, #22]
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	b29b      	uxth	r3, r3
 8006332:	429a      	cmp	r2, r3
 8006334:	d90a      	bls.n	800634c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	619a      	str	r2, [r3, #24]
        }
        break;
 8006342:	e003      	b.n	800634c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006344:	bf00      	nop
 8006346:	e002      	b.n	800634e <USB_HC_StartXfer+0x25e>
        break;
 8006348:	bf00      	nop
 800634a:	e000      	b.n	800634e <USB_HC_StartXfer+0x25e>
        break;
 800634c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68d9      	ldr	r1, [r3, #12]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	785a      	ldrb	r2, [r3, #1]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	b29b      	uxth	r3, r3
 800635c:	2000      	movs	r0, #0
 800635e:	9000      	str	r0, [sp, #0]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff fb5b 	bl	8005a1c <USB_WritePacket>
  }

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3728      	adds	r7, #40	; 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	1ff80000 	.word	0x1ff80000

08006374 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	b29b      	uxth	r3, r3
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006396:	b480      	push	{r7}
 8006398:	b089      	sub	sp, #36	; 0x24
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	460b      	mov	r3, r1
 80063a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	0c9b      	lsrs	r3, r3, #18
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	0fdb      	lsrs	r3, r3, #31
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d104      	bne.n	80063f0 <USB_HC_Halt+0x5a>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	e0c8      	b.n	8006582 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <USB_HC_Halt+0x66>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d163      	bne.n	80064c4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	4413      	add	r3, r2
 8006404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	0151      	lsls	r1, r2, #5
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	440a      	add	r2, r1
 8006412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800641a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	f040 80ab 	bne.w	8006580 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d133      	bne.n	800649e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	440a      	add	r2, r1
 800644c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006454:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	4413      	add	r3, r2
 800645e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	0151      	lsls	r1, r2, #5
 8006468:	69fa      	ldr	r2, [r7, #28]
 800646a:	440a      	add	r2, r1
 800646c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006474:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3301      	adds	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006482:	d81d      	bhi.n	80064c0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800649a:	d0ec      	beq.n	8006476 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800649c:	e070      	b.n	8006580 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064be:	e05f      	b.n	8006580 <USB_HC_Halt+0x1ea>
            break;
 80064c0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064c2:	e05d      	b.n	8006580 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d133      	bne.n	800655c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	440a      	add	r2, r1
 800650a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800650e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006512:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	4413      	add	r3, r2
 800651c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	440a      	add	r2, r1
 800652a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800652e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006532:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006540:	d81d      	bhi.n	800657e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006558:	d0ec      	beq.n	8006534 <USB_HC_Halt+0x19e>
 800655a:	e011      	b.n	8006580 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	440a      	add	r2, r1
 8006572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006576:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	e000      	b.n	8006580 <USB_HC_Halt+0x1ea>
          break;
 800657e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3724      	adds	r7, #36	; 0x24
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
	...

08006590 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065a4:	2301      	movs	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	04da      	lsls	r2, r3, #19
 80065ac:	4b15      	ldr	r3, [pc, #84]	; (8006604 <USB_DoPing+0x74>)
 80065ae:	4013      	ands	r3, r2
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ee:	461a      	mov	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	1ff80000 	.word	0x1ff80000

08006608 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff f93b 	bl	8005898 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006622:	2110      	movs	r1, #16
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff f995 	bl	8005954 <USB_FlushTxFifo>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff f9c1 	bl	80059bc <USB_FlushRxFifo>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006644:	2300      	movs	r3, #0
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	e01f      	b.n	800668a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006660:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006668:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006670:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	461a      	mov	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	3301      	adds	r3, #1
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b0f      	cmp	r3, #15
 800668e:	d9dc      	bls.n	800664a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	e034      	b.n	8006700 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	461a      	mov	r2, r3
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066dc:	d80c      	bhi.n	80066f8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066f4:	d0ec      	beq.n	80066d0 <USB_StopHost+0xc8>
 80066f6:	e000      	b.n	80066fa <USB_StopHost+0xf2>
        break;
 80066f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	3301      	adds	r3, #1
 80066fe:	61bb      	str	r3, [r7, #24]
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b0f      	cmp	r3, #15
 8006704:	d9c7      	bls.n	8006696 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800670c:	461a      	mov	r2, r3
 800670e:	f04f 33ff 	mov.w	r3, #4294967295
 8006712:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f04f 32ff 	mov.w	r2, #4294967295
 800671a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff f8aa 	bl	8005876 <USB_EnableGlobalInt>

  return ret;
 8006722:	7ffb      	ldrb	r3, [r7, #31]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800672c:	b590      	push	{r4, r7, lr}
 800672e:	b089      	sub	sp, #36	; 0x24
 8006730:	af04      	add	r7, sp, #16
 8006732:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006734:	2301      	movs	r3, #1
 8006736:	2202      	movs	r2, #2
 8006738:	2102      	movs	r1, #2
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fc66 	bl	800700c <USBH_FindInterface>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	2bff      	cmp	r3, #255	; 0xff
 8006748:	d002      	beq.n	8006750 <USBH_CDC_InterfaceInit+0x24>
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d901      	bls.n	8006754 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006750:	2302      	movs	r3, #2
 8006752:	e13d      	b.n	80069d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fc3b 	bl	8006fd4 <USBH_SelectInterface>
 800675e:	4603      	mov	r3, r0
 8006760:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006768:	2302      	movs	r3, #2
 800676a:	e131      	b.n	80069d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006772:	2050      	movs	r0, #80	; 0x50
 8006774:	f001 fb12 	bl	8007d9c <malloc>
 8006778:	4603      	mov	r3, r0
 800677a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800678c:	2302      	movs	r3, #2
 800678e:	e11f      	b.n	80069d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006790:	2250      	movs	r2, #80	; 0x50
 8006792:	2100      	movs	r1, #0
 8006794:	68b8      	ldr	r0, [r7, #8]
 8006796:	f001 fb11 	bl	8007dbc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	211a      	movs	r1, #26
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	4413      	add	r3, r2
 80067a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	b25b      	sxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da15      	bge.n	80067de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	211a      	movs	r1, #26
 80067b8:	fb01 f303 	mul.w	r3, r1, r3
 80067bc:	4413      	add	r3, r2
 80067be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067c2:	781a      	ldrb	r2, [r3, #0]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	211a      	movs	r1, #26
 80067ce:	fb01 f303 	mul.w	r3, r1, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067d8:	881a      	ldrh	r2, [r3, #0]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	785b      	ldrb	r3, [r3, #1]
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 ff9c 	bl	8007722 <USBH_AllocPipe>
 80067ea:	4603      	mov	r3, r0
 80067ec:	461a      	mov	r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	7819      	ldrb	r1, [r3, #0]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	7858      	ldrb	r0, [r3, #1]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	8952      	ldrh	r2, [r2, #10]
 800680a:	9202      	str	r2, [sp, #8]
 800680c:	2203      	movs	r2, #3
 800680e:	9201      	str	r2, [sp, #4]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	4623      	mov	r3, r4
 8006814:	4602      	mov	r2, r0
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 ff54 	bl	80076c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2200      	movs	r2, #0
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fa17 	bl	8007c58 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800682a:	2300      	movs	r3, #0
 800682c:	2200      	movs	r2, #0
 800682e:	210a      	movs	r1, #10
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fbeb 	bl	800700c <USBH_FindInterface>
 8006836:	4603      	mov	r3, r0
 8006838:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	2bff      	cmp	r3, #255	; 0xff
 800683e:	d002      	beq.n	8006846 <USBH_CDC_InterfaceInit+0x11a>
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d901      	bls.n	800684a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006846:	2302      	movs	r3, #2
 8006848:	e0c2      	b.n	80069d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	211a      	movs	r1, #26
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	4413      	add	r3, r2
 8006856:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	b25b      	sxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	da16      	bge.n	8006890 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	211a      	movs	r1, #26
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	4413      	add	r3, r2
 800686e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006872:	781a      	ldrb	r2, [r3, #0]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	211a      	movs	r1, #26
 800687e:	fb01 f303 	mul.w	r3, r1, r3
 8006882:	4413      	add	r3, r2
 8006884:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006888:	881a      	ldrh	r2, [r3, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	835a      	strh	r2, [r3, #26]
 800688e:	e015      	b.n	80068bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	211a      	movs	r1, #26
 8006896:	fb01 f303 	mul.w	r3, r1, r3
 800689a:	4413      	add	r3, r2
 800689c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	211a      	movs	r1, #26
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068b6:	881a      	ldrh	r2, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	211a      	movs	r1, #26
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	b25b      	sxtb	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	da16      	bge.n	8006902 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	211a      	movs	r1, #26
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	4413      	add	r3, r2
 80068e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	211a      	movs	r1, #26
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068fa:	881a      	ldrh	r2, [r3, #0]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	835a      	strh	r2, [r3, #26]
 8006900:	e015      	b.n	800692e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	211a      	movs	r1, #26
 8006908:	fb01 f303 	mul.w	r3, r1, r3
 800690c:	4413      	add	r3, r2
 800690e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	211a      	movs	r1, #26
 800691e:	fb01 f303 	mul.w	r3, r1, r3
 8006922:	4413      	add	r3, r2
 8006924:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006928:	881a      	ldrh	r2, [r3, #0]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	7b9b      	ldrb	r3, [r3, #14]
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fef4 	bl	8007722 <USBH_AllocPipe>
 800693a:	4603      	mov	r3, r0
 800693c:	461a      	mov	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	7bdb      	ldrb	r3, [r3, #15]
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 feea 	bl	8007722 <USBH_AllocPipe>
 800694e:	4603      	mov	r3, r0
 8006950:	461a      	mov	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	7b59      	ldrb	r1, [r3, #13]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	7b98      	ldrb	r0, [r3, #14]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	8b12      	ldrh	r2, [r2, #24]
 800696e:	9202      	str	r2, [sp, #8]
 8006970:	2202      	movs	r2, #2
 8006972:	9201      	str	r2, [sp, #4]
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	4623      	mov	r3, r4
 8006978:	4602      	mov	r2, r0
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fea2 	bl	80076c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	7b19      	ldrb	r1, [r3, #12]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	7bd8      	ldrb	r0, [r3, #15]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	8b52      	ldrh	r2, [r2, #26]
 8006998:	9202      	str	r2, [sp, #8]
 800699a:	2202      	movs	r2, #2
 800699c:	9201      	str	r2, [sp, #4]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	4623      	mov	r3, r4
 80069a2:	4602      	mov	r2, r0
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fe8d 	bl	80076c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	7b5b      	ldrb	r3, [r3, #13]
 80069b6:	2200      	movs	r2, #0
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 f94c 	bl	8007c58 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	7b1b      	ldrb	r3, [r3, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 f945 	bl	8007c58 <USBH_LL_SetToggle>

  return USBH_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd90      	pop	{r4, r7, pc}

080069d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00e      	beq.n	8006a10 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fe82 	bl	8007702 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fead 	bl	8007764 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	7b1b      	ldrb	r3, [r3, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00e      	beq.n	8006a36 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	7b1b      	ldrb	r3, [r3, #12]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fe6f 	bl	8007702 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	7b1b      	ldrb	r3, [r3, #12]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fe9a 	bl	8007764 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	7b5b      	ldrb	r3, [r3, #13]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00e      	beq.n	8006a5c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	7b5b      	ldrb	r3, [r3, #13]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fe5c 	bl	8007702 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	7b5b      	ldrb	r3, [r3, #13]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fe87 	bl	8007764 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00b      	beq.n	8006a80 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 f99b 	bl	8007dac <free>
    phost->pActiveClass->pData = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3340      	adds	r3, #64	; 0x40
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f8b1 	bl	8006c0a <GetLineCoding>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006aac:	7afb      	ldrb	r3, [r7, #11]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d105      	bne.n	8006abe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ab8:	2102      	movs	r1, #2
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006abe:	7afb      	ldrb	r3, [r7, #11]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d877      	bhi.n	8006bdc <USBH_CDC_Process+0x114>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <USBH_CDC_Process+0x2c>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b09 	.word	0x08006b09
 8006af8:	08006b0f 	.word	0x08006b0f
 8006afc:	08006b3f 	.word	0x08006b3f
 8006b00:	08006bb3 	.word	0x08006bb3
 8006b04:	08006bc1 	.word	0x08006bc1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b0c:	e06d      	b.n	8006bea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f897 	bl	8006c48 <SetLineCoding>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b2c:	e058      	b.n	8006be0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d055      	beq.n	8006be0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2204      	movs	r2, #4
 8006b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b3c:	e050      	b.n	8006be0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3340      	adds	r3, #64	; 0x40
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f860 	bl	8006c0a <GetLineCoding>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d126      	bne.n	8006ba2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b66:	791b      	ldrb	r3, [r3, #4]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d13b      	bne.n	8006be4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b76:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d133      	bne.n	8006be4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b86:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d12b      	bne.n	8006be4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b94:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d124      	bne.n	8006be4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f958 	bl	8006e50 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ba0:	e020      	b.n	8006be4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d01d      	beq.n	8006be4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2204      	movs	r2, #4
 8006bac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bb0:	e018      	b.n	8006be4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f867 	bl	8006c86 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f8da 	bl	8006d72 <CDC_ProcessReception>
      break;
 8006bbe:	e014      	b.n	8006bea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fb08 	bl	80071d8 <USBH_ClrFeature>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006bda:	e005      	b.n	8006be8 <USBH_CDC_Process+0x120>

    default:
      break;
 8006bdc:	bf00      	nop
 8006bde:	e004      	b.n	8006bea <USBH_CDC_Process+0x122>
      break;
 8006be0:	bf00      	nop
 8006be2:	e002      	b.n	8006bea <USBH_CDC_Process+0x122>
      break;
 8006be4:	bf00      	nop
 8006be6:	e000      	b.n	8006bea <USBH_CDC_Process+0x122>
      break;
 8006be8:	bf00      	nop

  }

  return status;
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	22a1      	movs	r2, #161	; 0xa1
 8006c18:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2221      	movs	r2, #33	; 0x21
 8006c1e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2207      	movs	r2, #7
 8006c30:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2207      	movs	r2, #7
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 faf1 	bl	8007220 <USBH_CtlReq>
 8006c3e:	4603      	mov	r3, r0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2221      	movs	r2, #33	; 0x21
 8006c56:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2207      	movs	r2, #7
 8006c6e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2207      	movs	r2, #7
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fad2 	bl	8007220 <USBH_CtlReq>
 8006c7c:	4603      	mov	r3, r0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b086      	sub	sp, #24
 8006c8a:	af02      	add	r7, sp, #8
 8006c8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d002      	beq.n	8006cac <CDC_ProcessTransmission+0x26>
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d023      	beq.n	8006cf2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006caa:	e05e      	b.n	8006d6a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	8b12      	ldrh	r2, [r2, #24]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d90b      	bls.n	8006cd0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	69d9      	ldr	r1, [r3, #28]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8b1a      	ldrh	r2, [r3, #24]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	7b5b      	ldrb	r3, [r3, #13]
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	9000      	str	r0, [sp, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fcb8 	bl	800763e <USBH_BulkSendData>
 8006cce:	e00b      	b.n	8006ce8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	7b5b      	ldrb	r3, [r3, #13]
 8006cde:	2001      	movs	r0, #1
 8006ce0:	9000      	str	r0, [sp, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fcab 	bl	800763e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006cf0:	e03b      	b.n	8006d6a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	7b5b      	ldrb	r3, [r3, #13]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 ff83 	bl	8007c04 <USBH_LL_GetURBState>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d02:	7afb      	ldrb	r3, [r7, #11]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d128      	bne.n	8006d5a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	8b12      	ldrh	r2, [r2, #24]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d90e      	bls.n	8006d32 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	8b12      	ldrh	r2, [r2, #24]
 8006d1c:	1a9a      	subs	r2, r3, r2
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	8b12      	ldrh	r2, [r2, #24]
 8006d2a:	441a      	add	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	61da      	str	r2, [r3, #28]
 8006d30:	e002      	b.n	8006d38 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d48:	e00e      	b.n	8006d68 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f868 	bl	8006e28 <USBH_CDC_TransmitCallback>
      break;
 8006d58:	e006      	b.n	8006d68 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d5a:	7afb      	ldrb	r3, [r7, #11]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d103      	bne.n	8006d68 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d68:	bf00      	nop
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b086      	sub	sp, #24
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d002      	beq.n	8006d98 <CDC_ProcessReception+0x26>
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d00e      	beq.n	8006db4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006d96:	e043      	b.n	8006e20 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	6a19      	ldr	r1, [r3, #32]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	8b5a      	ldrh	r2, [r3, #26]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	7b1b      	ldrb	r3, [r3, #12]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fc6f 	bl	8007688 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2204      	movs	r2, #4
 8006dae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006db2:	e035      	b.n	8006e20 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	7b1b      	ldrb	r3, [r3, #12]
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 ff22 	bl	8007c04 <USBH_LL_GetURBState>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006dc4:	7cfb      	ldrb	r3, [r7, #19]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d129      	bne.n	8006e1e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	7b1b      	ldrb	r3, [r3, #12]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fe85 	bl	8007ae0 <USBH_LL_GetLastXferSize>
 8006dd6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d016      	beq.n	8006e10 <CDC_ProcessReception+0x9e>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	8b5b      	ldrh	r3, [r3, #26]
 8006de6:	461a      	mov	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d910      	bls.n	8006e10 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1ad2      	subs	r2, r2, r3
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6a1a      	ldr	r2, [r3, #32]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	441a      	add	r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2203      	movs	r2, #3
 8006e0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e0e:	e006      	b.n	8006e1e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f80f 	bl	8006e3c <USBH_CDC_ReceiveCallback>
      break;
 8006e1e:	bf00      	nop
  }
}
 8006e20:	bf00      	nop
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e029      	b.n	8006ed0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	79fa      	ldrb	r2, [r7, #7]
 8006e80:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f81f 	bl	8006ed8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fd97 	bl	80079fc <USBH_LL_Init>

  return USBH_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	e009      	b.n	8006efe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	33e0      	adds	r3, #224	; 0xe0
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b0f      	cmp	r3, #15
 8006f02:	d9f2      	bls.n	8006eea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	e009      	b.n	8006f1e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f14:	2200      	movs	r2, #0
 8006f16:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f24:	d3f1      	bcc.n	8006f0a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2240      	movs	r2, #64	; 0x40
 8006f4a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d016      	beq.n	8006fc2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10e      	bne.n	8006fbc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fa4:	1c59      	adds	r1, r3, #1
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	33de      	adds	r3, #222	; 0xde
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]
 8006fba:	e004      	b.n	8006fc6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	73fb      	strb	r3, [r7, #15]
 8006fc0:	e001      	b.n	8006fc6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006fea:	78fa      	ldrb	r2, [r7, #3]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d204      	bcs.n	8006ffa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ff8:	e001      	b.n	8006ffe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	4608      	mov	r0, r1
 8007016:	4611      	mov	r1, r2
 8007018:	461a      	mov	r2, r3
 800701a:	4603      	mov	r3, r0
 800701c:	70fb      	strb	r3, [r7, #3]
 800701e:	460b      	mov	r3, r1
 8007020:	70bb      	strb	r3, [r7, #2]
 8007022:	4613      	mov	r3, r2
 8007024:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007034:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007036:	e025      	b.n	8007084 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	221a      	movs	r2, #26
 800703c:	fb02 f303 	mul.w	r3, r2, r3
 8007040:	3308      	adds	r3, #8
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	3302      	adds	r3, #2
 8007048:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	795b      	ldrb	r3, [r3, #5]
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	429a      	cmp	r2, r3
 8007052:	d002      	beq.n	800705a <USBH_FindInterface+0x4e>
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	2bff      	cmp	r3, #255	; 0xff
 8007058:	d111      	bne.n	800707e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800705e:	78ba      	ldrb	r2, [r7, #2]
 8007060:	429a      	cmp	r2, r3
 8007062:	d002      	beq.n	800706a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007064:	78bb      	ldrb	r3, [r7, #2]
 8007066:	2bff      	cmp	r3, #255	; 0xff
 8007068:	d109      	bne.n	800707e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800706e:	787a      	ldrb	r2, [r7, #1]
 8007070:	429a      	cmp	r2, r3
 8007072:	d002      	beq.n	800707a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007074:	787b      	ldrb	r3, [r7, #1]
 8007076:	2bff      	cmp	r3, #255	; 0xff
 8007078:	d101      	bne.n	800707e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	e006      	b.n	800708c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800707e:	7dfb      	ldrb	r3, [r7, #23]
 8007080:	3301      	adds	r3, #1
 8007082:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d9d6      	bls.n	8007038 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800708a:	23ff      	movs	r3, #255	; 0xff
}
 800708c:	4618      	mov	r0, r3
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fce7 	bl	8007a74 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070a6:	2101      	movs	r1, #1
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fdbe 	bl	8007c2a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f804 	bl	80070fa <USBH_HandleSof>
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b0b      	cmp	r3, #11
 800710a:	d10a      	bne.n	8007122 <USBH_HandleSof+0x28>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
  }
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800713a:	bf00      	nop
}
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007156:	bf00      	nop
}
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fc7a 	bl	8007aaa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	791b      	ldrb	r3, [r3, #4]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fad1 	bl	8007764 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	795b      	ldrb	r3, [r3, #5]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 facb 	bl	8007764 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	789b      	ldrb	r3, [r3, #2]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d10f      	bne.n	800720c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80071fe:	78fb      	ldrb	r3, [r7, #3]
 8007200:	b29a      	uxth	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800720c:	2200      	movs	r2, #0
 800720e:	2100      	movs	r1, #0
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f805 	bl	8007220 <USBH_CtlReq>
 8007216:	4603      	mov	r3, r0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	789b      	ldrb	r3, [r3, #2]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d002      	beq.n	8007240 <USBH_CtlReq+0x20>
 800723a:	2b02      	cmp	r3, #2
 800723c:	d00f      	beq.n	800725e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800723e:	e027      	b.n	8007290 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	88fa      	ldrh	r2, [r7, #6]
 800724a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2201      	movs	r2, #1
 8007250:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2202      	movs	r2, #2
 8007256:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007258:	2301      	movs	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
      break;
 800725c:	e018      	b.n	8007290 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f81c 	bl	800729c <USBH_HandleControl>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <USBH_CtlReq+0x54>
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	2b03      	cmp	r3, #3
 8007272:	d106      	bne.n	8007282 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	761a      	strb	r2, [r3, #24]
      break;
 8007280:	e005      	b.n	800728e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d102      	bne.n	800728e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	709a      	strb	r2, [r3, #2]
      break;
 800728e:	bf00      	nop
  }
  return status;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80072a4:	2301      	movs	r3, #1
 80072a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	7e1b      	ldrb	r3, [r3, #24]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	2b0a      	cmp	r3, #10
 80072b4:	f200 8156 	bhi.w	8007564 <USBH_HandleControl+0x2c8>
 80072b8:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <USBH_HandleControl+0x24>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	080072ed 	.word	0x080072ed
 80072c4:	08007307 	.word	0x08007307
 80072c8:	08007371 	.word	0x08007371
 80072cc:	08007397 	.word	0x08007397
 80072d0:	080073cf 	.word	0x080073cf
 80072d4:	080073f9 	.word	0x080073f9
 80072d8:	0800744b 	.word	0x0800744b
 80072dc:	0800746d 	.word	0x0800746d
 80072e0:	080074a9 	.word	0x080074a9
 80072e4:	080074cf 	.word	0x080074cf
 80072e8:	0800750d 	.word	0x0800750d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f103 0110 	add.w	r1, r3, #16
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	795b      	ldrb	r3, [r3, #5]
 80072f6:	461a      	mov	r2, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f943 	bl	8007584 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2202      	movs	r2, #2
 8007302:	761a      	strb	r2, [r3, #24]
      break;
 8007304:	e139      	b.n	800757a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	795b      	ldrb	r3, [r3, #5]
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fc79 	bl	8007c04 <USBH_LL_GetURBState>
 8007312:	4603      	mov	r3, r0
 8007314:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d11e      	bne.n	800735a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7c1b      	ldrb	r3, [r3, #16]
 8007320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007324:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8adb      	ldrh	r3, [r3, #22]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800732e:	7b7b      	ldrb	r3, [r7, #13]
 8007330:	2b80      	cmp	r3, #128	; 0x80
 8007332:	d103      	bne.n	800733c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2203      	movs	r2, #3
 8007338:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800733a:	e115      	b.n	8007568 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2205      	movs	r2, #5
 8007340:	761a      	strb	r2, [r3, #24]
      break;
 8007342:	e111      	b.n	8007568 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007344:	7b7b      	ldrb	r3, [r7, #13]
 8007346:	2b80      	cmp	r3, #128	; 0x80
 8007348:	d103      	bne.n	8007352 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2209      	movs	r2, #9
 800734e:	761a      	strb	r2, [r3, #24]
      break;
 8007350:	e10a      	b.n	8007568 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2207      	movs	r2, #7
 8007356:	761a      	strb	r2, [r3, #24]
      break;
 8007358:	e106      	b.n	8007568 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b04      	cmp	r3, #4
 800735e:	d003      	beq.n	8007368 <USBH_HandleControl+0xcc>
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b02      	cmp	r3, #2
 8007364:	f040 8100 	bne.w	8007568 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	220b      	movs	r2, #11
 800736c:	761a      	strb	r2, [r3, #24]
      break;
 800736e:	e0fb      	b.n	8007568 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007376:	b29a      	uxth	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6899      	ldr	r1, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	899a      	ldrh	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	791b      	ldrb	r3, [r3, #4]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f93a 	bl	8007602 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2204      	movs	r2, #4
 8007392:	761a      	strb	r2, [r3, #24]
      break;
 8007394:	e0f1      	b.n	800757a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	791b      	ldrb	r3, [r3, #4]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fc31 	bl	8007c04 <USBH_LL_GetURBState>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d102      	bne.n	80073b2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2209      	movs	r2, #9
 80073b0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b05      	cmp	r3, #5
 80073b6:	d102      	bne.n	80073be <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80073b8:	2303      	movs	r3, #3
 80073ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80073bc:	e0d6      	b.n	800756c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	f040 80d3 	bne.w	800756c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	220b      	movs	r2, #11
 80073ca:	761a      	strb	r2, [r3, #24]
      break;
 80073cc:	e0ce      	b.n	800756c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6899      	ldr	r1, [r3, #8]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	899a      	ldrh	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	795b      	ldrb	r3, [r3, #5]
 80073da:	2001      	movs	r0, #1
 80073dc:	9000      	str	r0, [sp, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f8ea 	bl	80075b8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2206      	movs	r2, #6
 80073f4:	761a      	strb	r2, [r3, #24]
      break;
 80073f6:	e0c0      	b.n	800757a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	795b      	ldrb	r3, [r3, #5]
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fc00 	bl	8007c04 <USBH_LL_GetURBState>
 8007404:	4603      	mov	r3, r0
 8007406:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d103      	bne.n	8007416 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2207      	movs	r2, #7
 8007412:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007414:	e0ac      	b.n	8007570 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b05      	cmp	r3, #5
 800741a:	d105      	bne.n	8007428 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	220c      	movs	r2, #12
 8007420:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007422:	2303      	movs	r3, #3
 8007424:	73fb      	strb	r3, [r7, #15]
      break;
 8007426:	e0a3      	b.n	8007570 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	2b02      	cmp	r3, #2
 800742c:	d103      	bne.n	8007436 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2205      	movs	r2, #5
 8007432:	761a      	strb	r2, [r3, #24]
      break;
 8007434:	e09c      	b.n	8007570 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b04      	cmp	r3, #4
 800743a:	f040 8099 	bne.w	8007570 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	220b      	movs	r2, #11
 8007442:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007444:	2302      	movs	r3, #2
 8007446:	73fb      	strb	r3, [r7, #15]
      break;
 8007448:	e092      	b.n	8007570 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	791b      	ldrb	r3, [r3, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	2100      	movs	r1, #0
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f8d5 	bl	8007602 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800745e:	b29a      	uxth	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2208      	movs	r2, #8
 8007468:	761a      	strb	r2, [r3, #24]

      break;
 800746a:	e086      	b.n	800757a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	791b      	ldrb	r3, [r3, #4]
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fbc6 	bl	8007c04 <USBH_LL_GetURBState>
 8007478:	4603      	mov	r3, r0
 800747a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d105      	bne.n	800748e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	220d      	movs	r2, #13
 8007486:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800748c:	e072      	b.n	8007574 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800748e:	7bbb      	ldrb	r3, [r7, #14]
 8007490:	2b04      	cmp	r3, #4
 8007492:	d103      	bne.n	800749c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	220b      	movs	r2, #11
 8007498:	761a      	strb	r2, [r3, #24]
      break;
 800749a:	e06b      	b.n	8007574 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d168      	bne.n	8007574 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80074a2:	2303      	movs	r3, #3
 80074a4:	73fb      	strb	r3, [r7, #15]
      break;
 80074a6:	e065      	b.n	8007574 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	795b      	ldrb	r3, [r3, #5]
 80074ac:	2201      	movs	r2, #1
 80074ae:	9200      	str	r2, [sp, #0]
 80074b0:	2200      	movs	r2, #0
 80074b2:	2100      	movs	r1, #0
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f87f 	bl	80075b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	220a      	movs	r2, #10
 80074ca:	761a      	strb	r2, [r3, #24]
      break;
 80074cc:	e055      	b.n	800757a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	795b      	ldrb	r3, [r3, #5]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fb95 	bl	8007c04 <USBH_LL_GetURBState>
 80074da:	4603      	mov	r3, r0
 80074dc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d105      	bne.n	80074f0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	220d      	movs	r2, #13
 80074ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80074ee:	e043      	b.n	8007578 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d103      	bne.n	80074fe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2209      	movs	r2, #9
 80074fa:	761a      	strb	r2, [r3, #24]
      break;
 80074fc:	e03c      	b.n	8007578 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	2b04      	cmp	r3, #4
 8007502:	d139      	bne.n	8007578 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	220b      	movs	r2, #11
 8007508:	761a      	strb	r2, [r3, #24]
      break;
 800750a:	e035      	b.n	8007578 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	7e5b      	ldrb	r3, [r3, #25]
 8007510:	3301      	adds	r3, #1
 8007512:	b2da      	uxtb	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	765a      	strb	r2, [r3, #25]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7e5b      	ldrb	r3, [r3, #25]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d806      	bhi.n	800752e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800752c:	e025      	b.n	800757a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007534:	2106      	movs	r1, #6
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	795b      	ldrb	r3, [r3, #5]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f90c 	bl	8007764 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	791b      	ldrb	r3, [r3, #4]
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f906 	bl	8007764 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800755e:	2302      	movs	r3, #2
 8007560:	73fb      	strb	r3, [r7, #15]
      break;
 8007562:	e00a      	b.n	800757a <USBH_HandleControl+0x2de>

    default:
      break;
 8007564:	bf00      	nop
 8007566:	e008      	b.n	800757a <USBH_HandleControl+0x2de>
      break;
 8007568:	bf00      	nop
 800756a:	e006      	b.n	800757a <USBH_HandleControl+0x2de>
      break;
 800756c:	bf00      	nop
 800756e:	e004      	b.n	800757a <USBH_HandleControl+0x2de>
      break;
 8007570:	bf00      	nop
 8007572:	e002      	b.n	800757a <USBH_HandleControl+0x2de>
      break;
 8007574:	bf00      	nop
 8007576:	e000      	b.n	800757a <USBH_HandleControl+0x2de>
      break;
 8007578:	bf00      	nop
  }

  return status;
 800757a:	7bfb      	ldrb	r3, [r7, #15]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af04      	add	r7, sp, #16
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007592:	79f9      	ldrb	r1, [r7, #7]
 8007594:	2300      	movs	r3, #0
 8007596:	9303      	str	r3, [sp, #12]
 8007598:	2308      	movs	r3, #8
 800759a:	9302      	str	r3, [sp, #8]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	2300      	movs	r3, #0
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	2300      	movs	r3, #0
 80075a6:	2200      	movs	r2, #0
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fafa 	bl	8007ba2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af04      	add	r7, sp, #16
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	4611      	mov	r1, r2
 80075c4:	461a      	mov	r2, r3
 80075c6:	460b      	mov	r3, r1
 80075c8:	80fb      	strh	r3, [r7, #6]
 80075ca:	4613      	mov	r3, r2
 80075cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80075dc:	7979      	ldrb	r1, [r7, #5]
 80075de:	7e3b      	ldrb	r3, [r7, #24]
 80075e0:	9303      	str	r3, [sp, #12]
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	9302      	str	r3, [sp, #8]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	2301      	movs	r3, #1
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	2300      	movs	r3, #0
 80075f0:	2200      	movs	r2, #0
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 fad5 	bl	8007ba2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b088      	sub	sp, #32
 8007606:	af04      	add	r7, sp, #16
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	4611      	mov	r1, r2
 800760e:	461a      	mov	r2, r3
 8007610:	460b      	mov	r3, r1
 8007612:	80fb      	strh	r3, [r7, #6]
 8007614:	4613      	mov	r3, r2
 8007616:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007618:	7979      	ldrb	r1, [r7, #5]
 800761a:	2300      	movs	r3, #0
 800761c:	9303      	str	r3, [sp, #12]
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	9302      	str	r3, [sp, #8]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	9301      	str	r3, [sp, #4]
 8007626:	2301      	movs	r3, #1
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	2300      	movs	r3, #0
 800762c:	2201      	movs	r2, #1
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fab7 	bl	8007ba2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007634:	2300      	movs	r3, #0

}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b088      	sub	sp, #32
 8007642:	af04      	add	r7, sp, #16
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	4611      	mov	r1, r2
 800764a:	461a      	mov	r2, r3
 800764c:	460b      	mov	r3, r1
 800764e:	80fb      	strh	r3, [r7, #6]
 8007650:	4613      	mov	r3, r2
 8007652:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007662:	7979      	ldrb	r1, [r7, #5]
 8007664:	7e3b      	ldrb	r3, [r7, #24]
 8007666:	9303      	str	r3, [sp, #12]
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	9302      	str	r3, [sp, #8]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	2301      	movs	r3, #1
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	2302      	movs	r3, #2
 8007676:	2200      	movs	r2, #0
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fa92 	bl	8007ba2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af04      	add	r7, sp, #16
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4611      	mov	r1, r2
 8007694:	461a      	mov	r2, r3
 8007696:	460b      	mov	r3, r1
 8007698:	80fb      	strh	r3, [r7, #6]
 800769a:	4613      	mov	r3, r2
 800769c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800769e:	7979      	ldrb	r1, [r7, #5]
 80076a0:	2300      	movs	r3, #0
 80076a2:	9303      	str	r3, [sp, #12]
 80076a4:	88fb      	ldrh	r3, [r7, #6]
 80076a6:	9302      	str	r3, [sp, #8]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	9301      	str	r3, [sp, #4]
 80076ac:	2301      	movs	r3, #1
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	2302      	movs	r3, #2
 80076b2:	2201      	movs	r2, #1
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fa74 	bl	8007ba2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af04      	add	r7, sp, #16
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	4608      	mov	r0, r1
 80076ce:	4611      	mov	r1, r2
 80076d0:	461a      	mov	r2, r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	70fb      	strb	r3, [r7, #3]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70bb      	strb	r3, [r7, #2]
 80076da:	4613      	mov	r3, r2
 80076dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80076de:	7878      	ldrb	r0, [r7, #1]
 80076e0:	78ba      	ldrb	r2, [r7, #2]
 80076e2:	78f9      	ldrb	r1, [r7, #3]
 80076e4:	8b3b      	ldrh	r3, [r7, #24]
 80076e6:	9302      	str	r3, [sp, #8]
 80076e8:	7d3b      	ldrb	r3, [r7, #20]
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	7c3b      	ldrb	r3, [r7, #16]
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	4603      	mov	r3, r0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa07 	bl	8007b06 <USBH_LL_OpenPipe>

  return USBH_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa26 	bl	8007b64 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f836 	bl	80077a0 <USBH_GetFreePipe>
 8007734:	4603      	mov	r3, r0
 8007736:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007738:	89fb      	ldrh	r3, [r7, #14]
 800773a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800773e:	4293      	cmp	r3, r2
 8007740:	d00a      	beq.n	8007758 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	89fb      	ldrh	r3, [r7, #14]
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	33e0      	adds	r3, #224	; 0xe0
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	440b      	add	r3, r1
 8007756:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007758:	89fb      	ldrh	r3, [r7, #14]
 800775a:	b2db      	uxtb	r3, r3
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	2b0f      	cmp	r3, #15
 8007774:	d80d      	bhi.n	8007792 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	33e0      	adds	r3, #224	; 0xe0
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	33e0      	adds	r3, #224	; 0xe0
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	440b      	add	r3, r1
 8007790:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
 80077b0:	e00f      	b.n	80077d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	33e0      	adds	r3, #224	; 0xe0
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d102      	bne.n	80077cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	e007      	b.n	80077dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	3301      	adds	r3, #1
 80077d0:	73fb      	strb	r3, [r7, #15]
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
 80077d4:	2b0f      	cmp	r3, #15
 80077d6:	d9ec      	bls.n	80077b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80077d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80077ec:	2201      	movs	r2, #1
 80077ee:	490e      	ldr	r1, [pc, #56]	; (8007828 <MX_USB_HOST_Init+0x40>)
 80077f0:	480e      	ldr	r0, [pc, #56]	; (800782c <MX_USB_HOST_Init+0x44>)
 80077f2:	f7ff fb37 	bl	8006e64 <USBH_Init>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80077fc:	f7f9 fb72 	bl	8000ee4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007800:	490b      	ldr	r1, [pc, #44]	; (8007830 <MX_USB_HOST_Init+0x48>)
 8007802:	480a      	ldr	r0, [pc, #40]	; (800782c <MX_USB_HOST_Init+0x44>)
 8007804:	f7ff fbbc 	bl	8006f80 <USBH_RegisterClass>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800780e:	f7f9 fb69 	bl	8000ee4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007812:	4806      	ldr	r0, [pc, #24]	; (800782c <MX_USB_HOST_Init+0x44>)
 8007814:	f7ff fc40 	bl	8007098 <USBH_Start>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800781e:	f7f9 fb61 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007822:	bf00      	nop
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	08007835 	.word	0x08007835
 800782c:	2000022c 	.word	0x2000022c
 8007830:	2000008c 	.word	0x2000008c

08007834 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	3b01      	subs	r3, #1
 8007844:	2b04      	cmp	r3, #4
 8007846:	d819      	bhi.n	800787c <USBH_UserProcess+0x48>
 8007848:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <USBH_UserProcess+0x1c>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	0800787d 	.word	0x0800787d
 8007854:	0800786d 	.word	0x0800786d
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007875 	.word	0x08007875
 8007860:	08007865 	.word	0x08007865
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007864:	4b09      	ldr	r3, [pc, #36]	; (800788c <USBH_UserProcess+0x58>)
 8007866:	2203      	movs	r2, #3
 8007868:	701a      	strb	r2, [r3, #0]
  break;
 800786a:	e008      	b.n	800787e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800786c:	4b07      	ldr	r3, [pc, #28]	; (800788c <USBH_UserProcess+0x58>)
 800786e:	2202      	movs	r2, #2
 8007870:	701a      	strb	r2, [r3, #0]
  break;
 8007872:	e004      	b.n	800787e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <USBH_UserProcess+0x58>)
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]
  break;
 800787a:	e000      	b.n	800787e <USBH_UserProcess+0x4a>

  default:
  break;
 800787c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	20000604 	.word	0x20000604

08007890 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	; 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007898:	f107 0314 	add.w	r3, r7, #20
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	605a      	str	r2, [r3, #4]
 80078a2:	609a      	str	r2, [r3, #8]
 80078a4:	60da      	str	r2, [r3, #12]
 80078a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078b0:	d147      	bne.n	8007942 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078b2:	2300      	movs	r3, #0
 80078b4:	613b      	str	r3, [r7, #16]
 80078b6:	4b25      	ldr	r3, [pc, #148]	; (800794c <HAL_HCD_MspInit+0xbc>)
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	4a24      	ldr	r2, [pc, #144]	; (800794c <HAL_HCD_MspInit+0xbc>)
 80078bc:	f043 0301 	orr.w	r3, r3, #1
 80078c0:	6313      	str	r3, [r2, #48]	; 0x30
 80078c2:	4b22      	ldr	r3, [pc, #136]	; (800794c <HAL_HCD_MspInit+0xbc>)
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80078ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80078dc:	f107 0314 	add.w	r3, r7, #20
 80078e0:	4619      	mov	r1, r3
 80078e2:	481b      	ldr	r0, [pc, #108]	; (8007950 <HAL_HCD_MspInit+0xc0>)
 80078e4:	f7fa f9f2 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80078e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80078ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ee:	2302      	movs	r3, #2
 80078f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078f6:	2300      	movs	r3, #0
 80078f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078fa:	230a      	movs	r3, #10
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078fe:	f107 0314 	add.w	r3, r7, #20
 8007902:	4619      	mov	r1, r3
 8007904:	4812      	ldr	r0, [pc, #72]	; (8007950 <HAL_HCD_MspInit+0xc0>)
 8007906:	f7fa f9e1 	bl	8001ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800790a:	4b10      	ldr	r3, [pc, #64]	; (800794c <HAL_HCD_MspInit+0xbc>)
 800790c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790e:	4a0f      	ldr	r2, [pc, #60]	; (800794c <HAL_HCD_MspInit+0xbc>)
 8007910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007914:	6353      	str	r3, [r2, #52]	; 0x34
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <HAL_HCD_MspInit+0xbc>)
 800791c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791e:	4a0b      	ldr	r2, [pc, #44]	; (800794c <HAL_HCD_MspInit+0xbc>)
 8007920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007924:	6453      	str	r3, [r2, #68]	; 0x44
 8007926:	4b09      	ldr	r3, [pc, #36]	; (800794c <HAL_HCD_MspInit+0xbc>)
 8007928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007932:	2200      	movs	r2, #0
 8007934:	2100      	movs	r1, #0
 8007936:	2043      	movs	r0, #67	; 0x43
 8007938:	f7fa f991 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800793c:	2043      	movs	r0, #67	; 0x43
 800793e:	f7fa f9aa 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007942:	bf00      	nop
 8007944:	3728      	adds	r7, #40	; 0x28
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40023800 	.word	0x40023800
 8007950:	40020000 	.word	0x40020000

08007954 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fbb7 	bl	80070d6 <USBH_LL_IncTimer>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff fbef 	bl	8007162 <USBH_LL_Connect>
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff fbf8 	bl	8007190 <USBH_LL_Disconnect>
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
 80079b4:	4613      	mov	r3, r2
 80079b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fba9 	bl	800712a <USBH_LL_PortEnabled>
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff fba9 	bl	8007146 <USBH_LL_PortDisabled>
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d12a      	bne.n	8007a64 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007a0e:	4a18      	ldr	r2, [pc, #96]	; (8007a70 <USBH_LL_Init+0x74>)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a15      	ldr	r2, [pc, #84]	; (8007a70 <USBH_LL_Init+0x74>)
 8007a1a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a1e:	4b14      	ldr	r3, [pc, #80]	; (8007a70 <USBH_LL_Init+0x74>)
 8007a20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a24:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007a26:	4b12      	ldr	r3, [pc, #72]	; (8007a70 <USBH_LL_Init+0x74>)
 8007a28:	2208      	movs	r2, #8
 8007a2a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <USBH_LL_Init+0x74>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a32:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <USBH_LL_Init+0x74>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007a38:	4b0d      	ldr	r3, [pc, #52]	; (8007a70 <USBH_LL_Init+0x74>)
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	; (8007a70 <USBH_LL_Init+0x74>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007a44:	480a      	ldr	r0, [pc, #40]	; (8007a70 <USBH_LL_Init+0x74>)
 8007a46:	f7fa fbf2 	bl	800222e <HAL_HCD_Init>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007a50:	f7f9 fa48 	bl	8000ee4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007a54:	4806      	ldr	r0, [pc, #24]	; (8007a70 <USBH_LL_Init+0x74>)
 8007a56:	f7fa ffc8 	bl	80029ea <HAL_HCD_GetCurrentFrame>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fb2a 	bl	80070b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000608 	.word	0x20000608

08007a74 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fa ff45 	bl	800291a <HAL_HCD_Start>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f90e 	bl	8007cb8 <USBH_Get_USB_Status>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fa ff4d 	bl	8002960 <HAL_HCD_Stop>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 f8f3 	bl	8007cb8 <USBH_Get_USB_Status>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fa ff63 	bl	80029c2 <HAL_HCD_HC_GetXferCount>
 8007afc:	4603      	mov	r3, r0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b06:	b590      	push	{r4, r7, lr}
 8007b08:	b089      	sub	sp, #36	; 0x24
 8007b0a:	af04      	add	r7, sp, #16
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	4608      	mov	r0, r1
 8007b10:	4611      	mov	r1, r2
 8007b12:	461a      	mov	r2, r3
 8007b14:	4603      	mov	r3, r0
 8007b16:	70fb      	strb	r3, [r7, #3]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70bb      	strb	r3, [r7, #2]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b2e:	787c      	ldrb	r4, [r7, #1]
 8007b30:	78ba      	ldrb	r2, [r7, #2]
 8007b32:	78f9      	ldrb	r1, [r7, #3]
 8007b34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b36:	9302      	str	r3, [sp, #8]
 8007b38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4623      	mov	r3, r4
 8007b46:	f7fa fbd4 	bl	80022f2 <HAL_HCD_HC_Init>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 f8b1 	bl	8007cb8 <USBH_Get_USB_Status>
 8007b56:	4603      	mov	r3, r0
 8007b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd90      	pop	{r4, r7, pc}

08007b64 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b7e:	78fa      	ldrb	r2, [r7, #3]
 8007b80:	4611      	mov	r1, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fa fc44 	bl	8002410 <HAL_HCD_HC_Halt>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 f892 	bl	8007cb8 <USBH_Get_USB_Status>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007ba2:	b590      	push	{r4, r7, lr}
 8007ba4:	b089      	sub	sp, #36	; 0x24
 8007ba6:	af04      	add	r7, sp, #16
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	4608      	mov	r0, r1
 8007bac:	4611      	mov	r1, r2
 8007bae:	461a      	mov	r2, r3
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	70fb      	strb	r3, [r7, #3]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70bb      	strb	r3, [r7, #2]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007bca:	787c      	ldrb	r4, [r7, #1]
 8007bcc:	78ba      	ldrb	r2, [r7, #2]
 8007bce:	78f9      	ldrb	r1, [r7, #3]
 8007bd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bd4:	9303      	str	r3, [sp, #12]
 8007bd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bd8:	9302      	str	r3, [sp, #8]
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	4623      	mov	r3, r4
 8007be6:	f7fa fc37 	bl	8002458 <HAL_HCD_HC_SubmitRequest>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 f861 	bl	8007cb8 <USBH_Get_USB_Status>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd90      	pop	{r4, r7, pc}

08007c04 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fa febd 	bl	800299a <HAL_HCD_HC_GetURBState>
 8007c20:	4603      	mov	r3, r0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d103      	bne.n	8007c48 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 f864 	bl	8007d10 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007c48:	20c8      	movs	r0, #200	; 0xc8
 8007c4a:	f7f9 ff09 	bl	8001a60 <HAL_Delay>
  return USBH_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
 8007c64:	4613      	mov	r3, r2
 8007c66:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c6e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	212c      	movs	r1, #44	; 0x2c
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	333b      	adds	r3, #59	; 0x3b
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d009      	beq.n	8007c98 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	212c      	movs	r1, #44	; 0x2c
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	4413      	add	r3, r2
 8007c90:	3354      	adds	r3, #84	; 0x54
 8007c92:	78ba      	ldrb	r2, [r7, #2]
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	e008      	b.n	8007caa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	212c      	movs	r1, #44	; 0x2c
 8007c9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3355      	adds	r3, #85	; 0x55
 8007ca6:	78ba      	ldrb	r2, [r7, #2]
 8007ca8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d817      	bhi.n	8007cfc <USBH_Get_USB_Status+0x44>
 8007ccc:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <USBH_Get_USB_Status+0x1c>)
 8007cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd2:	bf00      	nop
 8007cd4:	08007ce5 	.word	0x08007ce5
 8007cd8:	08007ceb 	.word	0x08007ceb
 8007cdc:	08007cf1 	.word	0x08007cf1
 8007ce0:	08007cf7 	.word	0x08007cf7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce8:	e00b      	b.n	8007d02 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007cea:	2302      	movs	r3, #2
 8007cec:	73fb      	strb	r3, [r7, #15]
    break;
 8007cee:	e008      	b.n	8007d02 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf4:	e005      	b.n	8007d02 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cfa:	e002      	b.n	8007d02 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8007d00:	bf00      	nop
  }
  return usb_status;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d102      	bne.n	8007d2a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73fb      	strb	r3, [r7, #15]
 8007d28:	e001      	b.n	8007d2e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	461a      	mov	r2, r3
 8007d32:	2101      	movs	r1, #1
 8007d34:	4803      	ldr	r0, [pc, #12]	; (8007d44 <MX_DriverVbusFS+0x34>)
 8007d36:	f7fa fa61 	bl	80021fc <HAL_GPIO_WritePin>
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40020800 	.word	0x40020800

08007d48 <__errno>:
 8007d48:	4b01      	ldr	r3, [pc, #4]	; (8007d50 <__errno+0x8>)
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	200000ac 	.word	0x200000ac

08007d54 <__libc_init_array>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	4d0d      	ldr	r5, [pc, #52]	; (8007d8c <__libc_init_array+0x38>)
 8007d58:	4c0d      	ldr	r4, [pc, #52]	; (8007d90 <__libc_init_array+0x3c>)
 8007d5a:	1b64      	subs	r4, r4, r5
 8007d5c:	10a4      	asrs	r4, r4, #2
 8007d5e:	2600      	movs	r6, #0
 8007d60:	42a6      	cmp	r6, r4
 8007d62:	d109      	bne.n	8007d78 <__libc_init_array+0x24>
 8007d64:	4d0b      	ldr	r5, [pc, #44]	; (8007d94 <__libc_init_array+0x40>)
 8007d66:	4c0c      	ldr	r4, [pc, #48]	; (8007d98 <__libc_init_array+0x44>)
 8007d68:	f000 f92e 	bl	8007fc8 <_init>
 8007d6c:	1b64      	subs	r4, r4, r5
 8007d6e:	10a4      	asrs	r4, r4, #2
 8007d70:	2600      	movs	r6, #0
 8007d72:	42a6      	cmp	r6, r4
 8007d74:	d105      	bne.n	8007d82 <__libc_init_array+0x2e>
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
 8007d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7c:	4798      	blx	r3
 8007d7e:	3601      	adds	r6, #1
 8007d80:	e7ee      	b.n	8007d60 <__libc_init_array+0xc>
 8007d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d86:	4798      	blx	r3
 8007d88:	3601      	adds	r6, #1
 8007d8a:	e7f2      	b.n	8007d72 <__libc_init_array+0x1e>
 8007d8c:	0800800c 	.word	0x0800800c
 8007d90:	0800800c 	.word	0x0800800c
 8007d94:	0800800c 	.word	0x0800800c
 8007d98:	08008010 	.word	0x08008010

08007d9c <malloc>:
 8007d9c:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <malloc+0xc>)
 8007d9e:	4601      	mov	r1, r0
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	f000 b87f 	b.w	8007ea4 <_malloc_r>
 8007da6:	bf00      	nop
 8007da8:	200000ac 	.word	0x200000ac

08007dac <free>:
 8007dac:	4b02      	ldr	r3, [pc, #8]	; (8007db8 <free+0xc>)
 8007dae:	4601      	mov	r1, r0
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	f000 b80b 	b.w	8007dcc <_free_r>
 8007db6:	bf00      	nop
 8007db8:	200000ac 	.word	0x200000ac

08007dbc <memset>:
 8007dbc:	4402      	add	r2, r0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d100      	bne.n	8007dc6 <memset+0xa>
 8007dc4:	4770      	bx	lr
 8007dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dca:	e7f9      	b.n	8007dc0 <memset+0x4>

08007dcc <_free_r>:
 8007dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	d044      	beq.n	8007e5c <_free_r+0x90>
 8007dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd6:	9001      	str	r0, [sp, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f1a1 0404 	sub.w	r4, r1, #4
 8007dde:	bfb8      	it	lt
 8007de0:	18e4      	addlt	r4, r4, r3
 8007de2:	f000 f8e3 	bl	8007fac <__malloc_lock>
 8007de6:	4a1e      	ldr	r2, [pc, #120]	; (8007e60 <_free_r+0x94>)
 8007de8:	9801      	ldr	r0, [sp, #4]
 8007dea:	6813      	ldr	r3, [r2, #0]
 8007dec:	b933      	cbnz	r3, 8007dfc <_free_r+0x30>
 8007dee:	6063      	str	r3, [r4, #4]
 8007df0:	6014      	str	r4, [r2, #0]
 8007df2:	b003      	add	sp, #12
 8007df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007df8:	f000 b8de 	b.w	8007fb8 <__malloc_unlock>
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	d908      	bls.n	8007e12 <_free_r+0x46>
 8007e00:	6825      	ldr	r5, [r4, #0]
 8007e02:	1961      	adds	r1, r4, r5
 8007e04:	428b      	cmp	r3, r1
 8007e06:	bf01      	itttt	eq
 8007e08:	6819      	ldreq	r1, [r3, #0]
 8007e0a:	685b      	ldreq	r3, [r3, #4]
 8007e0c:	1949      	addeq	r1, r1, r5
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	e7ed      	b.n	8007dee <_free_r+0x22>
 8007e12:	461a      	mov	r2, r3
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	b10b      	cbz	r3, 8007e1c <_free_r+0x50>
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	d9fa      	bls.n	8007e12 <_free_r+0x46>
 8007e1c:	6811      	ldr	r1, [r2, #0]
 8007e1e:	1855      	adds	r5, r2, r1
 8007e20:	42a5      	cmp	r5, r4
 8007e22:	d10b      	bne.n	8007e3c <_free_r+0x70>
 8007e24:	6824      	ldr	r4, [r4, #0]
 8007e26:	4421      	add	r1, r4
 8007e28:	1854      	adds	r4, r2, r1
 8007e2a:	42a3      	cmp	r3, r4
 8007e2c:	6011      	str	r1, [r2, #0]
 8007e2e:	d1e0      	bne.n	8007df2 <_free_r+0x26>
 8007e30:	681c      	ldr	r4, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	6053      	str	r3, [r2, #4]
 8007e36:	4421      	add	r1, r4
 8007e38:	6011      	str	r1, [r2, #0]
 8007e3a:	e7da      	b.n	8007df2 <_free_r+0x26>
 8007e3c:	d902      	bls.n	8007e44 <_free_r+0x78>
 8007e3e:	230c      	movs	r3, #12
 8007e40:	6003      	str	r3, [r0, #0]
 8007e42:	e7d6      	b.n	8007df2 <_free_r+0x26>
 8007e44:	6825      	ldr	r5, [r4, #0]
 8007e46:	1961      	adds	r1, r4, r5
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	bf04      	itt	eq
 8007e4c:	6819      	ldreq	r1, [r3, #0]
 8007e4e:	685b      	ldreq	r3, [r3, #4]
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	bf04      	itt	eq
 8007e54:	1949      	addeq	r1, r1, r5
 8007e56:	6021      	streq	r1, [r4, #0]
 8007e58:	6054      	str	r4, [r2, #4]
 8007e5a:	e7ca      	b.n	8007df2 <_free_r+0x26>
 8007e5c:	b003      	add	sp, #12
 8007e5e:	bd30      	pop	{r4, r5, pc}
 8007e60:	2000090c 	.word	0x2000090c

08007e64 <sbrk_aligned>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	4e0e      	ldr	r6, [pc, #56]	; (8007ea0 <sbrk_aligned+0x3c>)
 8007e68:	460c      	mov	r4, r1
 8007e6a:	6831      	ldr	r1, [r6, #0]
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	b911      	cbnz	r1, 8007e76 <sbrk_aligned+0x12>
 8007e70:	f000 f88c 	bl	8007f8c <_sbrk_r>
 8007e74:	6030      	str	r0, [r6, #0]
 8007e76:	4621      	mov	r1, r4
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f000 f887 	bl	8007f8c <_sbrk_r>
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	d00a      	beq.n	8007e98 <sbrk_aligned+0x34>
 8007e82:	1cc4      	adds	r4, r0, #3
 8007e84:	f024 0403 	bic.w	r4, r4, #3
 8007e88:	42a0      	cmp	r0, r4
 8007e8a:	d007      	beq.n	8007e9c <sbrk_aligned+0x38>
 8007e8c:	1a21      	subs	r1, r4, r0
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f000 f87c 	bl	8007f8c <_sbrk_r>
 8007e94:	3001      	adds	r0, #1
 8007e96:	d101      	bne.n	8007e9c <sbrk_aligned+0x38>
 8007e98:	f04f 34ff 	mov.w	r4, #4294967295
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ea0:	20000910 	.word	0x20000910

08007ea4 <_malloc_r>:
 8007ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea8:	1ccd      	adds	r5, r1, #3
 8007eaa:	f025 0503 	bic.w	r5, r5, #3
 8007eae:	3508      	adds	r5, #8
 8007eb0:	2d0c      	cmp	r5, #12
 8007eb2:	bf38      	it	cc
 8007eb4:	250c      	movcc	r5, #12
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	4607      	mov	r7, r0
 8007eba:	db01      	blt.n	8007ec0 <_malloc_r+0x1c>
 8007ebc:	42a9      	cmp	r1, r5
 8007ebe:	d905      	bls.n	8007ecc <_malloc_r+0x28>
 8007ec0:	230c      	movs	r3, #12
 8007ec2:	603b      	str	r3, [r7, #0]
 8007ec4:	2600      	movs	r6, #0
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ecc:	4e2e      	ldr	r6, [pc, #184]	; (8007f88 <_malloc_r+0xe4>)
 8007ece:	f000 f86d 	bl	8007fac <__malloc_lock>
 8007ed2:	6833      	ldr	r3, [r6, #0]
 8007ed4:	461c      	mov	r4, r3
 8007ed6:	bb34      	cbnz	r4, 8007f26 <_malloc_r+0x82>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7ff ffc2 	bl	8007e64 <sbrk_aligned>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	d14d      	bne.n	8007f82 <_malloc_r+0xde>
 8007ee6:	6834      	ldr	r4, [r6, #0]
 8007ee8:	4626      	mov	r6, r4
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	d140      	bne.n	8007f70 <_malloc_r+0xcc>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	eb04 0803 	add.w	r8, r4, r3
 8007ef8:	f000 f848 	bl	8007f8c <_sbrk_r>
 8007efc:	4580      	cmp	r8, r0
 8007efe:	d13a      	bne.n	8007f76 <_malloc_r+0xd2>
 8007f00:	6821      	ldr	r1, [r4, #0]
 8007f02:	3503      	adds	r5, #3
 8007f04:	1a6d      	subs	r5, r5, r1
 8007f06:	f025 0503 	bic.w	r5, r5, #3
 8007f0a:	3508      	adds	r5, #8
 8007f0c:	2d0c      	cmp	r5, #12
 8007f0e:	bf38      	it	cc
 8007f10:	250c      	movcc	r5, #12
 8007f12:	4629      	mov	r1, r5
 8007f14:	4638      	mov	r0, r7
 8007f16:	f7ff ffa5 	bl	8007e64 <sbrk_aligned>
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d02b      	beq.n	8007f76 <_malloc_r+0xd2>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	442b      	add	r3, r5
 8007f22:	6023      	str	r3, [r4, #0]
 8007f24:	e00e      	b.n	8007f44 <_malloc_r+0xa0>
 8007f26:	6822      	ldr	r2, [r4, #0]
 8007f28:	1b52      	subs	r2, r2, r5
 8007f2a:	d41e      	bmi.n	8007f6a <_malloc_r+0xc6>
 8007f2c:	2a0b      	cmp	r2, #11
 8007f2e:	d916      	bls.n	8007f5e <_malloc_r+0xba>
 8007f30:	1961      	adds	r1, r4, r5
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	6025      	str	r5, [r4, #0]
 8007f36:	bf18      	it	ne
 8007f38:	6059      	strne	r1, [r3, #4]
 8007f3a:	6863      	ldr	r3, [r4, #4]
 8007f3c:	bf08      	it	eq
 8007f3e:	6031      	streq	r1, [r6, #0]
 8007f40:	5162      	str	r2, [r4, r5]
 8007f42:	604b      	str	r3, [r1, #4]
 8007f44:	4638      	mov	r0, r7
 8007f46:	f104 060b 	add.w	r6, r4, #11
 8007f4a:	f000 f835 	bl	8007fb8 <__malloc_unlock>
 8007f4e:	f026 0607 	bic.w	r6, r6, #7
 8007f52:	1d23      	adds	r3, r4, #4
 8007f54:	1af2      	subs	r2, r6, r3
 8007f56:	d0b6      	beq.n	8007ec6 <_malloc_r+0x22>
 8007f58:	1b9b      	subs	r3, r3, r6
 8007f5a:	50a3      	str	r3, [r4, r2]
 8007f5c:	e7b3      	b.n	8007ec6 <_malloc_r+0x22>
 8007f5e:	6862      	ldr	r2, [r4, #4]
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	bf0c      	ite	eq
 8007f64:	6032      	streq	r2, [r6, #0]
 8007f66:	605a      	strne	r2, [r3, #4]
 8007f68:	e7ec      	b.n	8007f44 <_malloc_r+0xa0>
 8007f6a:	4623      	mov	r3, r4
 8007f6c:	6864      	ldr	r4, [r4, #4]
 8007f6e:	e7b2      	b.n	8007ed6 <_malloc_r+0x32>
 8007f70:	4634      	mov	r4, r6
 8007f72:	6876      	ldr	r6, [r6, #4]
 8007f74:	e7b9      	b.n	8007eea <_malloc_r+0x46>
 8007f76:	230c      	movs	r3, #12
 8007f78:	603b      	str	r3, [r7, #0]
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	f000 f81c 	bl	8007fb8 <__malloc_unlock>
 8007f80:	e7a1      	b.n	8007ec6 <_malloc_r+0x22>
 8007f82:	6025      	str	r5, [r4, #0]
 8007f84:	e7de      	b.n	8007f44 <_malloc_r+0xa0>
 8007f86:	bf00      	nop
 8007f88:	2000090c 	.word	0x2000090c

08007f8c <_sbrk_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4d06      	ldr	r5, [pc, #24]	; (8007fa8 <_sbrk_r+0x1c>)
 8007f90:	2300      	movs	r3, #0
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	602b      	str	r3, [r5, #0]
 8007f98:	f7f9 fc7e 	bl	8001898 <_sbrk>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_sbrk_r+0x1a>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_sbrk_r+0x1a>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	20000914 	.word	0x20000914

08007fac <__malloc_lock>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__malloc_lock+0x8>)
 8007fae:	f000 b809 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	20000918 	.word	0x20000918

08007fb8 <__malloc_unlock>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__malloc_unlock+0x8>)
 8007fba:	f000 b804 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	20000918 	.word	0x20000918

08007fc4 <__retarget_lock_acquire_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <__retarget_lock_release_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <_init>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr

08007fd4 <_fini>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	bf00      	nop
 8007fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fda:	bc08      	pop	{r3}
 8007fdc:	469e      	mov	lr, r3
 8007fde:	4770      	bx	lr
